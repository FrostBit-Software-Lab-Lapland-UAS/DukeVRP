id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: Global
  language: CSharp
  name:
    CSharp: Global
    VB: ''
  nameWithType:
    CSharp: Global
    VB: ''
  qualifiedName:
    CSharp: Global
    VB: ''
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Global.LightFlickerEffect
    commentId: T:Global.LightFlickerEffect
    language: CSharp
    name:
      CSharp: LightFlickerEffect
      VB: LightFlickerEffect
    nameWithType:
      CSharp: LightFlickerEffect
      VB: LightFlickerEffect
    qualifiedName:
      CSharp: LightFlickerEffect
      VB: LightFlickerEffect
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: LightFlickerEffect
      path: ''
      startLine: 10
    summary: "\nComponent which will flicker a linked light while active by changing its\nintensity between the min and max values given. The flickering can be\nsharp or smoothed depending on the value of the smoothing parameter.\n\nJust activate / deactivate this component as usual to pause / resume flicker\n"
    example: []
    syntax:
      content:
        CSharp: 'public class LightFlickerEffect : MonoBehaviour'
        VB: >-
          Public Class LightFlickerEffect

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.LightFlickerEffect.light
      commentId: F:Global.LightFlickerEffect.light
      language: CSharp
      name:
        CSharp: light
        VB: light
      nameWithType:
        CSharp: LightFlickerEffect.light
        VB: LightFlickerEffect.light
      qualifiedName:
        CSharp: LightFlickerEffect.light
        VB: LightFlickerEffect.light
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: light
        path: ''
        startLine: 13
      syntax:
        content:
          CSharp: public Light light
          VB: Public light As Light
        return:
          type: Global.Light
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.LightFlickerEffect.minIntensity
      commentId: F:Global.LightFlickerEffect.minIntensity
      language: CSharp
      name:
        CSharp: minIntensity
        VB: minIntensity
      nameWithType:
        CSharp: LightFlickerEffect.minIntensity
        VB: LightFlickerEffect.minIntensity
      qualifiedName:
        CSharp: LightFlickerEffect.minIntensity
        VB: LightFlickerEffect.minIntensity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: minIntensity
        path: ''
        startLine: 15
      syntax:
        content:
          CSharp: public float minIntensity
          VB: Public minIntensity As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.LightFlickerEffect.maxIntensity
      commentId: F:Global.LightFlickerEffect.maxIntensity
      language: CSharp
      name:
        CSharp: maxIntensity
        VB: maxIntensity
      nameWithType:
        CSharp: LightFlickerEffect.maxIntensity
        VB: LightFlickerEffect.maxIntensity
      qualifiedName:
        CSharp: LightFlickerEffect.maxIntensity
        VB: LightFlickerEffect.maxIntensity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: maxIntensity
        path: ''
        startLine: 17
      syntax:
        content:
          CSharp: public float maxIntensity
          VB: Public maxIntensity As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.LightFlickerEffect.smoothing
      commentId: F:Global.LightFlickerEffect.smoothing
      language: CSharp
      name:
        CSharp: smoothing
        VB: smoothing
      nameWithType:
        CSharp: LightFlickerEffect.smoothing
        VB: LightFlickerEffect.smoothing
      qualifiedName:
        CSharp: LightFlickerEffect.smoothing
        VB: LightFlickerEffect.smoothing
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: smoothing
        path: ''
        startLine: 20
      syntax:
        content:
          CSharp: public int smoothing
          VB: Public smoothing As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.LightFlickerEffect.Reset
      commentId: M:Global.LightFlickerEffect.Reset
      language: CSharp
      name:
        CSharp: Reset()
        VB: Reset()
      nameWithType:
        CSharp: LightFlickerEffect.Reset()
        VB: LightFlickerEffect.Reset()
      qualifiedName:
        CSharp: LightFlickerEffect.Reset()
        VB: LightFlickerEffect.Reset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Reset
        path: ''
        startLine: 33
      summary: "\nReset the randomness and start again. You usually don&apos;t need to call\nthis, deactivating/reactivating is usually fine but if you want a strict\nrestart you can do.\n"
      example: []
      syntax:
        content:
          CSharp: public void Reset()
          VB: Public Sub Reset
      overload: Global.LightFlickerEffect.Reset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.DeviceEditor
    commentId: T:Global.DeviceEditor
    language: CSharp
    name:
      CSharp: DeviceEditor
      VB: DeviceEditor
    nameWithType:
      CSharp: DeviceEditor
      VB: DeviceEditor
    qualifiedName:
      CSharp: DeviceEditor
      VB: DeviceEditor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: DeviceEditor
      path: ''
      startLine: 75
    syntax:
      content:
        CSharp: 'public class DeviceEditor : EditorWindow'
        VB: >-
          Public Class DeviceEditor

              Inherits EditorWindow
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.SomeEditor
    commentId: T:Global.SomeEditor
    language: CSharp
    name:
      CSharp: SomeEditor
      VB: SomeEditor
    nameWithType:
      CSharp: SomeEditor
      VB: SomeEditor
    qualifiedName:
      CSharp: SomeEditor
      VB: SomeEditor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SomeEditor
      path: ''
      startLine: 95
    syntax:
      content:
        CSharp: 'public class SomeEditor : Editor'
        VB: >-
          Public Class SomeEditor

              Inherits Editor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SomeEditor.source
      commentId: F:Global.SomeEditor.source
      language: CSharp
      name:
        CSharp: source
        VB: source
      nameWithType:
        CSharp: SomeEditor.source
        VB: SomeEditor.source
      qualifiedName:
        CSharp: SomeEditor.source
        VB: SomeEditor.source
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: source
        path: ''
        startLine: 98
      syntax:
        content:
          CSharp: public Object source
          VB: Public source As Object
        return:
          type: Global.Object
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SomeEditor.OnInspectorGUI
      commentId: M:Global.SomeEditor.OnInspectorGUI
      language: CSharp
      name:
        CSharp: OnInspectorGUI()
        VB: OnInspectorGUI()
      nameWithType:
        CSharp: SomeEditor.OnInspectorGUI()
        VB: SomeEditor.OnInspectorGUI()
      qualifiedName:
        CSharp: SomeEditor.OnInspectorGUI()
        VB: SomeEditor.OnInspectorGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInspectorGUI
        path: ''
        startLine: 99
      syntax:
        content:
          CSharp: public override void OnInspectorGUI()
          VB: Public Overrides Sub OnInspectorGUI
      overload: Global.SomeEditor.OnInspectorGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.GenericDM
    commentId: T:Global.GenericDM
    language: CSharp
    name:
      CSharp: GenericDM
      VB: GenericDM
    nameWithType:
      CSharp: GenericDM
      VB: GenericDM
    qualifiedName:
      CSharp: GenericDM
      VB: GenericDM
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericDM
      path: ''
      startLine: 1239
    syntax:
      content:
        CSharp: 'public class GenericDM : MonoBehaviour'
        VB: >-
          Public Class GenericDM

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericDM.device
      commentId: F:Global.GenericDM.device
      language: CSharp
      name:
        CSharp: device
        VB: device
      nameWithType:
        CSharp: GenericDM.device
        VB: GenericDM.device
      qualifiedName:
        CSharp: GenericDM.device
        VB: GenericDM.device
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: device
        path: ''
        startLine: 1241
      syntax:
        content:
          CSharp: public SlotOut device
          VB: Public device As SlotOut
        return:
          type: Global.SlotOut
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDM.Start
      commentId: M:Global.GenericDM.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: GenericDM.Start()
        VB: GenericDM.Start()
      qualifiedName:
        CSharp: GenericDM.Start()
        VB: GenericDM.Start()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Start
        path: ''
        startLine: 1243
      syntax:
        content:
          CSharp: public void Start()
          VB: Public Sub Start
      overload: Global.GenericDM.Start*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDM.DoDM(DeviceData)
      commentId: M:Global.GenericDM.DoDM(DeviceData)
      language: CSharp
      name:
        CSharp: DoDM(DeviceData)
        VB: DoDM(DeviceData)
      nameWithType:
        CSharp: GenericDM.DoDM(DeviceData)
        VB: GenericDM.DoDM(DeviceData)
      qualifiedName:
        CSharp: GenericDM.DoDM(DeviceData)
        VB: GenericDM.DoDM(DeviceData)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DoDM
        path: ''
        startLine: 1247
      syntax:
        content:
          CSharp: public virtual void DoDM(DeviceData lastDeviceData)
          VB: Public Overridable Sub DoDM(lastDeviceData As DeviceData)
        parameters:
        - id: lastDeviceData
          type: Global.DeviceData
      overload: Global.GenericDM.DoDM*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
  - id: Global.LookWithMouse
    commentId: T:Global.LookWithMouse
    language: CSharp
    name:
      CSharp: LookWithMouse
      VB: LookWithMouse
    nameWithType:
      CSharp: LookWithMouse
      VB: LookWithMouse
    qualifiedName:
      CSharp: LookWithMouse
      VB: LookWithMouse
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: LookWithMouse
      path: ''
      startLine: 1256
    syntax:
      content:
        CSharp: 'public class LookWithMouse : MonoBehaviour'
        VB: >-
          Public Class LookWithMouse

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.LookWithMouse.mouseSensitivity
      commentId: F:Global.LookWithMouse.mouseSensitivity
      language: CSharp
      name:
        CSharp: mouseSensitivity
        VB: mouseSensitivity
      nameWithType:
        CSharp: LookWithMouse.mouseSensitivity
        VB: LookWithMouse.mouseSensitivity
      qualifiedName:
        CSharp: LookWithMouse.mouseSensitivity
        VB: LookWithMouse.mouseSensitivity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: mouseSensitivity
        path: ''
        startLine: 1258
      syntax:
        content:
          CSharp: public float mouseSensitivity
          VB: Public mouseSensitivity As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.LookWithMouse.playerBody
      commentId: F:Global.LookWithMouse.playerBody
      language: CSharp
      name:
        CSharp: playerBody
        VB: playerBody
      nameWithType:
        CSharp: LookWithMouse.playerBody
        VB: LookWithMouse.playerBody
      qualifiedName:
        CSharp: LookWithMouse.playerBody
        VB: LookWithMouse.playerBody
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerBody
        path: ''
        startLine: 1260
      syntax:
        content:
          CSharp: public Transform playerBody
          VB: Public playerBody As Transform
        return:
          type: Global.Transform
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.MathHelper
    commentId: T:Global.MathHelper
    language: CSharp
    name:
      CSharp: MathHelper
      VB: MathHelper
    nameWithType:
      CSharp: MathHelper
      VB: MathHelper
    qualifiedName:
      CSharp: MathHelper
      VB: MathHelper
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MathHelper
      path: ''
      startLine: 1291
    syntax:
      content:
        CSharp: public static class MathHelper
        VB: Public Module MathHelper
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Global.MathHelper.FlipCurve(AnimationCurve)
      commentId: M:Global.MathHelper.FlipCurve(AnimationCurve)
      language: CSharp
      name:
        CSharp: FlipCurve(AnimationCurve)
        VB: FlipCurve(AnimationCurve)
      nameWithType:
        CSharp: MathHelper.FlipCurve(AnimationCurve)
        VB: MathHelper.FlipCurve(AnimationCurve)
      qualifiedName:
        CSharp: MathHelper.FlipCurve(AnimationCurve)
        VB: MathHelper.FlipCurve(AnimationCurve)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipCurve
        path: ''
        startLine: 1294
      syntax:
        content:
          CSharp: public static AnimationCurve FlipCurve(AnimationCurve normalCurve)
          VB: Public Shared Function FlipCurve(normalCurve As AnimationCurve) As AnimationCurve
        parameters:
        - id: normalCurve
          type: Global.AnimationCurve
        return:
          type: Global.AnimationCurve
      overload: Global.MathHelper.FlipCurve*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.MathHelper.FlipCurve2(AnimationCurve)
      commentId: M:Global.MathHelper.FlipCurve2(AnimationCurve)
      language: CSharp
      name:
        CSharp: FlipCurve2(AnimationCurve)
        VB: FlipCurve2(AnimationCurve)
      nameWithType:
        CSharp: MathHelper.FlipCurve2(AnimationCurve)
        VB: MathHelper.FlipCurve2(AnimationCurve)
      qualifiedName:
        CSharp: MathHelper.FlipCurve2(AnimationCurve)
        VB: MathHelper.FlipCurve2(AnimationCurve)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipCurve2
        path: ''
        startLine: 1321
      syntax:
        content:
          CSharp: public static AnimationCurve FlipCurve2(AnimationCurve normalCurve)
          VB: Public Shared Function FlipCurve2(normalCurve As AnimationCurve) As AnimationCurve
        parameters:
        - id: normalCurve
          type: Global.AnimationCurve
        return:
          type: Global.AnimationCurve
      overload: Global.MathHelper.FlipCurve2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.MathHelper.SumCurve(AnimationCurve,AnimationCurve)
      commentId: M:Global.MathHelper.SumCurve(AnimationCurve,AnimationCurve)
      language: CSharp
      name:
        CSharp: SumCurve(AnimationCurve, AnimationCurve)
        VB: SumCurve(AnimationCurve, AnimationCurve)
      nameWithType:
        CSharp: MathHelper.SumCurve(AnimationCurve, AnimationCurve)
        VB: MathHelper.SumCurve(AnimationCurve, AnimationCurve)
      qualifiedName:
        CSharp: MathHelper.SumCurve(AnimationCurve, AnimationCurve)
        VB: MathHelper.SumCurve(AnimationCurve, AnimationCurve)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SumCurve
        path: ''
        startLine: 1349
      syntax:
        content:
          CSharp: public static AnimationCurve SumCurve(AnimationCurve firstCurve, AnimationCurve secondCurve)
          VB: Public Shared Function SumCurve(firstCurve As AnimationCurve, secondCurve As AnimationCurve) As AnimationCurve
        parameters:
        - id: firstCurve
          type: Global.AnimationCurve
        - id: secondCurve
          type: Global.AnimationCurve
        return:
          type: Global.AnimationCurve
      overload: Global.MathHelper.SumCurve*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.MathHelper.SumCurve2(AnimationCurve,AnimationCurve)
      commentId: M:Global.MathHelper.SumCurve2(AnimationCurve,AnimationCurve)
      language: CSharp
      name:
        CSharp: SumCurve2(AnimationCurve, AnimationCurve)
        VB: SumCurve2(AnimationCurve, AnimationCurve)
      nameWithType:
        CSharp: MathHelper.SumCurve2(AnimationCurve, AnimationCurve)
        VB: MathHelper.SumCurve2(AnimationCurve, AnimationCurve)
      qualifiedName:
        CSharp: MathHelper.SumCurve2(AnimationCurve, AnimationCurve)
        VB: MathHelper.SumCurve2(AnimationCurve, AnimationCurve)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SumCurve2
        path: ''
        startLine: 1389
      syntax:
        content:
          CSharp: public static AnimationCurve SumCurve2(AnimationCurve firstCurve, AnimationCurve secondCurve)
          VB: Public Shared Function SumCurve2(firstCurve As AnimationCurve, secondCurve As AnimationCurve) As AnimationCurve
        parameters:
        - id: firstCurve
          type: Global.AnimationCurve
        - id: secondCurve
          type: Global.AnimationCurve
        return:
          type: Global.AnimationCurve
      overload: Global.MathHelper.SumCurve2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.MathHelper.SumCurve(AnimationCurve,AnimationCurve,System.Single,System.Single)
      commentId: M:Global.MathHelper.SumCurve(AnimationCurve,AnimationCurve,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: SumCurve(AnimationCurve, AnimationCurve, Single, Single)
        VB: SumCurve(AnimationCurve, AnimationCurve, Single, Single)
      nameWithType:
        CSharp: MathHelper.SumCurve(AnimationCurve, AnimationCurve, Single, Single)
        VB: MathHelper.SumCurve(AnimationCurve, AnimationCurve, Single, Single)
      qualifiedName:
        CSharp: MathHelper.SumCurve(AnimationCurve, AnimationCurve, System.Single, System.Single)
        VB: MathHelper.SumCurve(AnimationCurve, AnimationCurve, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SumCurve
        path: ''
        startLine: 1431
      syntax:
        content:
          CSharp: public static AnimationCurve SumCurve(AnimationCurve firstCurve, AnimationCurve secondCurve, float firstPressureLost = 0F, float secondPressureLost = 0F)
          VB: Public Shared Function SumCurve(firstCurve As AnimationCurve, secondCurve As AnimationCurve, firstPressureLost As Single = 0F, secondPressureLost As Single = 0F) As AnimationCurve
        parameters:
        - id: firstCurve
          type: Global.AnimationCurve
        - id: secondCurve
          type: Global.AnimationCurve
        - id: firstPressureLost
          type: System.Single
        - id: secondPressureLost
          type: System.Single
        return:
          type: Global.AnimationCurve
      overload: Global.MathHelper.SumCurve*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Global.PlayerMovement
    commentId: T:Global.PlayerMovement
    language: CSharp
    name:
      CSharp: PlayerMovement
      VB: PlayerMovement
    nameWithType:
      CSharp: PlayerMovement
      VB: PlayerMovement
    qualifiedName:
      CSharp: PlayerMovement
      VB: PlayerMovement
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerMovement
      path: ''
      startLine: 1478
    syntax:
      content:
        CSharp: 'public class PlayerMovement : MonoBehaviour'
        VB: >-
          Public Class PlayerMovement

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.PlayerMovement.controller
      commentId: F:Global.PlayerMovement.controller
      language: CSharp
      name:
        CSharp: controller
        VB: controller
      nameWithType:
        CSharp: PlayerMovement.controller
        VB: PlayerMovement.controller
      qualifiedName:
        CSharp: PlayerMovement.controller
        VB: PlayerMovement.controller
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: controller
        path: ''
        startLine: 1481
      syntax:
        content:
          CSharp: public CharacterController controller
          VB: Public controller As CharacterController
        return:
          type: Global.CharacterController
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.PlayerMovement.speed
      commentId: F:Global.PlayerMovement.speed
      language: CSharp
      name:
        CSharp: speed
        VB: speed
      nameWithType:
        CSharp: PlayerMovement.speed
        VB: PlayerMovement.speed
      qualifiedName:
        CSharp: PlayerMovement.speed
        VB: PlayerMovement.speed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: speed
        path: ''
        startLine: 1483
      syntax:
        content:
          CSharp: public float speed
          VB: Public speed As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.PlayerMovement.gravity
      commentId: F:Global.PlayerMovement.gravity
      language: CSharp
      name:
        CSharp: gravity
        VB: gravity
      nameWithType:
        CSharp: PlayerMovement.gravity
        VB: PlayerMovement.gravity
      qualifiedName:
        CSharp: PlayerMovement.gravity
        VB: PlayerMovement.gravity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: gravity
        path: ''
        startLine: 1484
      syntax:
        content:
          CSharp: public float gravity
          VB: Public gravity As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.PlayerMovement.jumpHeight
      commentId: F:Global.PlayerMovement.jumpHeight
      language: CSharp
      name:
        CSharp: jumpHeight
        VB: jumpHeight
      nameWithType:
        CSharp: PlayerMovement.jumpHeight
        VB: PlayerMovement.jumpHeight
      qualifiedName:
        CSharp: PlayerMovement.jumpHeight
        VB: PlayerMovement.jumpHeight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: jumpHeight
        path: ''
        startLine: 1485
      syntax:
        content:
          CSharp: public float jumpHeight
          VB: Public jumpHeight As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.PlayerMovement.groundCheck
      commentId: F:Global.PlayerMovement.groundCheck
      language: CSharp
      name:
        CSharp: groundCheck
        VB: groundCheck
      nameWithType:
        CSharp: PlayerMovement.groundCheck
        VB: PlayerMovement.groundCheck
      qualifiedName:
        CSharp: PlayerMovement.groundCheck
        VB: PlayerMovement.groundCheck
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: groundCheck
        path: ''
        startLine: 1487
      syntax:
        content:
          CSharp: public Transform groundCheck
          VB: Public groundCheck As Transform
        return:
          type: Global.Transform
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.PlayerMovement.groundDistance
      commentId: F:Global.PlayerMovement.groundDistance
      language: CSharp
      name:
        CSharp: groundDistance
        VB: groundDistance
      nameWithType:
        CSharp: PlayerMovement.groundDistance
        VB: PlayerMovement.groundDistance
      qualifiedName:
        CSharp: PlayerMovement.groundDistance
        VB: PlayerMovement.groundDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: groundDistance
        path: ''
        startLine: 1488
      syntax:
        content:
          CSharp: public float groundDistance
          VB: Public groundDistance As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.PlayerMovement.groundMask
      commentId: F:Global.PlayerMovement.groundMask
      language: CSharp
      name:
        CSharp: groundMask
        VB: groundMask
      nameWithType:
        CSharp: PlayerMovement.groundMask
        VB: PlayerMovement.groundMask
      qualifiedName:
        CSharp: PlayerMovement.groundMask
        VB: PlayerMovement.groundMask
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: groundMask
        path: ''
        startLine: 1489
      syntax:
        content:
          CSharp: public LayerMask groundMask
          VB: Public groundMask As LayerMask
        return:
          type: Global.LayerMask
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.TextDM
    commentId: T:Global.TextDM
    language: CSharp
    name:
      CSharp: TextDM
      VB: TextDM
    nameWithType:
      CSharp: TextDM
      VB: TextDM
    qualifiedName:
      CSharp: TextDM
      VB: TextDM
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: TextDM
      path: ''
      startLine: 1831
    syntax:
      content:
        CSharp: 'public class TextDM : GenericDM'
        VB: >-
          Public Class TextDM

              Inherits GenericDM
    inheritance:
    - System.Object
    - Global.GenericDM
    inheritedMembers:
    - Global.GenericDM.device
    - Global.GenericDM.Start
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.TextDM.text
      commentId: F:Global.TextDM.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: TextDM.text
        VB: TextDM.text
      qualifiedName:
        CSharp: TextDM.text
        VB: TextDM.text
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: text
        path: ''
        startLine: 1833
      syntax:
        content:
          CSharp: public Text text
          VB: Public text As Text
        return:
          type: Global.Text
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.TextDM.DoDM(DeviceData)
      commentId: M:Global.TextDM.DoDM(DeviceData)
      language: CSharp
      name:
        CSharp: DoDM(DeviceData)
        VB: DoDM(DeviceData)
      nameWithType:
        CSharp: TextDM.DoDM(DeviceData)
        VB: TextDM.DoDM(DeviceData)
      qualifiedName:
        CSharp: TextDM.DoDM(DeviceData)
        VB: TextDM.DoDM(DeviceData)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DoDM
        path: ''
        startLine: 1841
      syntax:
        content:
          CSharp: public override void DoDM(DeviceData lastDeviceData)
          VB: Public Overrides Sub DoDM(lastDeviceData As DeviceData)
        parameters:
        - id: lastDeviceData
          type: Global.DeviceData
      overload: Global.TextDM.DoDM*
      overridden: Global.GenericDM.DoDM(DeviceData)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.ValveLog
    commentId: T:Global.ValveLog
    language: CSharp
    name:
      CSharp: ValveLog
      VB: ValveLog
    nameWithType:
      CSharp: ValveLog
      VB: ValveLog
    qualifiedName:
      CSharp: ValveLog
      VB: ValveLog
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ValveLog
      path: ''
      startLine: 1880
    syntax:
      content:
        CSharp: 'public class ValveLog : MonoBehaviour'
        VB: >-
          Public Class ValveLog

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.FlyCamera
    commentId: T:Global.FlyCamera
    language: CSharp
    name:
      CSharp: FlyCamera
      VB: FlyCamera
    nameWithType:
      CSharp: FlyCamera
      VB: FlyCamera
    qualifiedName:
      CSharp: FlyCamera
      VB: FlyCamera
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FlyCamera
      path: ''
      startLine: 1994
    summary: "\nFlyCamera\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FlyCamera : MonoBehaviour'
        VB: >-
          Public Class FlyCamera

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.FlyCamera.slowFactor
      commentId: F:Global.FlyCamera.slowFactor
      language: CSharp
      name:
        CSharp: slowFactor
        VB: slowFactor
      nameWithType:
        CSharp: FlyCamera.slowFactor
        VB: FlyCamera.slowFactor
      qualifiedName:
        CSharp: FlyCamera.slowFactor
        VB: FlyCamera.slowFactor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: slowFactor
        path: ''
        startLine: 2018
      summary: "\nslowFactor\n"
      example: []
      syntax:
        content:
          CSharp: public float slowFactor
          VB: Public slowFactor As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.FlyCamera.fastFactor
      commentId: F:Global.FlyCamera.fastFactor
      language: CSharp
      name:
        CSharp: fastFactor
        VB: fastFactor
      nameWithType:
        CSharp: FlyCamera.fastFactor
        VB: FlyCamera.fastFactor
      qualifiedName:
        CSharp: FlyCamera.fastFactor
        VB: FlyCamera.fastFactor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: fastFactor
        path: ''
        startLine: 2023
      summary: "\nfastFactor\n"
      example: []
      syntax:
        content:
          CSharp: public float fastFactor
          VB: Public fastFactor As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.MouseControl
    commentId: T:Global.MouseControl
    language: CSharp
    name:
      CSharp: MouseControl
      VB: MouseControl
    nameWithType:
      CSharp: MouseControl
      VB: MouseControl
    qualifiedName:
      CSharp: MouseControl
      VB: MouseControl
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MouseControl
      path: ''
      startLine: 2123
    summary: "\nMouseControl\n"
    example: []
    syntax:
      content:
        CSharp: 'public class MouseControl : MonoBehaviour'
        VB: >-
          Public Class MouseControl

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.DeviceData
    commentId: T:Global.DeviceData
    language: CSharp
    name:
      CSharp: DeviceData
      VB: DeviceData
    nameWithType:
      CSharp: DeviceData
      VB: DeviceData
    qualifiedName:
      CSharp: DeviceData
      VB: DeviceData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: DeviceData
      path: ''
      startLine: 2328
    summary: "\nBase class for data. Device Data\n"
    example: []
    syntax:
      content:
        CSharp: public class DeviceData
        VB: Public Class DeviceData
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.DeviceData.Id
      commentId: P:Global.DeviceData.Id
      language: CSharp
      name:
        CSharp: Id
        VB: Id
      nameWithType:
        CSharp: DeviceData.Id
        VB: DeviceData.Id
      qualifiedName:
        CSharp: DeviceData.Id
        VB: DeviceData.Id
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Id
        path: ''
        startLine: 2342
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public float Id { get; set; }
          VB: Public Property Id As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.DeviceData.Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.DeviceData.TimeStamp
      commentId: P:Global.DeviceData.TimeStamp
      language: CSharp
      name:
        CSharp: TimeStamp
        VB: TimeStamp
      nameWithType:
        CSharp: DeviceData.TimeStamp
        VB: DeviceData.TimeStamp
      qualifiedName:
        CSharp: DeviceData.TimeStamp
        VB: DeviceData.TimeStamp
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TimeStamp
        path: ''
        startLine: 2363
      summary: "\nTimeStamp (Set/Get)\n"
      example: []
      syntax:
        content:
          CSharp: public float TimeStamp { get; set; }
          VB: Public Property TimeStamp As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.DeviceData.TimeStamp*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.DeviceData.#ctor
      commentId: M:Global.DeviceData.#ctor
      language: CSharp
      name:
        CSharp: DeviceData()
        VB: DeviceData()
      nameWithType:
        CSharp: DeviceData.DeviceData()
        VB: DeviceData.DeviceData()
      qualifiedName:
        CSharp: DeviceData.DeviceData()
        VB: DeviceData.DeviceData()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 2392
      summary: "\nDefault Constructor for DeviceData. Initialize Class members\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData()
          VB: Public Sub New
      overload: Global.DeviceData.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.DeviceParamType
    commentId: T:Global.DeviceParamType
    language: CSharp
    name:
      CSharp: DeviceParamType
      VB: DeviceParamType
    nameWithType:
      CSharp: DeviceParamType
      VB: DeviceParamType
    qualifiedName:
      CSharp: DeviceParamType
      VB: DeviceParamType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: DeviceParamType
      path: ''
      startLine: 2408
    syntax:
      content:
        CSharp: public enum DeviceParamType
        VB: Public Enum DeviceParamType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Global.DeviceParamType.ENone
      commentId: F:Global.DeviceParamType.ENone
      language: CSharp
      name:
        CSharp: ENone
        VB: ENone
      nameWithType:
        CSharp: DeviceParamType.ENone
        VB: DeviceParamType.ENone
      qualifiedName:
        CSharp: DeviceParamType.ENone
        VB: DeviceParamType.ENone
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ENone
        path: ''
        startLine: 2409
      syntax:
        content:
          CSharp: ENone = 0
          VB: ENone = 0
        return:
          type: Global.DeviceParamType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.DeviceParamType.EFloat
      commentId: F:Global.DeviceParamType.EFloat
      language: CSharp
      name:
        CSharp: EFloat
        VB: EFloat
      nameWithType:
        CSharp: DeviceParamType.EFloat
        VB: DeviceParamType.EFloat
      qualifiedName:
        CSharp: DeviceParamType.EFloat
        VB: DeviceParamType.EFloat
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EFloat
        path: ''
        startLine: 2410
      syntax:
        content:
          CSharp: EFloat = 1
          VB: EFloat = 1
        return:
          type: Global.DeviceParamType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Global.DeviceParam
    commentId: T:Global.DeviceParam
    language: CSharp
    name:
      CSharp: DeviceParam
      VB: DeviceParam
    nameWithType:
      CSharp: DeviceParam
      VB: DeviceParam
    qualifiedName:
      CSharp: DeviceParam
      VB: DeviceParam
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: DeviceParam
      path: ''
      startLine: 2412
    syntax:
      content:
        CSharp: public struct DeviceParam
        VB: Public Structure DeviceParam
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Global.DeviceParam.paramType
      commentId: F:Global.DeviceParam.paramType
      language: CSharp
      name:
        CSharp: paramType
        VB: paramType
      nameWithType:
        CSharp: DeviceParam.paramType
        VB: DeviceParam.paramType
      qualifiedName:
        CSharp: DeviceParam.paramType
        VB: DeviceParam.paramType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: paramType
        path: ''
        startLine: 2413
      syntax:
        content:
          CSharp: public DeviceParamType paramType
          VB: Public paramType As DeviceParamType
        return:
          type: Global.DeviceParamType
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.DeviceParam.name
      commentId: F:Global.DeviceParam.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: DeviceParam.name
        VB: DeviceParam.name
      qualifiedName:
        CSharp: DeviceParam.name
        VB: DeviceParam.name
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: name
        path: ''
        startLine: 2414
      syntax:
        content:
          CSharp: public string name
          VB: Public name As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.DeviceParam.min
      commentId: F:Global.DeviceParam.min
      language: CSharp
      name:
        CSharp: min
        VB: min
      nameWithType:
        CSharp: DeviceParam.min
        VB: DeviceParam.min
      qualifiedName:
        CSharp: DeviceParam.min
        VB: DeviceParam.min
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: min
        path: ''
        startLine: 2415
      syntax:
        content:
          CSharp: public object min
          VB: Public min As Object
        return:
          type: System.Object
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.DeviceParam.max
      commentId: F:Global.DeviceParam.max
      language: CSharp
      name:
        CSharp: max
        VB: max
      nameWithType:
        CSharp: DeviceParam.max
        VB: DeviceParam.max
      qualifiedName:
        CSharp: DeviceParam.max
        VB: DeviceParam.max
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: max
        path: ''
        startLine: 2416
      syntax:
        content:
          CSharp: public object max
          VB: Public max As Object
        return:
          type: System.Object
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.DeviceParam.value
      commentId: F:Global.DeviceParam.value
      language: CSharp
      name:
        CSharp: value
        VB: value
      nameWithType:
        CSharp: DeviceParam.value
        VB: DeviceParam.value
      qualifiedName:
        CSharp: DeviceParam.value
        VB: DeviceParam.value
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: value
        path: ''
        startLine: 2417
      syntax:
        content:
          CSharp: public object value
          VB: Public value As Object
        return:
          type: System.Object
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.DeviceParam.target
      commentId: F:Global.DeviceParam.target
      language: CSharp
      name:
        CSharp: target
        VB: target
      nameWithType:
        CSharp: DeviceParam.target
        VB: DeviceParam.target
      qualifiedName:
        CSharp: DeviceParam.target
        VB: DeviceParam.target
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: target
        path: ''
        startLine: 2418
      syntax:
        content:
          CSharp: public object target
          VB: Public target As Object
        return:
          type: System.Object
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.FluidData
    commentId: T:Global.FluidData
    language: CSharp
    name:
      CSharp: FluidData
      VB: FluidData
    nameWithType:
      CSharp: FluidData
      VB: FluidData
    qualifiedName:
      CSharp: FluidData
      VB: FluidData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FluidData
      path: ''
      startLine: 2457
    summary: "\nDeviceData\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FluidData : DeviceData'
        VB: >-
          Public Class FluidData

              Inherits DeviceData
    inheritance:
    - System.Object
    - Global.DeviceData
    inheritedMembers:
    - Global.DeviceData.Id
    - Global.DeviceData.TimeStamp
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.FluidData.Temperature
      commentId: P:Global.FluidData.Temperature
      language: CSharp
      name:
        CSharp: Temperature
        VB: Temperature
      nameWithType:
        CSharp: FluidData.Temperature
        VB: FluidData.Temperature
      qualifiedName:
        CSharp: FluidData.Temperature
        VB: FluidData.Temperature
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Temperature
        path: ''
        startLine: 2464
      syntax:
        content:
          CSharp: public float Temperature { get; set; }
          VB: Public Property Temperature As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.FluidData.Temperature*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FluidData.Mass
      commentId: P:Global.FluidData.Mass
      language: CSharp
      name:
        CSharp: Mass
        VB: Mass
      nameWithType:
        CSharp: FluidData.Mass
        VB: FluidData.Mass
      qualifiedName:
        CSharp: FluidData.Mass
        VB: FluidData.Mass
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Mass
        path: ''
        startLine: 2481
      syntax:
        content:
          CSharp: public float Mass { get; set; }
          VB: Public Property Mass As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.FluidData.Mass*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FluidData.FlowRate
      commentId: P:Global.FluidData.FlowRate
      language: CSharp
      name:
        CSharp: FlowRate
        VB: FlowRate
      nameWithType:
        CSharp: FluidData.FlowRate
        VB: FluidData.FlowRate
      qualifiedName:
        CSharp: FluidData.FlowRate
        VB: FluidData.FlowRate
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlowRate
        path: ''
        startLine: 2496
      syntax:
        content:
          CSharp: public float FlowRate { get; set; }
          VB: Public Property FlowRate As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.FluidData.FlowRate*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FluidData.Q
      commentId: P:Global.FluidData.Q
      language: CSharp
      name:
        CSharp: Q
        VB: Q
      nameWithType:
        CSharp: FluidData.Q
        VB: FluidData.Q
      qualifiedName:
        CSharp: FluidData.Q
        VB: FluidData.Q
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Q
        path: ''
        startLine: 2513
      syntax:
        content:
          CSharp: public float Q { get; set; }
          VB: Public Property Q As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.FluidData.Q*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FluidData.MaxCubicMeterPerHour
      commentId: P:Global.FluidData.MaxCubicMeterPerHour
      language: CSharp
      name:
        CSharp: MaxCubicMeterPerHour
        VB: MaxCubicMeterPerHour
      nameWithType:
        CSharp: FluidData.MaxCubicMeterPerHour
        VB: FluidData.MaxCubicMeterPerHour
      qualifiedName:
        CSharp: FluidData.MaxCubicMeterPerHour
        VB: FluidData.MaxCubicMeterPerHour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MaxCubicMeterPerHour
        path: ''
        startLine: 2527
      syntax:
        content:
          CSharp: public float MaxCubicMeterPerHour { get; set; }
          VB: Public Property MaxCubicMeterPerHour As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.FluidData.MaxCubicMeterPerHour*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FluidData.PressureLoss
      commentId: P:Global.FluidData.PressureLoss
      language: CSharp
      name:
        CSharp: PressureLoss
        VB: PressureLoss
      nameWithType:
        CSharp: FluidData.PressureLoss
        VB: FluidData.PressureLoss
      qualifiedName:
        CSharp: FluidData.PressureLoss
        VB: FluidData.PressureLoss
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PressureLoss
        path: ''
        startLine: 2541
      syntax:
        content:
          CSharp: public float PressureLoss { get; set; }
          VB: Public Property PressureLoss As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.FluidData.PressureLoss*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FluidData.CircuitID
      commentId: P:Global.FluidData.CircuitID
      language: CSharp
      name:
        CSharp: CircuitID
        VB: CircuitID
      nameWithType:
        CSharp: FluidData.CircuitID
        VB: FluidData.CircuitID
      qualifiedName:
        CSharp: FluidData.CircuitID
        VB: FluidData.CircuitID
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CircuitID
        path: ''
        startLine: 2556
      syntax:
        content:
          CSharp: public int CircuitID { get; set; }
          VB: Public Property CircuitID As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.FluidData.CircuitID*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FluidData.FlowID
      commentId: P:Global.FluidData.FlowID
      language: CSharp
      name:
        CSharp: FlowID
        VB: FlowID
      nameWithType:
        CSharp: FluidData.FlowID
        VB: FluidData.FlowID
      qualifiedName:
        CSharp: FluidData.FlowID
        VB: FluidData.FlowID
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlowID
        path: ''
        startLine: 2572
      syntax:
        content:
          CSharp: public int FlowID { get; set; }
          VB: Public Property FlowID As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.FluidData.FlowID*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FluidData.#ctor(FluidData)
      commentId: M:Global.FluidData.#ctor(FluidData)
      language: CSharp
      name:
        CSharp: FluidData(FluidData)
        VB: FluidData(FluidData)
      nameWithType:
        CSharp: FluidData.FluidData(FluidData)
        VB: FluidData.FluidData(FluidData)
      qualifiedName:
        CSharp: FluidData.FluidData(FluidData)
        VB: FluidData.FluidData(FluidData)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 2582
      syntax:
        content:
          CSharp: public FluidData(FluidData fluidData)
          VB: Public Sub New(fluidData As FluidData)
        parameters:
        - id: fluidData
          type: Global.FluidData
      overload: Global.FluidData.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.FluidData.#ctor
      commentId: M:Global.FluidData.#ctor
      language: CSharp
      name:
        CSharp: FluidData()
        VB: FluidData()
      nameWithType:
        CSharp: FluidData.FluidData()
        VB: FluidData.FluidData()
      qualifiedName:
        CSharp: FluidData.FluidData()
        VB: FluidData.FluidData()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 2593
      syntax:
        content:
          CSharp: public FluidData()
          VB: Public Sub New
      overload: Global.FluidData.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.HeaterBoilerData
    commentId: T:Global.HeaterBoilerData
    language: CSharp
    name:
      CSharp: HeaterBoilerData
      VB: HeaterBoilerData
    nameWithType:
      CSharp: HeaterBoilerData
      VB: HeaterBoilerData
    qualifiedName:
      CSharp: HeaterBoilerData
      VB: HeaterBoilerData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HeaterBoilerData
      path: ''
      startLine: 2642
    summary: "\nWaterSourceData\n"
    example: []
    syntax:
      content:
        CSharp: 'public class HeaterBoilerData : DeviceData'
        VB: >-
          Public Class HeaterBoilerData

              Inherits DeviceData
    inheritance:
    - System.Object
    - Global.DeviceData
    inheritedMembers:
    - Global.DeviceData.Id
    - Global.DeviceData.TimeStamp
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.WaterPipeData
    commentId: T:Global.WaterPipeData
    language: CSharp
    name:
      CSharp: WaterPipeData
      VB: WaterPipeData
    nameWithType:
      CSharp: WaterPipeData
      VB: WaterPipeData
    qualifiedName:
      CSharp: WaterPipeData
      VB: WaterPipeData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: WaterPipeData
      path: ''
      startLine: 2682
    summary: "\nWaterSourceData\n"
    example: []
    syntax:
      content:
        CSharp: 'public class WaterPipeData : WaterSourceData'
        VB: >-
          Public Class WaterPipeData

              Inherits WaterSourceData
    inheritance:
    - System.Object
    - Global.DeviceData
    - Global.WaterSourceData
    inheritedMembers:
    - Global.WaterSourceData.temperature
    - Global.WaterSourceData.literPerMinute
    - Global.WaterSourceData.bar
    - Global.WaterSourceData.diameter
    - Global.WaterSourceData.Temperature
    - Global.WaterSourceData.LiterPerMinute
    - Global.WaterSourceData.Diameter
    - Global.DeviceData.Id
    - Global.DeviceData.TimeStamp
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.WaterPipeData.flowRate
      commentId: F:Global.WaterPipeData.flowRate
      language: CSharp
      name:
        CSharp: flowRate
        VB: flowRate
      nameWithType:
        CSharp: WaterPipeData.flowRate
        VB: WaterPipeData.flowRate
      qualifiedName:
        CSharp: WaterPipeData.flowRate
        VB: WaterPipeData.flowRate
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: flowRate
        path: ''
        startLine: 2687
      summary: "\nflowRate\n"
      example: []
      syntax:
        content:
          CSharp: public float flowRate
          VB: Public flowRate As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.WaterSourceData
    commentId: T:Global.WaterSourceData
    language: CSharp
    name:
      CSharp: WaterSourceData
      VB: WaterSourceData
    nameWithType:
      CSharp: WaterSourceData
      VB: WaterSourceData
    qualifiedName:
      CSharp: WaterSourceData
      VB: WaterSourceData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: WaterSourceData
      path: ''
      startLine: 2727
    summary: "\nWaterSourceData\n"
    example: []
    syntax:
      content:
        CSharp: 'public class WaterSourceData : DeviceData'
        VB: >-
          Public Class WaterSourceData

              Inherits DeviceData
    inheritance:
    - System.Object
    - Global.DeviceData
    inheritedMembers:
    - Global.DeviceData.Id
    - Global.DeviceData.TimeStamp
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.WaterSourceData.temperature
      commentId: F:Global.WaterSourceData.temperature
      language: CSharp
      name:
        CSharp: temperature
        VB: temperature
      nameWithType:
        CSharp: WaterSourceData.temperature
        VB: WaterSourceData.temperature
      qualifiedName:
        CSharp: WaterSourceData.temperature
        VB: WaterSourceData.temperature
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: temperature
        path: ''
        startLine: 2730
      syntax:
        content:
          CSharp: public float temperature
          VB: Public temperature As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WaterSourceData.literPerMinute
      commentId: F:Global.WaterSourceData.literPerMinute
      language: CSharp
      name:
        CSharp: literPerMinute
        VB: literPerMinute
      nameWithType:
        CSharp: WaterSourceData.literPerMinute
        VB: WaterSourceData.literPerMinute
      qualifiedName:
        CSharp: WaterSourceData.literPerMinute
        VB: WaterSourceData.literPerMinute
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: literPerMinute
        path: ''
        startLine: 2731
      syntax:
        content:
          CSharp: public float literPerMinute
          VB: Public literPerMinute As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WaterSourceData.bar
      commentId: F:Global.WaterSourceData.bar
      language: CSharp
      name:
        CSharp: bar
        VB: bar
      nameWithType:
        CSharp: WaterSourceData.bar
        VB: WaterSourceData.bar
      qualifiedName:
        CSharp: WaterSourceData.bar
        VB: WaterSourceData.bar
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bar
        path: ''
        startLine: 2732
      syntax:
        content:
          CSharp: public float bar
          VB: Public bar As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WaterSourceData.diameter
      commentId: F:Global.WaterSourceData.diameter
      language: CSharp
      name:
        CSharp: diameter
        VB: diameter
      nameWithType:
        CSharp: WaterSourceData.diameter
        VB: WaterSourceData.diameter
      qualifiedName:
        CSharp: WaterSourceData.diameter
        VB: WaterSourceData.diameter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: diameter
        path: ''
        startLine: 2733
      syntax:
        content:
          CSharp: public float diameter
          VB: Public diameter As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WaterSourceData.Temperature
      commentId: P:Global.WaterSourceData.Temperature
      language: CSharp
      name:
        CSharp: Temperature
        VB: Temperature
      nameWithType:
        CSharp: WaterSourceData.Temperature
        VB: WaterSourceData.Temperature
      qualifiedName:
        CSharp: WaterSourceData.Temperature
        VB: WaterSourceData.Temperature
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Temperature
        path: ''
        startLine: 2742
      summary: "\nTemperature\n"
      example: []
      syntax:
        content:
          CSharp: public float Temperature { get; }
          VB: Public ReadOnly Property Temperature As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.WaterSourceData.Temperature*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.WaterSourceData.LiterPerMinute
      commentId: P:Global.WaterSourceData.LiterPerMinute
      language: CSharp
      name:
        CSharp: LiterPerMinute
        VB: LiterPerMinute
      nameWithType:
        CSharp: WaterSourceData.LiterPerMinute
        VB: WaterSourceData.LiterPerMinute
      qualifiedName:
        CSharp: WaterSourceData.LiterPerMinute
        VB: WaterSourceData.LiterPerMinute
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LiterPerMinute
        path: ''
        startLine: 2751
      summary: "\nLiterPerSecond\n"
      example: []
      syntax:
        content:
          CSharp: public float LiterPerMinute { get; }
          VB: Public ReadOnly Property LiterPerMinute As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.WaterSourceData.LiterPerMinute*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.WaterSourceData.Diameter
      commentId: P:Global.WaterSourceData.Diameter
      language: CSharp
      name:
        CSharp: Diameter
        VB: Diameter
      nameWithType:
        CSharp: WaterSourceData.Diameter
        VB: WaterSourceData.Diameter
      qualifiedName:
        CSharp: WaterSourceData.Diameter
        VB: WaterSourceData.Diameter
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Diameter
        path: ''
        startLine: 2757
      syntax:
        content:
          CSharp: public float Diameter { get; }
          VB: Public ReadOnly Property Diameter As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.WaterSourceData.Diameter*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Global.Singleton`1
    commentId: T:Global.Singleton`1
    language: CSharp
    name:
      CSharp: Singleton<T>
      VB: Singleton(Of T)
    nameWithType:
      CSharp: Singleton<T>
      VB: Singleton(Of T)
    qualifiedName:
      CSharp: Singleton<T>
      VB: Singleton(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Singleton
      path: ''
      startLine: 2796
    summary: "\nBe aware this will not prevent a non singleton constructor\nsuch as `T myT = new T();`\nTo prevent that, add `protected T () {}` to your singleton class.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Singleton<T> : MonoBehaviour where T : MonoBehaviour'
        VB: >-
          Public Class Singleton(Of T As MonoBehaviour)

              Inherits MonoBehaviour
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.Singleton`1.Instance
      commentId: P:Global.Singleton`1.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: Singleton<T>.Instance
        VB: Singleton(Of T).Instance
      qualifiedName:
        CSharp: Singleton<T>.Instance
        VB: Singleton(Of T).Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 2802
      syntax:
        content:
          CSharp: public static T Instance { get; }
          VB: Public Shared ReadOnly Property Instance As T
        parameters: []
        return:
          type: '{T}'
      overload: Global.Singleton`1.Instance*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Global.Singleton`1.OnDestroy
      commentId: M:Global.Singleton`1.OnDestroy
      language: CSharp
      name:
        CSharp: OnDestroy()
        VB: OnDestroy()
      nameWithType:
        CSharp: Singleton<T>.OnDestroy()
        VB: Singleton(Of T).OnDestroy()
      qualifiedName:
        CSharp: Singleton<T>.OnDestroy()
        VB: Singleton(Of T).OnDestroy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnDestroy
        path: ''
        startLine: 2872
      summary: "\nWhen Unity quits, it destroys objects in a random order.\nIn principle, a Singleton is only destroyed when application quits.\nIf any script calls Instance after it have been destroyed, \nit will create a buggy ghost object that will stay on the Editor scene\neven after stopping playing the Application. Really bad!\nSo, this was made to be sure we&apos;re not creating that buggy ghost object.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnDestroy()
          VB: Public Sub OnDestroy
      overload: Global.Singleton`1.OnDestroy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.GenericConsumer
    commentId: T:Global.GenericConsumer
    language: CSharp
    name:
      CSharp: GenericConsumer
      VB: GenericConsumer
    nameWithType:
      CSharp: GenericConsumer
      VB: GenericConsumer
    qualifiedName:
      CSharp: GenericConsumer
      VB: GenericConsumer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericConsumer
      path: ''
      startLine: 2917
    summary: "\nGenericConsumer\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericConsumer : GenericDevice, IDevice'
        VB: >-
          Public Class GenericConsumer

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.OnAwake
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetDeviceData
    - Global.GenericDevice.GetParams
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.RunSimulation
    - Global.GenericDevice.PreSimulation
    - Global.GenericDevice.GetParellel
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.GenericDevice
    commentId: T:Global.GenericDevice
    language: CSharp
    name:
      CSharp: GenericDevice
      VB: GenericDevice
    nameWithType:
      CSharp: GenericDevice
      VB: GenericDevice
    qualifiedName:
      CSharp: GenericDevice
      VB: GenericDevice
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericDevice
      path: ''
      startLine: 2957
    summary: "\nGenericDevice\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericDevice : MonoBehaviour, IDevice'
        VB: >-
          Public Class GenericDevice

              Inherits MonoBehaviour

              Implements IDevice
    inheritance:
    - System.Object
    implements:
    - Global.IDevice
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericDevice.deviceData
      commentId: F:Global.GenericDevice.deviceData
      language: CSharp
      name:
        CSharp: deviceData
        VB: deviceData
      nameWithType:
        CSharp: GenericDevice.deviceData
        VB: GenericDevice.deviceData
      qualifiedName:
        CSharp: GenericDevice.deviceData
        VB: GenericDevice.deviceData
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: deviceData
        path: ''
        startLine: 2967
      summary: "\ndeviceData\n"
      example: []
      syntax:
        content:
          CSharp: protected GenericDeviceData deviceData
          VB: Protected deviceData As GenericDeviceData
        return:
          type: Global.GenericDeviceData
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.GenericDevice.DeviceData
      commentId: P:Global.GenericDevice.DeviceData
      language: CSharp
      name:
        CSharp: DeviceData
        VB: DeviceData
      nameWithType:
        CSharp: GenericDevice.DeviceData
        VB: GenericDevice.DeviceData
      qualifiedName:
        CSharp: GenericDevice.DeviceData
        VB: GenericDevice.DeviceData
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeviceData
        path: ''
        startLine: 2969
      syntax:
        content:
          CSharp: public GenericDeviceData DeviceData { get; }
          VB: Public ReadOnly Property DeviceData As GenericDeviceData
        parameters: []
        return:
          type: Global.GenericDeviceData
      overload: Global.GenericDevice.DeviceData*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.GenericDevice.pressureLoss
      commentId: F:Global.GenericDevice.pressureLoss
      language: CSharp
      name:
        CSharp: pressureLoss
        VB: pressureLoss
      nameWithType:
        CSharp: GenericDevice.pressureLoss
        VB: GenericDevice.pressureLoss
      qualifiedName:
        CSharp: GenericDevice.pressureLoss
        VB: GenericDevice.pressureLoss
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: pressureLoss
        path: ''
        startLine: 2984
      summary: "\nPressure Loss (kPa)\n"
      example: []
      syntax:
        content:
          CSharp: protected float pressureLoss
          VB: Protected pressureLoss As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.GenericDevice.currentQ
      commentId: F:Global.GenericDevice.currentQ
      language: CSharp
      name:
        CSharp: currentQ
        VB: currentQ
      nameWithType:
        CSharp: GenericDevice.currentQ
        VB: GenericDevice.currentQ
      qualifiedName:
        CSharp: GenericDevice.currentQ
        VB: GenericDevice.currentQ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: currentQ
        path: ''
        startLine: 2990
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: protected float currentQ
          VB: Protected currentQ As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.GenericDevice.simulationStartPoint
      commentId: F:Global.GenericDevice.simulationStartPoint
      language: CSharp
      name:
        CSharp: simulationStartPoint
        VB: simulationStartPoint
      nameWithType:
        CSharp: GenericDevice.simulationStartPoint
        VB: GenericDevice.simulationStartPoint
      qualifiedName:
        CSharp: GenericDevice.simulationStartPoint
        VB: GenericDevice.simulationStartPoint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: simulationStartPoint
        path: ''
        startLine: 2995
      summary: "\nsimulationStartPoint\n"
      example: []
      syntax:
        content:
          CSharp: public bool simulationStartPoint
          VB: Public simulationStartPoint As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDevice.listOfSlotIn
      commentId: F:Global.GenericDevice.listOfSlotIn
      language: CSharp
      name:
        CSharp: listOfSlotIn
        VB: listOfSlotIn
      nameWithType:
        CSharp: GenericDevice.listOfSlotIn
        VB: GenericDevice.listOfSlotIn
      qualifiedName:
        CSharp: GenericDevice.listOfSlotIn
        VB: GenericDevice.listOfSlotIn
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: listOfSlotIn
        path: ''
        startLine: 3005
      summary: "\nlistOfSlot\n"
      example: []
      syntax:
        content:
          CSharp: protected SlotIn[] listOfSlotIn
          VB: Protected listOfSlotIn As SlotIn()
        return:
          type: Global.SlotIn[]
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.GenericDevice.instanceID
      commentId: F:Global.GenericDevice.instanceID
      language: CSharp
      name:
        CSharp: instanceID
        VB: instanceID
      nameWithType:
        CSharp: GenericDevice.instanceID
        VB: GenericDevice.instanceID
      qualifiedName:
        CSharp: GenericDevice.instanceID
        VB: GenericDevice.instanceID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: instanceID
        path: ''
        startLine: 3016
      summary: "\ninstanceID\n"
      example: []
      syntax:
        content:
          CSharp: protected int instanceID
          VB: Protected instanceID As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.GenericDevice.OnAwake
      commentId: M:Global.GenericDevice.OnAwake
      language: CSharp
      name:
        CSharp: OnAwake()
        VB: OnAwake()
      nameWithType:
        CSharp: GenericDevice.OnAwake()
        VB: GenericDevice.OnAwake()
      qualifiedName:
        CSharp: GenericDevice.OnAwake()
        VB: GenericDevice.OnAwake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnAwake
        path: ''
        startLine: 3025
      syntax:
        content:
          CSharp: protected virtual void OnAwake()
          VB: Protected Overridable Sub OnAwake
      overload: Global.GenericDevice.OnAwake*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
      commentId: M:Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
      language: CSharp
      name:
        CSharp: Send(DeviceData, Int32, SimulationState)
        VB: Send(DeviceData, Int32, SimulationState)
      nameWithType:
        CSharp: GenericDevice.Send(DeviceData, Int32, SimulationState)
        VB: GenericDevice.Send(DeviceData, Int32, SimulationState)
      qualifiedName:
        CSharp: GenericDevice.Send(DeviceData, System.Int32, SimulationState)
        VB: GenericDevice.Send(DeviceData, System.Int32, SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Send
        path: ''
        startLine: 3092
      summary: "\nSend\n\n"
      example: []
      syntax:
        content:
          CSharp: public void Send(DeviceData data, int slotId, SimulationState state)
          VB: Public Sub Send(data As DeviceData, slotId As Integer, state As SimulationState)
        parameters:
        - id: data
          type: Global.DeviceData
          description: ''
        - id: slotId
          type: System.Int32
          description: ''
        - id: state
          type: Global.SimulationState
          description: ''
      overload: Global.GenericDevice.Send*
      implements:
      - Global.IDevice.Send(DeviceData,System.Int32,SimulationState)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDevice.UpdateData(DeviceData,System.Int32)
      commentId: M:Global.GenericDevice.UpdateData(DeviceData,System.Int32)
      language: CSharp
      name:
        CSharp: UpdateData(DeviceData, Int32)
        VB: UpdateData(DeviceData, Int32)
      nameWithType:
        CSharp: GenericDevice.UpdateData(DeviceData, Int32)
        VB: GenericDevice.UpdateData(DeviceData, Int32)
      qualifiedName:
        CSharp: GenericDevice.UpdateData(DeviceData, System.Int32)
        VB: GenericDevice.UpdateData(DeviceData, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateData
        path: ''
        startLine: 3108
      summary: "\nUpdateData\n"
      example: []
      syntax:
        content:
          CSharp: public void UpdateData(DeviceData data, int slotId)
          VB: Public Sub UpdateData(data As DeviceData, slotId As Integer)
        parameters:
        - id: data
          type: Global.DeviceData
          description: ''
        - id: slotId
          type: System.Int32
          description: ''
      overload: Global.GenericDevice.UpdateData*
      implements:
      - Global.IDevice.UpdateData(DeviceData,System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDevice.GetDeviceData
      commentId: M:Global.GenericDevice.GetDeviceData
      language: CSharp
      name:
        CSharp: GetDeviceData()
        VB: GetDeviceData()
      nameWithType:
        CSharp: GenericDevice.GetDeviceData()
        VB: GenericDevice.GetDeviceData()
      qualifiedName:
        CSharp: GenericDevice.GetDeviceData()
        VB: GenericDevice.GetDeviceData()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetDeviceData
        path: ''
        startLine: 3123
      summary: "\nReturn DeviceData (DataSheet)\n"
      example: []
      syntax:
        content:
          CSharp: public virtual GenericDeviceData GetDeviceData()
          VB: Public Overridable Function GetDeviceData As GenericDeviceData
        return:
          type: Global.GenericDeviceData
          description: ''
      overload: Global.GenericDevice.GetDeviceData*
      implements:
      - Global.IDevice.GetDeviceData
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Global.GenericDevice.GetParams
      commentId: M:Global.GenericDevice.GetParams
      language: CSharp
      name:
        CSharp: GetParams()
        VB: GetParams()
      nameWithType:
        CSharp: GenericDevice.GetParams()
        VB: GenericDevice.GetParams()
      qualifiedName:
        CSharp: GenericDevice.GetParams()
        VB: GenericDevice.GetParams()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetParams
        path: ''
        startLine: 3135
      summary: "\nGetParams\n"
      example: []
      syntax:
        content:
          CSharp: public virtual DeviceParam GetParams()
          VB: Public Overridable Function GetParams As DeviceParam
        return:
          type: Global.DeviceParam
          description: ''
      overload: Global.GenericDevice.GetParams*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Global.GenericDevice.GetSlotsOut
      commentId: M:Global.GenericDevice.GetSlotsOut
      language: CSharp
      name:
        CSharp: GetSlotsOut()
        VB: GetSlotsOut()
      nameWithType:
        CSharp: GenericDevice.GetSlotsOut()
        VB: GenericDevice.GetSlotsOut()
      qualifiedName:
        CSharp: GenericDevice.GetSlotsOut()
        VB: GenericDevice.GetSlotsOut()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetSlotsOut
        path: ''
        startLine: 3146
      summary: "\nGetSlotsOut\n"
      example: []
      syntax:
        content:
          CSharp: public SlotOut[] GetSlotsOut()
          VB: Public Function GetSlotsOut As SlotOut()
        return:
          type: Global.SlotOut[]
          description: ''
      overload: Global.GenericDevice.GetSlotsOut*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDevice.GetSlotsIn
      commentId: M:Global.GenericDevice.GetSlotsIn
      language: CSharp
      name:
        CSharp: GetSlotsIn()
        VB: GetSlotsIn()
      nameWithType:
        CSharp: GenericDevice.GetSlotsIn()
        VB: GenericDevice.GetSlotsIn()
      qualifiedName:
        CSharp: GenericDevice.GetSlotsIn()
        VB: GenericDevice.GetSlotsIn()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetSlotsIn
        path: ''
        startLine: 3155
      summary: "\nGetSlotsIn\n"
      example: []
      syntax:
        content:
          CSharp: public SlotIn[] GetSlotsIn()
          VB: Public Function GetSlotsIn As SlotIn()
        return:
          type: Global.SlotIn[]
          description: ''
      overload: Global.GenericDevice.GetSlotsIn*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
      commentId: M:Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
      language: CSharp
      name:
        CSharp: ForwardData(DeviceData, Int32, SimulationState)
        VB: ForwardData(DeviceData, Int32, SimulationState)
      nameWithType:
        CSharp: GenericDevice.ForwardData(DeviceData, Int32, SimulationState)
        VB: GenericDevice.ForwardData(DeviceData, Int32, SimulationState)
      qualifiedName:
        CSharp: GenericDevice.ForwardData(DeviceData, System.Int32, SimulationState)
        VB: GenericDevice.ForwardData(DeviceData, System.Int32, SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ForwardData
        path: ''
        startLine: 3167
      summary: "\nForwardData\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void ForwardData(DeviceData deviceData, int slotId, SimulationState state = SimulationState.EPressureLoss)
          VB: Public Overridable Sub ForwardData(deviceData As DeviceData, slotId As Integer, state As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: deviceData
          type: Global.DeviceData
          description: ''
        - id: slotId
          type: System.Int32
          description: ''
        - id: state
          type: Global.SimulationState
          description: ''
      overload: Global.GenericDevice.ForwardData*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Global.GenericDevice.RunSimulation
      commentId: M:Global.GenericDevice.RunSimulation
      language: CSharp
      name:
        CSharp: RunSimulation()
        VB: RunSimulation()
      nameWithType:
        CSharp: GenericDevice.RunSimulation()
        VB: GenericDevice.RunSimulation()
      qualifiedName:
        CSharp: GenericDevice.RunSimulation()
        VB: GenericDevice.RunSimulation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RunSimulation
        path: ''
        startLine: 3176
      summary: "\nSimulation Start Point\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void RunSimulation()
          VB: Protected Overridable Sub RunSimulation
      overload: Global.GenericDevice.RunSimulation*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Global.GenericDevice.PreSimulation
      commentId: M:Global.GenericDevice.PreSimulation
      language: CSharp
      name:
        CSharp: PreSimulation()
        VB: PreSimulation()
      nameWithType:
        CSharp: GenericDevice.PreSimulation()
        VB: GenericDevice.PreSimulation()
      qualifiedName:
        CSharp: GenericDevice.PreSimulation()
        VB: GenericDevice.PreSimulation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PreSimulation
        path: ''
        startLine: 3183
      summary: "\nPreSimulation\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void PreSimulation()
          VB: Protected Overridable Sub PreSimulation
      overload: Global.GenericDevice.PreSimulation*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Global.GenericDevice.GetParellel
      commentId: M:Global.GenericDevice.GetParellel
      language: CSharp
      name:
        CSharp: GetParellel()
        VB: GetParellel()
      nameWithType:
        CSharp: GenericDevice.GetParellel()
        VB: GenericDevice.GetParellel()
      qualifiedName:
        CSharp: GenericDevice.GetParellel()
        VB: GenericDevice.GetParellel()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetParellel
        path: ''
        startLine: 3192
      summary: "\nGetParellel\n"
      example: []
      syntax:
        content:
          CSharp: public virtual GenericDevice GetParellel()
          VB: Public Overridable Function GetParellel As GenericDevice
        return:
          type: Global.GenericDevice
          description: ''
      overload: Global.GenericDevice.GetParellel*
      implements:
      - Global.IDevice.GetParellel
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Global.GenericDevice.GetDevice
      commentId: M:Global.GenericDevice.GetDevice
      language: CSharp
      name:
        CSharp: GetDevice()
        VB: GetDevice()
      nameWithType:
        CSharp: GenericDevice.GetDevice()
        VB: GenericDevice.GetDevice()
      qualifiedName:
        CSharp: GenericDevice.GetDevice()
        VB: GenericDevice.GetDevice()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetDevice
        path: ''
        startLine: 3201
      summary: "\nGetParellel\n"
      example: []
      syntax:
        content:
          CSharp: public virtual GenericDevice GetDevice()
          VB: Public Overridable Function GetDevice As GenericDevice
        return:
          type: Global.GenericDevice
          description: ''
      overload: Global.GenericDevice.GetDevice*
      implements:
      - Global.IDevice.GetDevice
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Global.GenericDevice.GetSlotOutData(System.Int32)
      commentId: M:Global.GenericDevice.GetSlotOutData(System.Int32)
      language: CSharp
      name:
        CSharp: GetSlotOutData(Int32)
        VB: GetSlotOutData(Int32)
      nameWithType:
        CSharp: GenericDevice.GetSlotOutData(Int32)
        VB: GenericDevice.GetSlotOutData(Int32)
      qualifiedName:
        CSharp: GenericDevice.GetSlotOutData(System.Int32)
        VB: GenericDevice.GetSlotOutData(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetSlotOutData
        path: ''
        startLine: 3211
      summary: "\nGetSlotOutData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData GetSlotOutData(int slotId)
          VB: Public Function GetSlotOutData(slotId As Integer) As DeviceData
        parameters:
        - id: slotId
          type: System.Int32
          description: ''
        return:
          type: Global.DeviceData
          description: ''
      overload: Global.GenericDevice.GetSlotOutData*
      implements:
      - Global.IDevice.GetSlotOutData(System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
      commentId: M:Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
      language: CSharp
      name:
        CSharp: GetSlotOutInstanceID(Int32)
        VB: GetSlotOutInstanceID(Int32)
      nameWithType:
        CSharp: GenericDevice.GetSlotOutInstanceID(Int32)
        VB: GenericDevice.GetSlotOutInstanceID(Int32)
      qualifiedName:
        CSharp: GenericDevice.GetSlotOutInstanceID(System.Int32)
        VB: GenericDevice.GetSlotOutInstanceID(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetSlotOutInstanceID
        path: ''
        startLine: 3229
      summary: "\nGetSlotOutInstanceID\n"
      example: []
      syntax:
        content:
          CSharp: public int GetSlotOutInstanceID(int slotId)
          VB: Public Function GetSlotOutInstanceID(slotId As Integer) As Integer
        parameters:
        - id: slotId
          type: System.Int32
          description: ''
        return:
          type: System.Int32
          description: ''
      overload: Global.GenericDevice.GetSlotOutInstanceID*
      implements:
      - Global.IDevice.GetSlotOutInstanceID(System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDevice.GetSlotInInstanceID(System.Int32)
      commentId: M:Global.GenericDevice.GetSlotInInstanceID(System.Int32)
      language: CSharp
      name:
        CSharp: GetSlotInInstanceID(Int32)
        VB: GetSlotInInstanceID(Int32)
      nameWithType:
        CSharp: GenericDevice.GetSlotInInstanceID(Int32)
        VB: GenericDevice.GetSlotInInstanceID(Int32)
      qualifiedName:
        CSharp: GenericDevice.GetSlotInInstanceID(System.Int32)
        VB: GenericDevice.GetSlotInInstanceID(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetSlotInInstanceID
        path: ''
        startLine: 3246
      summary: "\nGetSlotOutInstanceID\n"
      example: []
      syntax:
        content:
          CSharp: public int GetSlotInInstanceID(int slotId)
          VB: Public Function GetSlotInInstanceID(slotId As Integer) As Integer
        parameters:
        - id: slotId
          type: System.Int32
          description: ''
        return:
          type: System.Int32
          description: ''
      overload: Global.GenericDevice.GetSlotInInstanceID*
      implements:
      - Global.IDevice.GetSlotInInstanceID(System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDevice.GetPressureLoss
      commentId: M:Global.GenericDevice.GetPressureLoss
      language: CSharp
      name:
        CSharp: GetPressureLoss()
        VB: GetPressureLoss()
      nameWithType:
        CSharp: GenericDevice.GetPressureLoss()
        VB: GenericDevice.GetPressureLoss()
      qualifiedName:
        CSharp: GenericDevice.GetPressureLoss()
        VB: GenericDevice.GetPressureLoss()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetPressureLoss
        path: ''
        startLine: 3263
      summary: "\nGetPressureLoss\n"
      example: []
      syntax:
        content:
          CSharp: public float GetPressureLoss()
          VB: Public Function GetPressureLoss As Single
        return:
          type: System.Single
          description: ''
      overload: Global.GenericDevice.GetPressureLoss*
      implements:
      - Global.IDevice.GetPressureLoss
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDevice.SetPressureLoss(System.Single)
      commentId: M:Global.GenericDevice.SetPressureLoss(System.Single)
      language: CSharp
      name:
        CSharp: SetPressureLoss(Single)
        VB: SetPressureLoss(Single)
      nameWithType:
        CSharp: GenericDevice.SetPressureLoss(Single)
        VB: GenericDevice.SetPressureLoss(Single)
      qualifiedName:
        CSharp: GenericDevice.SetPressureLoss(System.Single)
        VB: GenericDevice.SetPressureLoss(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPressureLoss
        path: ''
        startLine: 3272
      summary: "\nSetPressureLoss\n"
      example: []
      syntax:
        content:
          CSharp: public void SetPressureLoss(float loss)
          VB: Public Sub SetPressureLoss(loss As Single)
        parameters:
        - id: loss
          type: System.Single
      overload: Global.GenericDevice.SetPressureLoss*
      implements:
      - Global.IDevice.SetPressureLoss(System.Single)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.GenericHeater
    commentId: T:Global.GenericHeater
    language: CSharp
    name:
      CSharp: GenericHeater
      VB: GenericHeater
    nameWithType:
      CSharp: GenericHeater
      VB: GenericHeater
    qualifiedName:
      CSharp: GenericHeater
      VB: GenericHeater
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericHeater
      path: ''
      startLine: 3321
    summary: "\nGenericWaterPipe\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericHeater : GenericDevice, IDevice'
        VB: >-
          Public Class GenericHeater

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.OnAwake
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.RunSimulation
    - Global.GenericDevice.PreSimulation
    - Global.GenericDevice.GetParellel
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericHeater.Power
      commentId: P:Global.GenericHeater.Power
      language: CSharp
      name:
        CSharp: Power
        VB: Power
      nameWithType:
        CSharp: GenericHeater.Power
        VB: GenericHeater.Power
      qualifiedName:
        CSharp: GenericHeater.Power
        VB: GenericHeater.Power
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Power
        path: ''
        startLine: 3336
      summary: "\nValvePos\n"
      example: []
      syntax:
        content:
          CSharp: public float Power { get; set; }
          VB: Public Property Power As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericHeater.Power*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.GenericHeater.GetDeviceData
      commentId: M:Global.GenericHeater.GetDeviceData
      language: CSharp
      name:
        CSharp: GetDeviceData()
        VB: GetDeviceData()
      nameWithType:
        CSharp: GenericHeater.GetDeviceData()
        VB: GenericHeater.GetDeviceData()
      qualifiedName:
        CSharp: GenericHeater.GetDeviceData()
        VB: GenericHeater.GetDeviceData()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetDeviceData
        path: ''
        startLine: 3368
      summary: "\nGetDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public override GenericDeviceData GetDeviceData()
          VB: Public Overrides Function GetDeviceData As GenericDeviceData
        return:
          type: Global.GenericDeviceData
          description: ''
      overload: Global.GenericHeater.GetDeviceData*
      overridden: Global.GenericDevice.GetDeviceData
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Global.GenericHeater.GetParams
      commentId: M:Global.GenericHeater.GetParams
      language: CSharp
      name:
        CSharp: GetParams()
        VB: GetParams()
      nameWithType:
        CSharp: GenericHeater.GetParams()
        VB: GenericHeater.GetParams()
      qualifiedName:
        CSharp: GenericHeater.GetParams()
        VB: GenericHeater.GetParams()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetParams
        path: ''
        startLine: 3384
      summary: "\nGetParams\n"
      example: []
      syntax:
        content:
          CSharp: public override DeviceParam GetParams()
          VB: Public Overrides Function GetParams As DeviceParam
        return:
          type: Global.DeviceParam
          description: ''
      overload: Global.GenericHeater.GetParams*
      overridden: Global.GenericDevice.GetParams
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.GenericHeaterBoiler
    commentId: T:Global.GenericHeaterBoiler
    language: CSharp
    name:
      CSharp: GenericHeaterBoiler
      VB: GenericHeaterBoiler
    nameWithType:
      CSharp: GenericHeaterBoiler
      VB: GenericHeaterBoiler
    qualifiedName:
      CSharp: GenericHeaterBoiler
      VB: GenericHeaterBoiler
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericHeaterBoiler
      path: ''
      startLine: 3451
    summary: "\nGenericWaterPipe\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericHeaterBoiler : GenericDevice, IDevice'
        VB: >-
          Public Class GenericHeaterBoiler

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.OnAwake
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetDeviceData
    - Global.GenericDevice.GetParams
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.RunSimulation
    - Global.GenericDevice.PreSimulation
    - Global.GenericDevice.GetParellel
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.GenericHeatExchanger
    commentId: T:Global.GenericHeatExchanger
    language: CSharp
    name:
      CSharp: GenericHeatExchanger
      VB: GenericHeatExchanger
    nameWithType:
      CSharp: GenericHeatExchanger
      VB: GenericHeatExchanger
    qualifiedName:
      CSharp: GenericHeatExchanger
      VB: GenericHeatExchanger
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericHeatExchanger
      path: ''
      startLine: 3491
    summary: "\nGenericWaterPipe\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericHeatExchanger : GenericDevice, IDevice'
        VB: >-
          Public Class GenericHeatExchanger

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.OnAwake
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetDeviceData
    - Global.GenericDevice.GetParams
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.RunSimulation
    - Global.GenericDevice.PreSimulation
    - Global.GenericDevice.GetParellel
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.GenericLoad
    commentId: T:Global.GenericLoad
    language: CSharp
    name:
      CSharp: GenericLoad
      VB: GenericLoad
    nameWithType:
      CSharp: GenericLoad
      VB: GenericLoad
    qualifiedName:
      CSharp: GenericLoad
      VB: GenericLoad
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericLoad
      path: ''
      startLine: 3532
    summary: "\nGenericWaterPipe\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericLoad : GenericDevice, IDevice'
        VB: >-
          Public Class GenericLoad

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.OnAwake
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetDeviceData
    - Global.GenericDevice.GetParams
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.RunSimulation
    - Global.GenericDevice.PreSimulation
    - Global.GenericDevice.GetParellel
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.GenericPipeT
    commentId: T:Global.GenericPipeT
    language: CSharp
    name:
      CSharp: GenericPipeT
      VB: GenericPipeT
    nameWithType:
      CSharp: GenericPipeT
      VB: GenericPipeT
    qualifiedName:
      CSharp: GenericPipeT
      VB: GenericPipeT
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericPipeT
      path: ''
      startLine: 3573
    summary: "\nGenericPipeT\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericPipeT : GenericDevice, IDevice'
        VB: >-
          Public Class GenericPipeT

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.OnAwake
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetDeviceData
    - Global.GenericDevice.GetParams
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.RunSimulation
    - Global.GenericDevice.PreSimulation
    - Global.GenericDevice.GetParellel
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.GenericPipeT2In1
    commentId: T:Global.GenericPipeT2In1
    language: CSharp
    name:
      CSharp: GenericPipeT2In1
      VB: GenericPipeT2In1
    nameWithType:
      CSharp: GenericPipeT2In1
      VB: GenericPipeT2In1
    qualifiedName:
      CSharp: GenericPipeT2In1
      VB: GenericPipeT2In1
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericPipeT2In1
      path: ''
      startLine: 3615
    summary: "\nGenericWaterPipe\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericPipeT2In1 : GenericDevice, IDevice'
        VB: >-
          Public Class GenericPipeT2In1

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.OnAwake
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetDeviceData
    - Global.GenericDevice.GetParams
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.RunSimulation
    - Global.GenericDevice.PreSimulation
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericPipeT2In1.GetParellel
      commentId: M:Global.GenericPipeT2In1.GetParellel
      language: CSharp
      name:
        CSharp: GetParellel()
        VB: GetParellel()
      nameWithType:
        CSharp: GenericPipeT2In1.GetParellel()
        VB: GenericPipeT2In1.GetParellel()
      qualifiedName:
        CSharp: GenericPipeT2In1.GetParellel()
        VB: GenericPipeT2In1.GetParellel()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetParellel
        path: ''
        startLine: 3648
      summary: "\nGetParellel\n"
      example: []
      syntax:
        content:
          CSharp: public override GenericDevice GetParellel()
          VB: Public Overrides Function GetParellel As GenericDevice
        return:
          type: Global.GenericDevice
      overload: Global.GenericPipeT2In1.GetParellel*
      overridden: Global.GenericDevice.GetParellel
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.GenericPump
    commentId: T:Global.GenericPump
    language: CSharp
    name:
      CSharp: GenericPump
      VB: GenericPump
    nameWithType:
      CSharp: GenericPump
      VB: GenericPump
    qualifiedName:
      CSharp: GenericPump
      VB: GenericPump
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericPump
      path: ''
      startLine: 3692
    summary: "\nGenericPump\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericPump : GenericDevice, IDevice'
        VB: >-
          Public Class GenericPump

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetDeviceData
    - Global.GenericDevice.GetParams
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.GetParellel
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericPump.OnAwake
      commentId: M:Global.GenericPump.OnAwake
      language: CSharp
      name:
        CSharp: OnAwake()
        VB: OnAwake()
      nameWithType:
        CSharp: GenericPump.OnAwake()
        VB: GenericPump.OnAwake()
      qualifiedName:
        CSharp: GenericPump.OnAwake()
        VB: GenericPump.OnAwake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnAwake
        path: ''
        startLine: 3720
      summary: "\nStart is called on the frame when a script is enabled just before any \nof the Update methods are called the first time.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnAwake()
          VB: Protected Overrides Sub OnAwake
      overload: Global.GenericPump.OnAwake*
      overridden: Global.GenericDevice.OnAwake
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Global.GenericPump.PreSimulation
      commentId: M:Global.GenericPump.PreSimulation
      language: CSharp
      name:
        CSharp: PreSimulation()
        VB: PreSimulation()
      nameWithType:
        CSharp: GenericPump.PreSimulation()
        VB: GenericPump.PreSimulation()
      qualifiedName:
        CSharp: GenericPump.PreSimulation()
        VB: GenericPump.PreSimulation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PreSimulation
        path: ''
        startLine: 3752
      summary: "\nSimulation Start Point\n"
      example: []
      syntax:
        content:
          CSharp: protected override void PreSimulation()
          VB: Protected Overrides Sub PreSimulation
      overload: Global.GenericPump.PreSimulation*
      overridden: Global.GenericDevice.PreSimulation
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Global.GenericPump.RunSimulation
      commentId: M:Global.GenericPump.RunSimulation
      language: CSharp
      name:
        CSharp: RunSimulation()
        VB: RunSimulation()
      nameWithType:
        CSharp: GenericPump.RunSimulation()
        VB: GenericPump.RunSimulation()
      qualifiedName:
        CSharp: GenericPump.RunSimulation()
        VB: GenericPump.RunSimulation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RunSimulation
        path: ''
        startLine: 3773
      summary: "\nSimulation Start Point\n"
      example: []
      syntax:
        content:
          CSharp: protected override void RunSimulation()
          VB: Protected Overrides Sub RunSimulation
      overload: Global.GenericPump.RunSimulation*
      overridden: Global.GenericDevice.RunSimulation
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Global.GenericValve
    commentId: T:Global.GenericValve
    language: CSharp
    name:
      CSharp: GenericValve
      VB: GenericValve
    nameWithType:
      CSharp: GenericValve
      VB: GenericValve
    qualifiedName:
      CSharp: GenericValve
      VB: GenericValve
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericValve
      path: ''
      startLine: 3841
    summary: "\nGenericWaterPipe\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericValve : GenericDevice, IDevice'
        VB: >-
          Public Class GenericValve

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.OnAwake
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.PreSimulation
    - Global.GenericDevice.GetParellel
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericValve.ValvePos
      commentId: P:Global.GenericValve.ValvePos
      language: CSharp
      name:
        CSharp: ValvePos
        VB: ValvePos
      nameWithType:
        CSharp: GenericValve.ValvePos
        VB: GenericValve.ValvePos
      qualifiedName:
        CSharp: GenericValve.ValvePos
        VB: GenericValve.ValvePos
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ValvePos
        path: ''
        startLine: 3858
      summary: "\nValvePos\n"
      example: []
      syntax:
        content:
          CSharp: public float ValvePos { get; set; }
          VB: Public Property ValvePos As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericValve.ValvePos*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.GenericValve.GetDeviceData
      commentId: M:Global.GenericValve.GetDeviceData
      language: CSharp
      name:
        CSharp: GetDeviceData()
        VB: GetDeviceData()
      nameWithType:
        CSharp: GenericValve.GetDeviceData()
        VB: GenericValve.GetDeviceData()
      qualifiedName:
        CSharp: GenericValve.GetDeviceData()
        VB: GenericValve.GetDeviceData()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetDeviceData
        path: ''
        startLine: 3882
      summary: "\nGetDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public override GenericDeviceData GetDeviceData()
          VB: Public Overrides Function GetDeviceData As GenericDeviceData
        return:
          type: Global.GenericDeviceData
          description: ''
      overload: Global.GenericValve.GetDeviceData*
      overridden: Global.GenericDevice.GetDeviceData
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Global.GenericValve.GetParams
      commentId: M:Global.GenericValve.GetParams
      language: CSharp
      name:
        CSharp: GetParams()
        VB: GetParams()
      nameWithType:
        CSharp: GenericValve.GetParams()
        VB: GenericValve.GetParams()
      qualifiedName:
        CSharp: GenericValve.GetParams()
        VB: GenericValve.GetParams()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetParams
        path: ''
        startLine: 3900
      summary: "\nGetParams\n"
      example: []
      syntax:
        content:
          CSharp: public override DeviceParam GetParams()
          VB: Public Overrides Function GetParams As DeviceParam
        return:
          type: Global.DeviceParam
          description: ''
      overload: Global.GenericValve.GetParams*
      overridden: Global.GenericDevice.GetParams
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Global.GenericValve.RunSimulation
      commentId: M:Global.GenericValve.RunSimulation
      language: CSharp
      name:
        CSharp: RunSimulation()
        VB: RunSimulation()
      nameWithType:
        CSharp: GenericValve.RunSimulation()
        VB: GenericValve.RunSimulation()
      qualifiedName:
        CSharp: GenericValve.RunSimulation()
        VB: GenericValve.RunSimulation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RunSimulation
        path: ''
        startLine: 3921
      summary: "\nSimulation Start Point\n"
      example: []
      syntax:
        content:
          CSharp: protected override void RunSimulation()
          VB: Protected Overrides Sub RunSimulation
      overload: Global.GenericValve.RunSimulation*
      overridden: Global.GenericDevice.RunSimulation
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Global.GenericWaterMixer
    commentId: T:Global.GenericWaterMixer
    language: CSharp
    name:
      CSharp: GenericWaterMixer
      VB: GenericWaterMixer
    nameWithType:
      CSharp: GenericWaterMixer
      VB: GenericWaterMixer
    qualifiedName:
      CSharp: GenericWaterMixer
      VB: GenericWaterMixer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericWaterMixer
      path: ''
      startLine: 3999
    summary: "\nGenericWaterPipe\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericWaterMixer : GenericDevice, IDevice'
        VB: >-
          Public Class GenericWaterMixer

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.OnAwake
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetParams
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.RunSimulation
    - Global.GenericDevice.PreSimulation
    - Global.GenericDevice.GetParellel
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericWaterMixer.GetDeviceData
      commentId: M:Global.GenericWaterMixer.GetDeviceData
      language: CSharp
      name:
        CSharp: GetDeviceData()
        VB: GetDeviceData()
      nameWithType:
        CSharp: GenericWaterMixer.GetDeviceData()
        VB: GenericWaterMixer.GetDeviceData()
      qualifiedName:
        CSharp: GenericWaterMixer.GetDeviceData()
        VB: GenericWaterMixer.GetDeviceData()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetDeviceData
        path: ''
        startLine: 4009
      syntax:
        content:
          CSharp: public override GenericDeviceData GetDeviceData()
          VB: Public Overrides Function GetDeviceData As GenericDeviceData
        return:
          type: Global.GenericDeviceData
      overload: Global.GenericWaterMixer.GetDeviceData*
      overridden: Global.GenericDevice.GetDeviceData
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Global.GenericWaterMixer.ForwardData(DeviceData,System.Int32,SimulationState)
      commentId: M:Global.GenericWaterMixer.ForwardData(DeviceData,System.Int32,SimulationState)
      language: CSharp
      name:
        CSharp: ForwardData(DeviceData, Int32, SimulationState)
        VB: ForwardData(DeviceData, Int32, SimulationState)
      nameWithType:
        CSharp: GenericWaterMixer.ForwardData(DeviceData, Int32, SimulationState)
        VB: GenericWaterMixer.ForwardData(DeviceData, Int32, SimulationState)
      qualifiedName:
        CSharp: GenericWaterMixer.ForwardData(DeviceData, System.Int32, SimulationState)
        VB: GenericWaterMixer.ForwardData(DeviceData, System.Int32, SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ForwardData
        path: ''
        startLine: 4027
      summary: "\nForwardData()\n"
      example: []
      syntax:
        content:
          CSharp: public override void ForwardData(DeviceData aDeviceData, int aSlotId, SimulationState aState = SimulationState.EPressureLoss)
          VB: Public Overrides Sub ForwardData(aDeviceData As DeviceData, aSlotId As Integer, aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: aDeviceData
          type: Global.DeviceData
          description: ''
        - id: aSlotId
          type: System.Int32
        - id: aState
          type: Global.SimulationState
      overload: Global.GenericWaterMixer.ForwardData*
      overridden: Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.GenericWaterPipe
    commentId: T:Global.GenericWaterPipe
    language: CSharp
    name:
      CSharp: GenericWaterPipe
      VB: GenericWaterPipe
    nameWithType:
      CSharp: GenericWaterPipe
      VB: GenericWaterPipe
    qualifiedName:
      CSharp: GenericWaterPipe
      VB: GenericWaterPipe
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericWaterPipe
      path: ''
      startLine: 4079
    summary: "\nGenericWaterPipe\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericWaterPipe : GenericDevice, IDevice'
        VB: >-
          Public Class GenericWaterPipe

              Inherits GenericDevice

              Implements IDevice
    inheritance:
    - System.Object
    - Global.GenericDevice
    implements:
    - Global.IDevice
    inheritedMembers:
    - Global.GenericDevice.deviceData
    - Global.GenericDevice.DeviceData
    - Global.GenericDevice.pressureLoss
    - Global.GenericDevice.currentQ
    - Global.GenericDevice.simulationStartPoint
    - Global.GenericDevice.listOfSlotIn
    - Global.GenericDevice.instanceID
    - Global.GenericDevice.OnAwake
    - Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.UpdateData(DeviceData,System.Int32)
    - Global.GenericDevice.GetDeviceData
    - Global.GenericDevice.GetParams
    - Global.GenericDevice.GetSlotsOut
    - Global.GenericDevice.GetSlotsIn
    - Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
    - Global.GenericDevice.PreSimulation
    - Global.GenericDevice.GetParellel
    - Global.GenericDevice.GetDevice
    - Global.GenericDevice.GetSlotOutData(System.Int32)
    - Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
    - Global.GenericDevice.GetSlotInInstanceID(System.Int32)
    - Global.GenericDevice.GetPressureLoss
    - Global.GenericDevice.SetPressureLoss(System.Single)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericWaterPipe.RunSimulation
      commentId: M:Global.GenericWaterPipe.RunSimulation
      language: CSharp
      name:
        CSharp: RunSimulation()
        VB: RunSimulation()
      nameWithType:
        CSharp: GenericWaterPipe.RunSimulation()
        VB: GenericWaterPipe.RunSimulation()
      qualifiedName:
        CSharp: GenericWaterPipe.RunSimulation()
        VB: GenericWaterPipe.RunSimulation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RunSimulation
        path: ''
        startLine: 4082
      syntax:
        content:
          CSharp: protected override void RunSimulation()
          VB: Protected Overrides Sub RunSimulation
      overload: Global.GenericWaterPipe.RunSimulation*
      overridden: Global.GenericDevice.RunSimulation
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Global.ActionCanvas
    commentId: T:Global.ActionCanvas
    language: CSharp
    name:
      CSharp: ActionCanvas
      VB: ActionCanvas
    nameWithType:
      CSharp: ActionCanvas
      VB: ActionCanvas
    qualifiedName:
      CSharp: ActionCanvas
      VB: ActionCanvas
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ActionCanvas
      path: ''
      startLine: 4160
    summary: "\nInfoCanvas\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ActionCanvas : MonoBehaviour'
        VB: >-
          Public Class ActionCanvas

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ActionCanvas.Instance
      commentId: P:Global.ActionCanvas.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: ActionCanvas.Instance
        VB: ActionCanvas.Instance
      qualifiedName:
        CSharp: ActionCanvas.Instance
        VB: ActionCanvas.Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 4181
      summary: "\nInstance\n"
      example: []
      syntax:
        content:
          CSharp: public static ActionCanvas Instance { get; }
          VB: Public Shared ReadOnly Property Instance As ActionCanvas
        parameters: []
        return:
          type: Global.ActionCanvas
      overload: Global.ActionCanvas.Instance*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Global.ActionCanvas.ShowActionDialog(GenericDevice)
      commentId: M:Global.ActionCanvas.ShowActionDialog(GenericDevice)
      language: CSharp
      name:
        CSharp: ShowActionDialog(GenericDevice)
        VB: ShowActionDialog(GenericDevice)
      nameWithType:
        CSharp: ActionCanvas.ShowActionDialog(GenericDevice)
        VB: ActionCanvas.ShowActionDialog(GenericDevice)
      qualifiedName:
        CSharp: ActionCanvas.ShowActionDialog(GenericDevice)
        VB: ActionCanvas.ShowActionDialog(GenericDevice)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShowActionDialog
        path: ''
        startLine: 4202
      summary: "\nShowActionDialog\n"
      example: []
      syntax:
        content:
          CSharp: public void ShowActionDialog(GenericDevice aGenericDevice)
          VB: Public Sub ShowActionDialog(aGenericDevice As GenericDevice)
        parameters:
        - id: aGenericDevice
          type: Global.GenericDevice
      overload: Global.ActionCanvas.ShowActionDialog*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ActionCanvas.HideActionDialog
      commentId: M:Global.ActionCanvas.HideActionDialog
      language: CSharp
      name:
        CSharp: HideActionDialog()
        VB: HideActionDialog()
      nameWithType:
        CSharp: ActionCanvas.HideActionDialog()
        VB: ActionCanvas.HideActionDialog()
      qualifiedName:
        CSharp: ActionCanvas.HideActionDialog()
        VB: ActionCanvas.HideActionDialog()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HideActionDialog
        path: ''
        startLine: 4214
      syntax:
        content:
          CSharp: public void HideActionDialog()
          VB: Public Sub HideActionDialog
      overload: Global.ActionCanvas.HideActionDialog*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.ActionDialog
    commentId: T:Global.ActionDialog
    language: CSharp
    name:
      CSharp: ActionDialog
      VB: ActionDialog
    nameWithType:
      CSharp: ActionDialog
      VB: ActionDialog
    qualifiedName:
      CSharp: ActionDialog
      VB: ActionDialog
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ActionDialog
      path: ''
      startLine: 4269
    summary: "\nInfoCanvas\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ActionDialog : MonoBehaviour'
        VB: >-
          Public Class ActionDialog

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ActionDialog.SetDialog(GenericDevice,DeviceParam)
      commentId: M:Global.ActionDialog.SetDialog(GenericDevice,DeviceParam)
      language: CSharp
      name:
        CSharp: SetDialog(GenericDevice, DeviceParam)
        VB: SetDialog(GenericDevice, DeviceParam)
      nameWithType:
        CSharp: ActionDialog.SetDialog(GenericDevice, DeviceParam)
        VB: ActionDialog.SetDialog(GenericDevice, DeviceParam)
      qualifiedName:
        CSharp: ActionDialog.SetDialog(GenericDevice, DeviceParam)
        VB: ActionDialog.SetDialog(GenericDevice, DeviceParam)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetDialog
        path: ''
        startLine: 4298
      summary: "\nSetDialog\n"
      example: []
      syntax:
        content:
          CSharp: public void SetDialog(GenericDevice aGenericDevice, DeviceParam aParam)
          VB: Public Sub SetDialog(aGenericDevice As GenericDevice, aParam As DeviceParam)
        parameters:
        - id: aGenericDevice
          type: Global.GenericDevice
        - id: aParam
          type: Global.DeviceParam
      overload: Global.ActionDialog.SetDialog*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ActionDialog.ClearList
      commentId: M:Global.ActionDialog.ClearList
      language: CSharp
      name:
        CSharp: ClearList()
        VB: ClearList()
      nameWithType:
        CSharp: ActionDialog.ClearList()
        VB: ActionDialog.ClearList()
      qualifiedName:
        CSharp: ActionDialog.ClearList()
        VB: ActionDialog.ClearList()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClearList
        path: ''
        startLine: 4320
      syntax:
        content:
          CSharp: public void ClearList()
          VB: Public Sub ClearList
      overload: Global.ActionDialog.ClearList*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.FloatLineParam
    commentId: T:Global.FloatLineParam
    language: CSharp
    name:
      CSharp: FloatLineParam
      VB: FloatLineParam
    nameWithType:
      CSharp: FloatLineParam
      VB: FloatLineParam
    qualifiedName:
      CSharp: FloatLineParam
      VB: FloatLineParam
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FloatLineParam
      path: ''
      startLine: 4382
    summary: "\nSlotLine\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FloatLineParam : MonoBehaviour'
        VB: >-
          Public Class FloatLineParam

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.FloatLineParam.OnDestroy
      commentId: M:Global.FloatLineParam.OnDestroy
      language: CSharp
      name:
        CSharp: OnDestroy()
        VB: OnDestroy()
      nameWithType:
        CSharp: FloatLineParam.OnDestroy()
        VB: FloatLineParam.OnDestroy()
      qualifiedName:
        CSharp: FloatLineParam.OnDestroy()
        VB: FloatLineParam.OnDestroy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnDestroy
        path: ''
        startLine: 4402
      syntax:
        content:
          CSharp: public void OnDestroy()
          VB: Public Sub OnDestroy
      overload: Global.FloatLineParam.OnDestroy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.FloatLineParam.SetFloatline(System.String,System.Single,System.Single,System.Single,UnityAction{System.Single})
      commentId: M:Global.FloatLineParam.SetFloatline(System.String,System.Single,System.Single,System.Single,UnityAction{System.Single})
      language: CSharp
      name:
        CSharp: SetFloatline(String, Single, Single, Single, UnityAction<Single>)
        VB: SetFloatline(String, Single, Single, Single, UnityAction(Of Single))
      nameWithType:
        CSharp: FloatLineParam.SetFloatline(String, Single, Single, Single, UnityAction<Single>)
        VB: FloatLineParam.SetFloatline(String, Single, Single, Single, UnityAction(Of Single))
      qualifiedName:
        CSharp: FloatLineParam.SetFloatline(System.String, System.Single, System.Single, System.Single, UnityAction<System.Single>)
        VB: FloatLineParam.SetFloatline(System.String, System.Single, System.Single, System.Single, UnityAction(Of System.Single))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetFloatline
        path: ''
        startLine: 4418
      summary: "\nSetFloatline\n"
      example: []
      syntax:
        content:
          CSharp: public void SetFloatline(string aParamName, float aMin, float aMax, float aValue, UnityAction<float> aTarget)
          VB: Public Sub SetFloatline(aParamName As String, aMin As Single, aMax As Single, aValue As Single, aTarget As UnityAction(Of Single))
        parameters:
        - id: aParamName
          type: System.String
          description: ''
        - id: aMin
          type: System.Single
          description: ''
        - id: aMax
          type: System.Single
          description: ''
        - id: aValue
          type: System.Single
          description: ''
        - id: aTarget
          type: Global.UnityAction{System.Single}
          description: ''
      overload: Global.FloatLineParam.SetFloatline*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.FloatLineParam.ValueChangeCheck(UnityAction{System.Single})
      commentId: M:Global.FloatLineParam.ValueChangeCheck(UnityAction{System.Single})
      language: CSharp
      name:
        CSharp: ValueChangeCheck(UnityAction<Single>)
        VB: ValueChangeCheck(UnityAction(Of Single))
      nameWithType:
        CSharp: FloatLineParam.ValueChangeCheck(UnityAction<Single>)
        VB: FloatLineParam.ValueChangeCheck(UnityAction(Of Single))
      qualifiedName:
        CSharp: FloatLineParam.ValueChangeCheck(UnityAction<System.Single>)
        VB: FloatLineParam.ValueChangeCheck(UnityAction(Of System.Single))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ValueChangeCheck
        path: ''
        startLine: 4433
      summary: "\nValueChangeCheck\n"
      example: []
      syntax:
        content:
          CSharp: public void ValueChangeCheck(UnityAction<float> aTarget)
          VB: Public Sub ValueChangeCheck(aTarget As UnityAction(Of Single))
        parameters:
        - id: aTarget
          type: Global.UnityAction{System.Single}
          description: ''
      overload: Global.FloatLineParam.ValueChangeCheck*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.InfoCanvas
    commentId: T:Global.InfoCanvas
    language: CSharp
    name:
      CSharp: InfoCanvas
      VB: InfoCanvas
    nameWithType:
      CSharp: InfoCanvas
      VB: InfoCanvas
    qualifiedName:
      CSharp: InfoCanvas
      VB: InfoCanvas
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: InfoCanvas
      path: ''
      startLine: 4498
    summary: "\nInfoCanvas\n"
    example: []
    syntax:
      content:
        CSharp: 'public class InfoCanvas : MonoBehaviour'
        VB: >-
          Public Class InfoCanvas

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.InfoCanvas.Instance
      commentId: P:Global.InfoCanvas.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: InfoCanvas.Instance
        VB: InfoCanvas.Instance
      qualifiedName:
        CSharp: InfoCanvas.Instance
        VB: InfoCanvas.Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 4545
      summary: "\nInstance\n"
      example: []
      syntax:
        content:
          CSharp: public static InfoCanvas Instance { get; }
          VB: Public Shared ReadOnly Property Instance As InfoCanvas
        parameters: []
        return:
          type: Global.InfoCanvas
      overload: Global.InfoCanvas.Instance*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Global.InfoCanvas.SetTitle(System.String)
      commentId: M:Global.InfoCanvas.SetTitle(System.String)
      language: CSharp
      name:
        CSharp: SetTitle(String)
        VB: SetTitle(String)
      nameWithType:
        CSharp: InfoCanvas.SetTitle(String)
        VB: InfoCanvas.SetTitle(String)
      qualifiedName:
        CSharp: InfoCanvas.SetTitle(System.String)
        VB: InfoCanvas.SetTitle(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetTitle
        path: ''
        startLine: 4573
      summary: "\nSetTitle\n"
      example: []
      syntax:
        content:
          CSharp: public void SetTitle(string title)
          VB: Public Sub SetTitle(title As String)
        parameters:
        - id: title
          type: System.String
          description: ''
      overload: Global.InfoCanvas.SetTitle*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InfoCanvas.SetSlotInfoIN(System.String,System.String,System.Int32)
      commentId: M:Global.InfoCanvas.SetSlotInfoIN(System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: SetSlotInfoIN(String, String, Int32)
        VB: SetSlotInfoIN(String, String, Int32)
      nameWithType:
        CSharp: InfoCanvas.SetSlotInfoIN(String, String, Int32)
        VB: InfoCanvas.SetSlotInfoIN(String, String, Int32)
      qualifiedName:
        CSharp: InfoCanvas.SetSlotInfoIN(System.String, System.String, System.Int32)
        VB: InfoCanvas.SetSlotInfoIN(System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetSlotInfoIN
        path: ''
        startLine: 4582
      summary: "\nSetSlotInfoIN\n"
      example: []
      syntax:
        content:
          CSharp: public void SetSlotInfoIN(string desc, string data, int id)
          VB: Public Sub SetSlotInfoIN(desc As String, data As String, id As Integer)
        parameters:
        - id: desc
          type: System.String
          description: ''
        - id: data
          type: System.String
          description: ''
        - id: id
          type: System.Int32
      overload: Global.InfoCanvas.SetSlotInfoIN*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InfoCanvas.Ready
      commentId: M:Global.InfoCanvas.Ready
      language: CSharp
      name:
        CSharp: Ready()
        VB: Ready()
      nameWithType:
        CSharp: InfoCanvas.Ready()
        VB: InfoCanvas.Ready()
      qualifiedName:
        CSharp: InfoCanvas.Ready()
        VB: InfoCanvas.Ready()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Ready
        path: ''
        startLine: 4603
      syntax:
        content:
          CSharp: public void Ready()
          VB: Public Sub Ready
      overload: Global.InfoCanvas.Ready*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InfoCanvas.SetSlotOutInfo(System.String,System.String,System.Int32)
      commentId: M:Global.InfoCanvas.SetSlotOutInfo(System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: SetSlotOutInfo(String, String, Int32)
        VB: SetSlotOutInfo(String, String, Int32)
      nameWithType:
        CSharp: InfoCanvas.SetSlotOutInfo(String, String, Int32)
        VB: InfoCanvas.SetSlotOutInfo(String, String, Int32)
      qualifiedName:
        CSharp: InfoCanvas.SetSlotOutInfo(System.String, System.String, System.Int32)
        VB: InfoCanvas.SetSlotOutInfo(System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetSlotOutInfo
        path: ''
        startLine: 4613
      summary: "\nSetSlotOutInfo()\n"
      example: []
      syntax:
        content:
          CSharp: public void SetSlotOutInfo(string desc, string data, int id)
          VB: Public Sub SetSlotOutInfo(desc As String, data As String, id As Integer)
        parameters:
        - id: desc
          type: System.String
        - id: data
          type: System.String
        - id: id
          type: System.Int32
      overload: Global.InfoCanvas.SetSlotOutInfo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InfoCanvas.AddDeviceInfo(GenericDevice)
      commentId: M:Global.InfoCanvas.AddDeviceInfo(GenericDevice)
      language: CSharp
      name:
        CSharp: AddDeviceInfo(GenericDevice)
        VB: AddDeviceInfo(GenericDevice)
      nameWithType:
        CSharp: InfoCanvas.AddDeviceInfo(GenericDevice)
        VB: InfoCanvas.AddDeviceInfo(GenericDevice)
      qualifiedName:
        CSharp: InfoCanvas.AddDeviceInfo(GenericDevice)
        VB: InfoCanvas.AddDeviceInfo(GenericDevice)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddDeviceInfo
        path: ''
        startLine: 4636
      summary: "\nAddDeviceInfo\n"
      example: []
      syntax:
        content:
          CSharp: public void AddDeviceInfo(GenericDevice aGenericDevice)
          VB: Public Sub AddDeviceInfo(aGenericDevice As GenericDevice)
        parameters:
        - id: aGenericDevice
          type: Global.GenericDevice
          description: ''
      overload: Global.InfoCanvas.AddDeviceInfo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InfoCanvas.AddDeviceData(GenericDevice)
      commentId: M:Global.InfoCanvas.AddDeviceData(GenericDevice)
      language: CSharp
      name:
        CSharp: AddDeviceData(GenericDevice)
        VB: AddDeviceData(GenericDevice)
      nameWithType:
        CSharp: InfoCanvas.AddDeviceData(GenericDevice)
        VB: InfoCanvas.AddDeviceData(GenericDevice)
      qualifiedName:
        CSharp: InfoCanvas.AddDeviceData(GenericDevice)
        VB: InfoCanvas.AddDeviceData(GenericDevice)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddDeviceData
        path: ''
        startLine: 4665
      summary: "\nAddDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public void AddDeviceData(GenericDevice aGenericDevice)
          VB: Public Sub AddDeviceData(aGenericDevice As GenericDevice)
        parameters:
        - id: aGenericDevice
          type: Global.GenericDevice
          description: ''
      overload: Global.InfoCanvas.AddDeviceData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InfoCanvas.ClearInfo
      commentId: M:Global.InfoCanvas.ClearInfo
      language: CSharp
      name:
        CSharp: ClearInfo()
        VB: ClearInfo()
      nameWithType:
        CSharp: InfoCanvas.ClearInfo()
        VB: InfoCanvas.ClearInfo()
      qualifiedName:
        CSharp: InfoCanvas.ClearInfo()
        VB: InfoCanvas.ClearInfo()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClearInfo
        path: ''
        startLine: 4683
      summary: "\nClearInfo\n"
      example: []
      syntax:
        content:
          CSharp: public void ClearInfo()
          VB: Public Sub ClearInfo
      overload: Global.InfoCanvas.ClearInfo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.InfoCanvas.ClearActions
      commentId: M:Global.InfoCanvas.ClearActions
      language: CSharp
      name:
        CSharp: ClearActions()
        VB: ClearActions()
      nameWithType:
        CSharp: InfoCanvas.ClearActions()
        VB: InfoCanvas.ClearActions()
      qualifiedName:
        CSharp: InfoCanvas.ClearActions()
        VB: InfoCanvas.ClearActions()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClearActions
        path: ''
        startLine: 4713
      summary: "\nClearActions\n"
      example: []
      syntax:
        content:
          CSharp: public void ClearActions()
          VB: Public Sub ClearActions
      overload: Global.InfoCanvas.ClearActions*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.SlotLine
    commentId: T:Global.SlotLine
    language: CSharp
    name:
      CSharp: SlotLine
      VB: SlotLine
    nameWithType:
      CSharp: SlotLine
      VB: SlotLine
    qualifiedName:
      CSharp: SlotLine
      VB: SlotLine
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SlotLine
      path: ''
      startLine: 4762
    summary: "\nSlotLine\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SlotLine : MonoBehaviour'
        VB: >-
          Public Class SlotLine

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SlotLine.SetSlotlineInfo(System.String,System.String)
      commentId: M:Global.SlotLine.SetSlotlineInfo(System.String,System.String)
      language: CSharp
      name:
        CSharp: SetSlotlineInfo(String, String)
        VB: SetSlotlineInfo(String, String)
      nameWithType:
        CSharp: SlotLine.SetSlotlineInfo(String, String)
        VB: SlotLine.SetSlotlineInfo(String, String)
      qualifiedName:
        CSharp: SlotLine.SetSlotlineInfo(System.String, System.String)
        VB: SlotLine.SetSlotlineInfo(System.String, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetSlotlineInfo
        path: ''
        startLine: 4796
      summary: "\nSetSlotlineInfo()\n"
      example: []
      syntax:
        content:
          CSharp: public void SetSlotlineInfo(string aDescText = "", string aDataText = "")
          VB: Public Sub SetSlotlineInfo(aDescText As String = "", aDataText As String = "")
        parameters:
        - id: aDescText
          type: System.String
          description: ''
        - id: aDataText
          type: System.String
          description: ''
      overload: Global.SlotLine.SetSlotlineInfo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.SlotsList
    commentId: T:Global.SlotsList
    language: CSharp
    name:
      CSharp: SlotsList
      VB: SlotsList
    nameWithType:
      CSharp: SlotsList
      VB: SlotsList
    qualifiedName:
      CSharp: SlotsList
      VB: SlotsList
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SlotsList
      path: ''
      startLine: 4849
    summary: "\nSlotsList\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SlotsList : MonoBehaviour'
        VB: >-
          Public Class SlotsList

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SlotsList.AddSlotList(System.String,System.String)
      commentId: M:Global.SlotsList.AddSlotList(System.String,System.String)
      language: CSharp
      name:
        CSharp: AddSlotList(String, String)
        VB: AddSlotList(String, String)
      nameWithType:
        CSharp: SlotsList.AddSlotList(String, String)
        VB: SlotsList.AddSlotList(String, String)
      qualifiedName:
        CSharp: SlotsList.AddSlotList(System.String, System.String)
        VB: SlotsList.AddSlotList(System.String, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddSlotList
        path: ''
        startLine: 4874
      summary: "\nAddSlotList()\n"
      example: []
      syntax:
        content:
          CSharp: public void AddSlotList(string aDesc, string aText)
          VB: Public Sub AddSlotList(aDesc As String, aText As String)
        parameters:
        - id: aDesc
          type: System.String
          description: ''
        - id: aText
          type: System.String
          description: ''
      overload: Global.SlotsList.AddSlotList*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SlotsList.ClearList
      commentId: M:Global.SlotsList.ClearList
      language: CSharp
      name:
        CSharp: ClearList()
        VB: ClearList()
      nameWithType:
        CSharp: SlotsList.ClearList()
        VB: SlotsList.ClearList()
      qualifiedName:
        CSharp: SlotsList.ClearList()
        VB: SlotsList.ClearList()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClearList
        path: ''
        startLine: 4879
      syntax:
        content:
          CSharp: public void ClearList()
          VB: Public Sub ClearList
      overload: Global.SlotsList.ClearList*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.SlotTemplate
    commentId: T:Global.SlotTemplate
    language: CSharp
    name:
      CSharp: SlotTemplate
      VB: SlotTemplate
    nameWithType:
      CSharp: SlotTemplate
      VB: SlotTemplate
    qualifiedName:
      CSharp: SlotTemplate
      VB: SlotTemplate
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SlotTemplate
      path: ''
      startLine: 4931
    syntax:
      content:
        CSharp: 'public class SlotTemplate : MonoBehaviour'
        VB: >-
          Public Class SlotTemplate

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SlotTemplate.slotID
      commentId: F:Global.SlotTemplate.slotID
      language: CSharp
      name:
        CSharp: slotID
        VB: slotID
      nameWithType:
        CSharp: SlotTemplate.slotID
        VB: SlotTemplate.slotID
      qualifiedName:
        CSharp: SlotTemplate.slotID
        VB: SlotTemplate.slotID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: slotID
        path: ''
        startLine: 4945
      syntax:
        content:
          CSharp: public int slotID
          VB: Public slotID As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SlotTemplate.SetTitle(System.String)
      commentId: M:Global.SlotTemplate.SetTitle(System.String)
      language: CSharp
      name:
        CSharp: SetTitle(String)
        VB: SetTitle(String)
      nameWithType:
        CSharp: SlotTemplate.SetTitle(String)
        VB: SlotTemplate.SetTitle(String)
      qualifiedName:
        CSharp: SlotTemplate.SetTitle(System.String)
        VB: SlotTemplate.SetTitle(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetTitle
        path: ''
        startLine: 4959
      syntax:
        content:
          CSharp: public void SetTitle(string title)
          VB: Public Sub SetTitle(title As String)
        parameters:
        - id: title
          type: System.String
      overload: Global.SlotTemplate.SetTitle*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SlotTemplate.AddData(System.String,System.String)
      commentId: M:Global.SlotTemplate.AddData(System.String,System.String)
      language: CSharp
      name:
        CSharp: AddData(String, String)
        VB: AddData(String, String)
      nameWithType:
        CSharp: SlotTemplate.AddData(String, String)
        VB: SlotTemplate.AddData(String, String)
      qualifiedName:
        CSharp: SlotTemplate.AddData(System.String, System.String)
        VB: SlotTemplate.AddData(System.String, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddData
        path: ''
        startLine: 4969
      summary: "\nAddData\n"
      example: []
      syntax:
        content:
          CSharp: public void AddData(string desc, string text)
          VB: Public Sub AddData(desc As String, text As String)
        parameters:
        - id: desc
          type: System.String
          description: ''
        - id: text
          type: System.String
          description: ''
      overload: Global.SlotTemplate.AddData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.IDevice
    commentId: T:Global.IDevice
    language: CSharp
    name:
      CSharp: IDevice
      VB: IDevice
    nameWithType:
      CSharp: IDevice
      VB: IDevice
    qualifiedName:
      CSharp: IDevice
      VB: IDevice
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: IDevice
      path: ''
      startLine: 4983
    syntax:
      content:
        CSharp: public interface IDevice
        VB: Public Interface IDevice
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Global.IDevice.Send(DeviceData,System.Int32,SimulationState)
      commentId: M:Global.IDevice.Send(DeviceData,System.Int32,SimulationState)
      language: CSharp
      name:
        CSharp: Send(DeviceData, Int32, SimulationState)
        VB: Send(DeviceData, Int32, SimulationState)
      nameWithType:
        CSharp: IDevice.Send(DeviceData, Int32, SimulationState)
        VB: IDevice.Send(DeviceData, Int32, SimulationState)
      qualifiedName:
        CSharp: IDevice.Send(DeviceData, System.Int32, SimulationState)
        VB: IDevice.Send(DeviceData, System.Int32, SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Send
        path: ''
        startLine: 4986
      syntax:
        content:
          CSharp: void Send(DeviceData aData, int aSlotId, SimulationState aState)
          VB: Sub Send(aData As DeviceData, aSlotId As Integer, aState As SimulationState)
        parameters:
        - id: aData
          type: Global.DeviceData
        - id: aSlotId
          type: System.Int32
        - id: aState
          type: Global.SimulationState
      overload: Global.IDevice.Send*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IDevice.UpdateData(DeviceData,System.Int32)
      commentId: M:Global.IDevice.UpdateData(DeviceData,System.Int32)
      language: CSharp
      name:
        CSharp: UpdateData(DeviceData, Int32)
        VB: UpdateData(DeviceData, Int32)
      nameWithType:
        CSharp: IDevice.UpdateData(DeviceData, Int32)
        VB: IDevice.UpdateData(DeviceData, Int32)
      qualifiedName:
        CSharp: IDevice.UpdateData(DeviceData, System.Int32)
        VB: IDevice.UpdateData(DeviceData, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateData
        path: ''
        startLine: 4989
      syntax:
        content:
          CSharp: void UpdateData(DeviceData aData, int aSlotId)
          VB: Sub UpdateData(aData As DeviceData, aSlotId As Integer)
        parameters:
        - id: aData
          type: Global.DeviceData
        - id: aSlotId
          type: System.Int32
      overload: Global.IDevice.UpdateData*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IDevice.GetDeviceData
      commentId: M:Global.IDevice.GetDeviceData
      language: CSharp
      name:
        CSharp: GetDeviceData()
        VB: GetDeviceData()
      nameWithType:
        CSharp: IDevice.GetDeviceData()
        VB: IDevice.GetDeviceData()
      qualifiedName:
        CSharp: IDevice.GetDeviceData()
        VB: IDevice.GetDeviceData()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetDeviceData
        path: ''
        startLine: 4993
      syntax:
        content:
          CSharp: GenericDeviceData GetDeviceData()
          VB: Function GetDeviceData As GenericDeviceData
        return:
          type: Global.GenericDeviceData
      overload: Global.IDevice.GetDeviceData*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IDevice.GetSlotOutData(System.Int32)
      commentId: M:Global.IDevice.GetSlotOutData(System.Int32)
      language: CSharp
      name:
        CSharp: GetSlotOutData(Int32)
        VB: GetSlotOutData(Int32)
      nameWithType:
        CSharp: IDevice.GetSlotOutData(Int32)
        VB: IDevice.GetSlotOutData(Int32)
      qualifiedName:
        CSharp: IDevice.GetSlotOutData(System.Int32)
        VB: IDevice.GetSlotOutData(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetSlotOutData
        path: ''
        startLine: 4996
      syntax:
        content:
          CSharp: DeviceData GetSlotOutData(int aSlotId)
          VB: Function GetSlotOutData(aSlotId As Integer) As DeviceData
        parameters:
        - id: aSlotId
          type: System.Int32
        return:
          type: Global.DeviceData
      overload: Global.IDevice.GetSlotOutData*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IDevice.GetSlotOutInstanceID(System.Int32)
      commentId: M:Global.IDevice.GetSlotOutInstanceID(System.Int32)
      language: CSharp
      name:
        CSharp: GetSlotOutInstanceID(Int32)
        VB: GetSlotOutInstanceID(Int32)
      nameWithType:
        CSharp: IDevice.GetSlotOutInstanceID(Int32)
        VB: IDevice.GetSlotOutInstanceID(Int32)
      qualifiedName:
        CSharp: IDevice.GetSlotOutInstanceID(System.Int32)
        VB: IDevice.GetSlotOutInstanceID(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetSlotOutInstanceID
        path: ''
        startLine: 4999
      syntax:
        content:
          CSharp: int GetSlotOutInstanceID(int aSlotId)
          VB: Function GetSlotOutInstanceID(aSlotId As Integer) As Integer
        parameters:
        - id: aSlotId
          type: System.Int32
        return:
          type: System.Int32
      overload: Global.IDevice.GetSlotOutInstanceID*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IDevice.GetSlotInInstanceID(System.Int32)
      commentId: M:Global.IDevice.GetSlotInInstanceID(System.Int32)
      language: CSharp
      name:
        CSharp: GetSlotInInstanceID(Int32)
        VB: GetSlotInInstanceID(Int32)
      nameWithType:
        CSharp: IDevice.GetSlotInInstanceID(Int32)
        VB: IDevice.GetSlotInInstanceID(Int32)
      qualifiedName:
        CSharp: IDevice.GetSlotInInstanceID(System.Int32)
        VB: IDevice.GetSlotInInstanceID(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetSlotInInstanceID
        path: ''
        startLine: 5001
      syntax:
        content:
          CSharp: int GetSlotInInstanceID(int aSlotId)
          VB: Function GetSlotInInstanceID(aSlotId As Integer) As Integer
        parameters:
        - id: aSlotId
          type: System.Int32
        return:
          type: System.Int32
      overload: Global.IDevice.GetSlotInInstanceID*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IDevice.GetParellel
      commentId: M:Global.IDevice.GetParellel
      language: CSharp
      name:
        CSharp: GetParellel()
        VB: GetParellel()
      nameWithType:
        CSharp: IDevice.GetParellel()
        VB: IDevice.GetParellel()
      qualifiedName:
        CSharp: IDevice.GetParellel()
        VB: IDevice.GetParellel()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetParellel
        path: ''
        startLine: 5003
      syntax:
        content:
          CSharp: GenericDevice GetParellel()
          VB: Function GetParellel As GenericDevice
        return:
          type: Global.GenericDevice
      overload: Global.IDevice.GetParellel*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IDevice.GetDevice
      commentId: M:Global.IDevice.GetDevice
      language: CSharp
      name:
        CSharp: GetDevice()
        VB: GetDevice()
      nameWithType:
        CSharp: IDevice.GetDevice()
        VB: IDevice.GetDevice()
      qualifiedName:
        CSharp: IDevice.GetDevice()
        VB: IDevice.GetDevice()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetDevice
        path: ''
        startLine: 5005
      syntax:
        content:
          CSharp: GenericDevice GetDevice()
          VB: Function GetDevice As GenericDevice
        return:
          type: Global.GenericDevice
      overload: Global.IDevice.GetDevice*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IDevice.GetPressureLoss
      commentId: M:Global.IDevice.GetPressureLoss
      language: CSharp
      name:
        CSharp: GetPressureLoss()
        VB: GetPressureLoss()
      nameWithType:
        CSharp: IDevice.GetPressureLoss()
        VB: IDevice.GetPressureLoss()
      qualifiedName:
        CSharp: IDevice.GetPressureLoss()
        VB: IDevice.GetPressureLoss()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetPressureLoss
        path: ''
        startLine: 5008
      syntax:
        content:
          CSharp: float GetPressureLoss()
          VB: Function GetPressureLoss As Single
        return:
          type: System.Single
      overload: Global.IDevice.GetPressureLoss*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.IDevice.SetPressureLoss(System.Single)
      commentId: M:Global.IDevice.SetPressureLoss(System.Single)
      language: CSharp
      name:
        CSharp: SetPressureLoss(Single)
        VB: SetPressureLoss(Single)
      nameWithType:
        CSharp: IDevice.SetPressureLoss(Single)
        VB: IDevice.SetPressureLoss(Single)
      qualifiedName:
        CSharp: IDevice.SetPressureLoss(System.Single)
        VB: IDevice.SetPressureLoss(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPressureLoss
        path: ''
        startLine: 5010
      syntax:
        content:
          CSharp: void SetPressureLoss(float aLoss)
          VB: Sub SetPressureLoss(aLoss As Single)
        parameters:
        - id: aLoss
          type: System.Single
      overload: Global.IDevice.SetPressureLoss*
      modifiers:
        CSharp: []
        VB: []
  - id: Global.ConsumerMath
    commentId: T:Global.ConsumerMath
    language: CSharp
    name:
      CSharp: ConsumerMath
      VB: ConsumerMath
    nameWithType:
      CSharp: ConsumerMath
      VB: ConsumerMath
    qualifiedName:
      CSharp: ConsumerMath
      VB: ConsumerMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ConsumerMath
      path: ''
      startLine: 5050
    summary: "\nConsumerMath\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ConsumerMath : DeviceMath'
        VB: >-
          Public Class ConsumerMath

              Inherits DeviceMath
    inheritance:
    - System.Object
    - Global.DeviceMath
    inheritedMembers:
    - Global.DeviceMath.deviceInterface
    - Global.DeviceMath.DeviceInterface
    - Global.DeviceMath.data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ConsumerMath.Data1
      commentId: P:Global.ConsumerMath.Data1
      language: CSharp
      name:
        CSharp: Data1
        VB: Data1
      nameWithType:
        CSharp: ConsumerMath.Data1
        VB: ConsumerMath.Data1
      qualifiedName:
        CSharp: ConsumerMath.Data1
        VB: ConsumerMath.Data1
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data1
        path: ''
        startLine: 5065
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data1 { get; set; }
          VB: Public Property Data1 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.ConsumerMath.Data1*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.ConsumerMath.Compute(SimulationState)
      commentId: M:Global.ConsumerMath.Compute(SimulationState)
      language: CSharp
      name:
        CSharp: Compute(SimulationState)
        VB: Compute(SimulationState)
      nameWithType:
        CSharp: ConsumerMath.Compute(SimulationState)
        VB: ConsumerMath.Compute(SimulationState)
      qualifiedName:
        CSharp: ConsumerMath.Compute(SimulationState)
        VB: ConsumerMath.Compute(SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Compute
        path: ''
        startLine: 5081
      summary: "\nCompute()\n"
      example: []
      syntax:
        content:
          CSharp: public override void Compute(SimulationState aState = SimulationState.EPressureLoss)
          VB: Public Overrides Sub Compute(aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: aState
          type: Global.SimulationState
      overload: Global.ConsumerMath.Compute*
      overridden: Global.DeviceMath.Compute(SimulationState)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.DeviceMath
    commentId: T:Global.DeviceMath
    language: CSharp
    name:
      CSharp: DeviceMath
      VB: DeviceMath
    nameWithType:
      CSharp: DeviceMath
      VB: DeviceMath
    qualifiedName:
      CSharp: DeviceMath
      VB: DeviceMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: DeviceMath
      path: ''
      startLine: 5160
    summary: "\nDeviceMath\n"
    example: []
    syntax:
      content:
        CSharp: public class DeviceMath
        VB: Public Class DeviceMath
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.DeviceMath.deviceInterface
      commentId: F:Global.DeviceMath.deviceInterface
      language: CSharp
      name:
        CSharp: deviceInterface
        VB: deviceInterface
      nameWithType:
        CSharp: DeviceMath.deviceInterface
        VB: DeviceMath.deviceInterface
      qualifiedName:
        CSharp: DeviceMath.deviceInterface
        VB: DeviceMath.deviceInterface
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: deviceInterface
        path: ''
        startLine: 5169
      summary: "\ndeviceInterface\n"
      example: []
      syntax:
        content:
          CSharp: protected IDevice deviceInterface
          VB: Protected deviceInterface As IDevice
        return:
          type: Global.IDevice
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.DeviceMath.DeviceInterface
      commentId: P:Global.DeviceMath.DeviceInterface
      language: CSharp
      name:
        CSharp: DeviceInterface
        VB: DeviceInterface
      nameWithType:
        CSharp: DeviceMath.DeviceInterface
        VB: DeviceMath.DeviceInterface
      qualifiedName:
        CSharp: DeviceMath.DeviceInterface
        VB: DeviceMath.DeviceInterface
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeviceInterface
        path: ''
        startLine: 5171
      syntax:
        content:
          CSharp: public IDevice DeviceInterface { set; }
          VB: Public WriteOnly Property DeviceInterface As IDevice
        parameters: []
        return:
          type: Global.IDevice
      overload: Global.DeviceMath.DeviceInterface*
      modifiers:
        CSharp:
        - public
        - set
        VB:
        - Public
        - WriteOnly
    - id: Global.DeviceMath.data
      commentId: F:Global.DeviceMath.data
      language: CSharp
      name:
        CSharp: data
        VB: data
      nameWithType:
        CSharp: DeviceMath.data
        VB: DeviceMath.data
      qualifiedName:
        CSharp: DeviceMath.data
        VB: DeviceMath.data
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: data
        path: ''
        startLine: 5186
      summary: "\ndata\n"
      example: []
      syntax:
        content:
          CSharp: protected List<DeviceData> data
          VB: Protected data As List(Of DeviceData)
        return:
          type: System.Collections.Generic.List{DeviceData}
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.DeviceMath.Compute(SimulationState)
      commentId: M:Global.DeviceMath.Compute(SimulationState)
      language: CSharp
      name:
        CSharp: Compute(SimulationState)
        VB: Compute(SimulationState)
      nameWithType:
        CSharp: DeviceMath.Compute(SimulationState)
        VB: DeviceMath.Compute(SimulationState)
      qualifiedName:
        CSharp: DeviceMath.Compute(SimulationState)
        VB: DeviceMath.Compute(SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Compute
        path: ''
        startLine: 5204
      summary: "\nCompute\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void Compute(SimulationState state = SimulationState.EPressureLoss)
          VB: Public Overridable Sub Compute(state As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: state
          type: Global.SimulationState
          description: ''
      overload: Global.DeviceMath.Compute*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
  - id: Global.HeatExchangerMath
    commentId: T:Global.HeatExchangerMath
    language: CSharp
    name:
      CSharp: HeatExchangerMath
      VB: HeatExchangerMath
    nameWithType:
      CSharp: HeatExchangerMath
      VB: HeatExchangerMath
    qualifiedName:
      CSharp: HeatExchangerMath
      VB: HeatExchangerMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HeatExchangerMath
      path: ''
      startLine: 5253
    summary: "\nFlowRateMath\n"
    example: []
    syntax:
      content:
        CSharp: 'public class HeatExchangerMath : DeviceMath'
        VB: >-
          Public Class HeatExchangerMath

              Inherits DeviceMath
    inheritance:
    - System.Object
    - Global.DeviceMath
    inheritedMembers:
    - Global.DeviceMath.deviceInterface
    - Global.DeviceMath.DeviceInterface
    - Global.DeviceMath.data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.HeatExchangerMath.Data1
      commentId: P:Global.HeatExchangerMath.Data1
      language: CSharp
      name:
        CSharp: Data1
        VB: Data1
      nameWithType:
        CSharp: HeatExchangerMath.Data1
        VB: HeatExchangerMath.Data1
      qualifiedName:
        CSharp: HeatExchangerMath.Data1
        VB: HeatExchangerMath.Data1
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data1
        path: ''
        startLine: 5274
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data1 { get; set; }
          VB: Public Property Data1 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.HeatExchangerMath.Data1*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.HeatExchangerMath.Data2
      commentId: P:Global.HeatExchangerMath.Data2
      language: CSharp
      name:
        CSharp: Data2
        VB: Data2
      nameWithType:
        CSharp: HeatExchangerMath.Data2
        VB: HeatExchangerMath.Data2
      qualifiedName:
        CSharp: HeatExchangerMath.Data2
        VB: HeatExchangerMath.Data2
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data2
        path: ''
        startLine: 5286
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data2 { get; set; }
          VB: Public Property Data2 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.HeatExchangerMath.Data2*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.HeatExchangerMath.Compute(SimulationState)
      commentId: M:Global.HeatExchangerMath.Compute(SimulationState)
      language: CSharp
      name:
        CSharp: Compute(SimulationState)
        VB: Compute(SimulationState)
      nameWithType:
        CSharp: HeatExchangerMath.Compute(SimulationState)
        VB: HeatExchangerMath.Compute(SimulationState)
      qualifiedName:
        CSharp: HeatExchangerMath.Compute(SimulationState)
        VB: HeatExchangerMath.Compute(SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Compute
        path: ''
        startLine: 5305
      summary: "\nCompute()\n"
      example: []
      syntax:
        content:
          CSharp: public override void Compute(SimulationState aState = SimulationState.EPressureLoss)
          VB: Public Overrides Sub Compute(aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: aState
          type: Global.SimulationState
      overload: Global.HeatExchangerMath.Compute*
      overridden: Global.DeviceMath.Compute(SimulationState)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.HeatExchangerNoMath
    commentId: T:Global.HeatExchangerNoMath
    language: CSharp
    name:
      CSharp: HeatExchangerNoMath
      VB: HeatExchangerNoMath
    nameWithType:
      CSharp: HeatExchangerNoMath
      VB: HeatExchangerNoMath
    qualifiedName:
      CSharp: HeatExchangerNoMath
      VB: HeatExchangerNoMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HeatExchangerNoMath
      path: ''
      startLine: 5449
    summary: "\nFlowRateMath\n"
    example: []
    syntax:
      content:
        CSharp: 'public class HeatExchangerNoMath : DeviceMath'
        VB: >-
          Public Class HeatExchangerNoMath

              Inherits DeviceMath
    inheritance:
    - System.Object
    - Global.DeviceMath
    inheritedMembers:
    - Global.DeviceMath.deviceInterface
    - Global.DeviceMath.DeviceInterface
    - Global.DeviceMath.data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.HeatExchangerNoMath.Data1
      commentId: P:Global.HeatExchangerNoMath.Data1
      language: CSharp
      name:
        CSharp: Data1
        VB: Data1
      nameWithType:
        CSharp: HeatExchangerNoMath.Data1
        VB: HeatExchangerNoMath.Data1
      qualifiedName:
        CSharp: HeatExchangerNoMath.Data1
        VB: HeatExchangerNoMath.Data1
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data1
        path: ''
        startLine: 5470
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data1 { get; set; }
          VB: Public Property Data1 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.HeatExchangerNoMath.Data1*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.HeatExchangerNoMath.Data2
      commentId: P:Global.HeatExchangerNoMath.Data2
      language: CSharp
      name:
        CSharp: Data2
        VB: Data2
      nameWithType:
        CSharp: HeatExchangerNoMath.Data2
        VB: HeatExchangerNoMath.Data2
      qualifiedName:
        CSharp: HeatExchangerNoMath.Data2
        VB: HeatExchangerNoMath.Data2
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data2
        path: ''
        startLine: 5482
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data2 { get; set; }
          VB: Public Property Data2 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.HeatExchangerNoMath.Data2*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.HeatExchangerNoMath.Compute(SimulationState)
      commentId: M:Global.HeatExchangerNoMath.Compute(SimulationState)
      language: CSharp
      name:
        CSharp: Compute(SimulationState)
        VB: Compute(SimulationState)
      nameWithType:
        CSharp: HeatExchangerNoMath.Compute(SimulationState)
        VB: HeatExchangerNoMath.Compute(SimulationState)
      qualifiedName:
        CSharp: HeatExchangerNoMath.Compute(SimulationState)
        VB: HeatExchangerNoMath.Compute(SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Compute
        path: ''
        startLine: 5501
      summary: "\nCompute()\n"
      example: []
      syntax:
        content:
          CSharp: public override void Compute(SimulationState aState = SimulationState.EPressureLoss)
          VB: Public Overrides Sub Compute(aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: aState
          type: Global.SimulationState
      overload: Global.HeatExchangerNoMath.Compute*
      overridden: Global.DeviceMath.Compute(SimulationState)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.HeatMath
    commentId: T:Global.HeatMath
    language: CSharp
    name:
      CSharp: HeatMath
      VB: HeatMath
    nameWithType:
      CSharp: HeatMath
      VB: HeatMath
    qualifiedName:
      CSharp: HeatMath
      VB: HeatMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HeatMath
      path: ''
      startLine: 5577
    summary: "\nFlowRateMath\n"
    example: []
    syntax:
      content:
        CSharp: 'public class HeatMath : DeviceMath'
        VB: >-
          Public Class HeatMath

              Inherits DeviceMath
    inheritance:
    - System.Object
    - Global.DeviceMath
    inheritedMembers:
    - Global.DeviceMath.deviceInterface
    - Global.DeviceMath.DeviceInterface
    - Global.DeviceMath.data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.HeatMath.Data1
      commentId: P:Global.HeatMath.Data1
      language: CSharp
      name:
        CSharp: Data1
        VB: Data1
      nameWithType:
        CSharp: HeatMath.Data1
        VB: HeatMath.Data1
      qualifiedName:
        CSharp: HeatMath.Data1
        VB: HeatMath.Data1
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data1
        path: ''
        startLine: 5591
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data1 { get; set; }
          VB: Public Property Data1 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.HeatMath.Data1*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.HeatMath.Compute(SimulationState)
      commentId: M:Global.HeatMath.Compute(SimulationState)
      language: CSharp
      name:
        CSharp: Compute(SimulationState)
        VB: Compute(SimulationState)
      nameWithType:
        CSharp: HeatMath.Compute(SimulationState)
        VB: HeatMath.Compute(SimulationState)
      qualifiedName:
        CSharp: HeatMath.Compute(SimulationState)
        VB: HeatMath.Compute(SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Compute
        path: ''
        startLine: 5697
      summary: "\nCompute\n"
      example: []
      syntax:
        content:
          CSharp: public override void Compute(SimulationState state = SimulationState.EPressureLoss)
          VB: Public Overrides Sub Compute(state As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: state
          type: Global.SimulationState
          description: ''
      overload: Global.HeatMath.Compute*
      overridden: Global.DeviceMath.Compute(SimulationState)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.PipeMath
    commentId: T:Global.PipeMath
    language: CSharp
    name:
      CSharp: PipeMath
      VB: PipeMath
    nameWithType:
      CSharp: PipeMath
      VB: PipeMath
    qualifiedName:
      CSharp: PipeMath
      VB: PipeMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PipeMath
      path: ''
      startLine: 5833
    summary: "\nFlowRateMath\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PipeMath : DeviceMath'
        VB: >-
          Public Class PipeMath

              Inherits DeviceMath
    inheritance:
    - System.Object
    - Global.DeviceMath
    inheritedMembers:
    - Global.DeviceMath.deviceInterface
    - Global.DeviceMath.DeviceInterface
    - Global.DeviceMath.data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.PipeMath.Data1
      commentId: P:Global.PipeMath.Data1
      language: CSharp
      name:
        CSharp: Data1
        VB: Data1
      nameWithType:
        CSharp: PipeMath.Data1
        VB: PipeMath.Data1
      qualifiedName:
        CSharp: PipeMath.Data1
        VB: PipeMath.Data1
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data1
        path: ''
        startLine: 5850
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data1 { get; set; }
          VB: Public Property Data1 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.PipeMath.Data1*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.PipeMath.Compute(SimulationState)
      commentId: M:Global.PipeMath.Compute(SimulationState)
      language: CSharp
      name:
        CSharp: Compute(SimulationState)
        VB: Compute(SimulationState)
      nameWithType:
        CSharp: PipeMath.Compute(SimulationState)
        VB: PipeMath.Compute(SimulationState)
      qualifiedName:
        CSharp: PipeMath.Compute(SimulationState)
        VB: PipeMath.Compute(SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Compute
        path: ''
        startLine: 5866
      summary: "\nCompute()\n"
      example: []
      syntax:
        content:
          CSharp: public override void Compute(SimulationState aState = SimulationState.EPressureLoss)
          VB: Public Overrides Sub Compute(aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: aState
          type: Global.SimulationState
      overload: Global.PipeMath.Compute*
      overridden: Global.DeviceMath.Compute(SimulationState)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.PipeTMath
    commentId: T:Global.PipeTMath
    language: CSharp
    name:
      CSharp: PipeTMath
      VB: PipeTMath
    nameWithType:
      CSharp: PipeTMath
      VB: PipeTMath
    qualifiedName:
      CSharp: PipeTMath
      VB: PipeTMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PipeTMath
      path: ''
      startLine: 5991
    summary: "\nFlowRateMath\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PipeTMath : DeviceMath'
        VB: >-
          Public Class PipeTMath

              Inherits DeviceMath
    inheritance:
    - System.Object
    - Global.DeviceMath
    inheritedMembers:
    - Global.DeviceMath.deviceInterface
    - Global.DeviceMath.DeviceInterface
    - Global.DeviceMath.data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.PipeTMath.Data1
      commentId: P:Global.PipeTMath.Data1
      language: CSharp
      name:
        CSharp: Data1
        VB: Data1
      nameWithType:
        CSharp: PipeTMath.Data1
        VB: PipeTMath.Data1
      qualifiedName:
        CSharp: PipeTMath.Data1
        VB: PipeTMath.Data1
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data1
        path: ''
        startLine: 6010
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data1 { get; set; }
          VB: Public Property Data1 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.PipeTMath.Data1*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.PipeTMath.Compute(SimulationState)
      commentId: M:Global.PipeTMath.Compute(SimulationState)
      language: CSharp
      name:
        CSharp: Compute(SimulationState)
        VB: Compute(SimulationState)
      nameWithType:
        CSharp: PipeTMath.Compute(SimulationState)
        VB: PipeTMath.Compute(SimulationState)
      qualifiedName:
        CSharp: PipeTMath.Compute(SimulationState)
        VB: PipeTMath.Compute(SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Compute
        path: ''
        startLine: 6029
      summary: "\nCompute()\n"
      example: []
      syntax:
        content:
          CSharp: public override void Compute(SimulationState aState = SimulationState.EPressureLoss)
          VB: Public Overrides Sub Compute(aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: aState
          type: Global.SimulationState
      overload: Global.PipeTMath.Compute*
      overridden: Global.DeviceMath.Compute(SimulationState)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.PipeTMath2In1
    commentId: T:Global.PipeTMath2In1
    language: CSharp
    name:
      CSharp: PipeTMath2In1
      VB: PipeTMath2In1
    nameWithType:
      CSharp: PipeTMath2In1
      VB: PipeTMath2In1
    qualifiedName:
      CSharp: PipeTMath2In1
      VB: PipeTMath2In1
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PipeTMath2In1
      path: ''
      startLine: 6176
    summary: "\nFlowRateMath\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PipeTMath2In1 : DeviceMath'
        VB: >-
          Public Class PipeTMath2In1

              Inherits DeviceMath
    inheritance:
    - System.Object
    - Global.DeviceMath
    inheritedMembers:
    - Global.DeviceMath.deviceInterface
    - Global.DeviceMath.DeviceInterface
    - Global.DeviceMath.data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.PipeTMath2In1.Data1
      commentId: P:Global.PipeTMath2In1.Data1
      language: CSharp
      name:
        CSharp: Data1
        VB: Data1
      nameWithType:
        CSharp: PipeTMath2In1.Data1
        VB: PipeTMath2In1.Data1
      qualifiedName:
        CSharp: PipeTMath2In1.Data1
        VB: PipeTMath2In1.Data1
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data1
        path: ''
        startLine: 6195
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data1 { get; set; }
          VB: Public Property Data1 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.PipeTMath2In1.Data1*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.PipeTMath2In1.Data2
      commentId: P:Global.PipeTMath2In1.Data2
      language: CSharp
      name:
        CSharp: Data2
        VB: Data2
      nameWithType:
        CSharp: PipeTMath2In1.Data2
        VB: PipeTMath2In1.Data2
      qualifiedName:
        CSharp: PipeTMath2In1.Data2
        VB: PipeTMath2In1.Data2
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data2
        path: ''
        startLine: 6205
      syntax:
        content:
          CSharp: public DeviceData Data2 { get; set; }
          VB: Public Property Data2 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.PipeTMath2In1.Data2*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.PipeTMath2In1.Compute(SimulationState)
      commentId: M:Global.PipeTMath2In1.Compute(SimulationState)
      language: CSharp
      name:
        CSharp: Compute(SimulationState)
        VB: Compute(SimulationState)
      nameWithType:
        CSharp: PipeTMath2In1.Compute(SimulationState)
        VB: PipeTMath2In1.Compute(SimulationState)
      qualifiedName:
        CSharp: PipeTMath2In1.Compute(SimulationState)
        VB: PipeTMath2In1.Compute(SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Compute
        path: ''
        startLine: 6226
      summary: "\nCompute()\n"
      example: []
      syntax:
        content:
          CSharp: public override void Compute(SimulationState aState = SimulationState.EPressureLoss)
          VB: Public Overrides Sub Compute(aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: aState
          type: Global.SimulationState
      overload: Global.PipeTMath2In1.Compute*
      overridden: Global.DeviceMath.Compute(SimulationState)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.PumpMath
    commentId: T:Global.PumpMath
    language: CSharp
    name:
      CSharp: PumpMath
      VB: PumpMath
    nameWithType:
      CSharp: PumpMath
      VB: PumpMath
    qualifiedName:
      CSharp: PumpMath
      VB: PumpMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PumpMath
      path: ''
      startLine: 6421
    summary: "\nFlowRateMath\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PumpMath : DeviceMath'
        VB: >-
          Public Class PumpMath

              Inherits DeviceMath
    inheritance:
    - System.Object
    - Global.DeviceMath
    inheritedMembers:
    - Global.DeviceMath.deviceInterface
    - Global.DeviceMath.DeviceInterface
    - Global.DeviceMath.data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.PumpMath.Data1
      commentId: P:Global.PumpMath.Data1
      language: CSharp
      name:
        CSharp: Data1
        VB: Data1
      nameWithType:
        CSharp: PumpMath.Data1
        VB: PumpMath.Data1
      qualifiedName:
        CSharp: PumpMath.Data1
        VB: PumpMath.Data1
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data1
        path: ''
        startLine: 6435
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data1 { get; set; }
          VB: Public Property Data1 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.PumpMath.Data1*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.PumpMath.Compute(SimulationState)
      commentId: M:Global.PumpMath.Compute(SimulationState)
      language: CSharp
      name:
        CSharp: Compute(SimulationState)
        VB: Compute(SimulationState)
      nameWithType:
        CSharp: PumpMath.Compute(SimulationState)
        VB: PumpMath.Compute(SimulationState)
      qualifiedName:
        CSharp: PumpMath.Compute(SimulationState)
        VB: PumpMath.Compute(SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Compute
        path: ''
        startLine: 6451
      summary: "\nCompute()\n"
      example: []
      syntax:
        content:
          CSharp: public override void Compute(SimulationState aState = SimulationState.EPressureLoss)
          VB: Public Overrides Sub Compute(aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: aState
          type: Global.SimulationState
      overload: Global.PumpMath.Compute*
      overridden: Global.DeviceMath.Compute(SimulationState)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.SimMath
    commentId: T:Global.SimMath
    language: CSharp
    name:
      CSharp: SimMath
      VB: SimMath
    nameWithType:
      CSharp: SimMath
      VB: SimMath
    qualifiedName:
      CSharp: SimMath
      VB: SimMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SimMath
      path: ''
      startLine: 6564
    summary: "\nSimMath\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SimMath : MonoBehaviour'
        VB: >-
          Public Class SimMath

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SimMath.SetData(DeviceData,System.Int32,SimulationState)
      commentId: M:Global.SimMath.SetData(DeviceData,System.Int32,SimulationState)
      language: CSharp
      name:
        CSharp: SetData(DeviceData, Int32, SimulationState)
        VB: SetData(DeviceData, Int32, SimulationState)
      nameWithType:
        CSharp: SimMath.SetData(DeviceData, Int32, SimulationState)
        VB: SimMath.SetData(DeviceData, Int32, SimulationState)
      qualifiedName:
        CSharp: SimMath.SetData(DeviceData, System.Int32, SimulationState)
        VB: SimMath.SetData(DeviceData, System.Int32, SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetData
        path: ''
        startLine: 6642
      summary: "\nSetData\n"
      example: []
      syntax:
        content:
          CSharp: public void SetData(DeviceData data, int slotID = 1, SimulationState aState = SimulationState.EPressureLoss)
          VB: Public Sub SetData(data As DeviceData, slotID As Integer = 1, aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: data
          type: Global.DeviceData
          description: ''
        - id: slotID
          type: System.Int32
          description: ''
        - id: aState
          type: Global.SimulationState
      overload: Global.SimMath.SetData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.ValveMath
    commentId: T:Global.ValveMath
    language: CSharp
    name:
      CSharp: ValveMath
      VB: ValveMath
    nameWithType:
      CSharp: ValveMath
      VB: ValveMath
    qualifiedName:
      CSharp: ValveMath
      VB: ValveMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ValveMath
      path: ''
      startLine: 6696
    summary: "\nFlowRateMath\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ValveMath : DeviceMath'
        VB: >-
          Public Class ValveMath

              Inherits DeviceMath
    inheritance:
    - System.Object
    - Global.DeviceMath
    inheritedMembers:
    - Global.DeviceMath.deviceInterface
    - Global.DeviceMath.DeviceInterface
    - Global.DeviceMath.data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ValveMath.Data1
      commentId: P:Global.ValveMath.Data1
      language: CSharp
      name:
        CSharp: Data1
        VB: Data1
      nameWithType:
        CSharp: ValveMath.Data1
        VB: ValveMath.Data1
      qualifiedName:
        CSharp: ValveMath.Data1
        VB: ValveMath.Data1
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Data1
        path: ''
        startLine: 6712
      summary: "\nDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceData Data1 { get; set; }
          VB: Public Property Data1 As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.ValveMath.Data1*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.ValveMath.Compute(SimulationState)
      commentId: M:Global.ValveMath.Compute(SimulationState)
      language: CSharp
      name:
        CSharp: Compute(SimulationState)
        VB: Compute(SimulationState)
      nameWithType:
        CSharp: ValveMath.Compute(SimulationState)
        VB: ValveMath.Compute(SimulationState)
      qualifiedName:
        CSharp: ValveMath.Compute(SimulationState)
        VB: ValveMath.Compute(SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Compute
        path: ''
        startLine: 6729
      summary: "\nCompute()\n"
      example: []
      syntax:
        content:
          CSharp: public override void Compute(SimulationState aState = SimulationState.EPressureLoss)
          VB: Public Overrides Sub Compute(aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: aState
          type: Global.SimulationState
      overload: Global.ValveMath.Compute*
      overridden: Global.DeviceMath.Compute(SimulationState)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.RigidbodyFPSController
    commentId: T:Global.RigidbodyFPSController
    language: CSharp
    name:
      CSharp: RigidbodyFPSController
      VB: RigidbodyFPSController
    nameWithType:
      CSharp: RigidbodyFPSController
      VB: RigidbodyFPSController
    qualifiedName:
      CSharp: RigidbodyFPSController
      VB: RigidbodyFPSController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: RigidbodyFPSController
      path: ''
      startLine: 6773
    syntax:
      content:
        CSharp: 'public class RigidbodyFPSController : MonoBehaviour'
        VB: >-
          Public Class RigidbodyFPSController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.RigidbodyFPSController.speed
      commentId: F:Global.RigidbodyFPSController.speed
      language: CSharp
      name:
        CSharp: speed
        VB: speed
      nameWithType:
        CSharp: RigidbodyFPSController.speed
        VB: RigidbodyFPSController.speed
      qualifiedName:
        CSharp: RigidbodyFPSController.speed
        VB: RigidbodyFPSController.speed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: speed
        path: ''
        startLine: 6775
      syntax:
        content:
          CSharp: public float speed
          VB: Public speed As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.RigidbodyFPSController.gravity
      commentId: F:Global.RigidbodyFPSController.gravity
      language: CSharp
      name:
        CSharp: gravity
        VB: gravity
      nameWithType:
        CSharp: RigidbodyFPSController.gravity
        VB: RigidbodyFPSController.gravity
      qualifiedName:
        CSharp: RigidbodyFPSController.gravity
        VB: RigidbodyFPSController.gravity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: gravity
        path: ''
        startLine: 6776
      syntax:
        content:
          CSharp: public float gravity
          VB: Public gravity As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.RigidbodyFPSController.maxVelocityChange
      commentId: F:Global.RigidbodyFPSController.maxVelocityChange
      language: CSharp
      name:
        CSharp: maxVelocityChange
        VB: maxVelocityChange
      nameWithType:
        CSharp: RigidbodyFPSController.maxVelocityChange
        VB: RigidbodyFPSController.maxVelocityChange
      qualifiedName:
        CSharp: RigidbodyFPSController.maxVelocityChange
        VB: RigidbodyFPSController.maxVelocityChange
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: maxVelocityChange
        path: ''
        startLine: 6777
      syntax:
        content:
          CSharp: public float maxVelocityChange
          VB: Public maxVelocityChange As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.RigidbodyFPSController.canJump
      commentId: F:Global.RigidbodyFPSController.canJump
      language: CSharp
      name:
        CSharp: canJump
        VB: canJump
      nameWithType:
        CSharp: RigidbodyFPSController.canJump
        VB: RigidbodyFPSController.canJump
      qualifiedName:
        CSharp: RigidbodyFPSController.canJump
        VB: RigidbodyFPSController.canJump
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: canJump
        path: ''
        startLine: 6778
      syntax:
        content:
          CSharp: public bool canJump
          VB: Public canJump As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.RigidbodyFPSController.jumpHeight
      commentId: F:Global.RigidbodyFPSController.jumpHeight
      language: CSharp
      name:
        CSharp: jumpHeight
        VB: jumpHeight
      nameWithType:
        CSharp: RigidbodyFPSController.jumpHeight
        VB: RigidbodyFPSController.jumpHeight
      qualifiedName:
        CSharp: RigidbodyFPSController.jumpHeight
        VB: RigidbodyFPSController.jumpHeight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: jumpHeight
        path: ''
        startLine: 6779
      syntax:
        content:
          CSharp: public float jumpHeight
          VB: Public jumpHeight As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.GeneralPID
    commentId: T:Global.GeneralPID
    language: CSharp
    name:
      CSharp: GeneralPID
      VB: GeneralPID
    nameWithType:
      CSharp: GeneralPID
      VB: GeneralPID
    qualifiedName:
      CSharp: GeneralPID
      VB: GeneralPID
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GeneralPID
      path: ''
      startLine: 6831
    syntax:
      content:
        CSharp: 'public class GeneralPID : MonoBehaviour'
        VB: >-
          Public Class GeneralPID

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GeneralPID.device
      commentId: F:Global.GeneralPID.device
      language: CSharp
      name:
        CSharp: device
        VB: device
      nameWithType:
        CSharp: GeneralPID.device
        VB: GeneralPID.device
      qualifiedName:
        CSharp: GeneralPID.device
        VB: GeneralPID.device
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: device
        path: ''
        startLine: 6833
      syntax:
        content:
          CSharp: public SlotOut device
          VB: Public device As SlotOut
        return:
          type: Global.SlotOut
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GeneralPID.Start
      commentId: M:Global.GeneralPID.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: GeneralPID.Start()
        VB: GeneralPID.Start()
      qualifiedName:
        CSharp: GeneralPID.Start()
        VB: GeneralPID.Start()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Start
        path: ''
        startLine: 6835
      syntax:
        content:
          CSharp: public void Start()
          VB: Public Sub Start
      overload: Global.GeneralPID.Start*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GeneralPID.DoPID(DeviceData)
      commentId: M:Global.GeneralPID.DoPID(DeviceData)
      language: CSharp
      name:
        CSharp: DoPID(DeviceData)
        VB: DoPID(DeviceData)
      nameWithType:
        CSharp: GeneralPID.DoPID(DeviceData)
        VB: GeneralPID.DoPID(DeviceData)
      qualifiedName:
        CSharp: GeneralPID.DoPID(DeviceData)
        VB: GeneralPID.DoPID(DeviceData)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DoPID
        path: ''
        startLine: 6839
      syntax:
        content:
          CSharp: public virtual void DoPID(DeviceData lastDeviceData)
          VB: Public Overridable Sub DoPID(lastDeviceData As DeviceData)
        parameters:
        - id: lastDeviceData
          type: Global.DeviceData
      overload: Global.GeneralPID.DoPID*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
  - id: Global.ValvePID
    commentId: T:Global.ValvePID
    language: CSharp
    name:
      CSharp: ValvePID
      VB: ValvePID
    nameWithType:
      CSharp: ValvePID
      VB: ValvePID
    qualifiedName:
      CSharp: ValvePID
      VB: ValvePID
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ValvePID
      path: ''
      startLine: 6848
    syntax:
      content:
        CSharp: 'public class ValvePID : GeneralPID'
        VB: >-
          Public Class ValvePID

              Inherits GeneralPID
    inheritance:
    - System.Object
    - Global.GeneralPID
    inheritedMembers:
    - Global.GeneralPID.device
    - Global.GeneralPID.Start
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ValvePID.valve
      commentId: F:Global.ValvePID.valve
      language: CSharp
      name:
        CSharp: valve
        VB: valve
      nameWithType:
        CSharp: ValvePID.valve
        VB: ValvePID.valve
      qualifiedName:
        CSharp: ValvePID.valve
        VB: ValvePID.valve
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: valve
        path: ''
        startLine: 6850
      syntax:
        content:
          CSharp: public GenericValve valve
          VB: Public valve As GenericValve
        return:
          type: Global.GenericValve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ValvePID.targetTemp
      commentId: F:Global.ValvePID.targetTemp
      language: CSharp
      name:
        CSharp: targetTemp
        VB: targetTemp
      nameWithType:
        CSharp: ValvePID.targetTemp
        VB: ValvePID.targetTemp
      qualifiedName:
        CSharp: ValvePID.targetTemp
        VB: ValvePID.targetTemp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: targetTemp
        path: ''
        startLine: 6851
      syntax:
        content:
          CSharp: public float targetTemp
          VB: Public targetTemp As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ValvePID.DoPID(DeviceData)
      commentId: M:Global.ValvePID.DoPID(DeviceData)
      language: CSharp
      name:
        CSharp: DoPID(DeviceData)
        VB: DoPID(DeviceData)
      nameWithType:
        CSharp: ValvePID.DoPID(DeviceData)
        VB: ValvePID.DoPID(DeviceData)
      qualifiedName:
        CSharp: ValvePID.DoPID(DeviceData)
        VB: ValvePID.DoPID(DeviceData)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DoPID
        path: ''
        startLine: 6853
      syntax:
        content:
          CSharp: public override void DoPID(DeviceData lastDeviceData)
          VB: Public Overrides Sub DoPID(lastDeviceData As DeviceData)
        parameters:
        - id: lastDeviceData
          type: Global.DeviceData
      overload: Global.ValvePID.DoPID*
      overridden: Global.GeneralPID.DoPID(DeviceData)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.SimulationState
    commentId: T:Global.SimulationState
    language: CSharp
    name:
      CSharp: SimulationState
      VB: SimulationState
    nameWithType:
      CSharp: SimulationState
      VB: SimulationState
    qualifiedName:
      CSharp: SimulationState
      VB: SimulationState
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SimulationState
      path: ''
      startLine: 6902
    summary: "\nSimulationState.\n"
    example: []
    syntax:
      content:
        CSharp: public enum SimulationState
        VB: Public Enum SimulationState
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Global.SimulationState.EPreSimulation
      commentId: F:Global.SimulationState.EPreSimulation
      language: CSharp
      name:
        CSharp: EPreSimulation
        VB: EPreSimulation
      nameWithType:
        CSharp: SimulationState.EPreSimulation
        VB: SimulationState.EPreSimulation
      qualifiedName:
        CSharp: SimulationState.EPreSimulation
        VB: SimulationState.EPreSimulation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EPreSimulation
        path: ''
        startLine: 6903
      syntax:
        content:
          CSharp: EPreSimulation = 0
          VB: EPreSimulation = 0
        return:
          type: Global.SimulationState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.SimulationState.EPressureLoss
      commentId: F:Global.SimulationState.EPressureLoss
      language: CSharp
      name:
        CSharp: EPressureLoss
        VB: EPressureLoss
      nameWithType:
        CSharp: SimulationState.EPressureLoss
        VB: SimulationState.EPressureLoss
      qualifiedName:
        CSharp: SimulationState.EPressureLoss
        VB: SimulationState.EPressureLoss
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EPressureLoss
        path: ''
        startLine: 6904
      syntax:
        content:
          CSharp: EPressureLoss = 1
          VB: EPressureLoss = 1
        return:
          type: Global.SimulationState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.SimulationState.EPumpRound
      commentId: F:Global.SimulationState.EPumpRound
      language: CSharp
      name:
        CSharp: EPumpRound
        VB: EPumpRound
      nameWithType:
        CSharp: SimulationState.EPumpRound
        VB: SimulationState.EPumpRound
      qualifiedName:
        CSharp: SimulationState.EPumpRound
        VB: SimulationState.EPumpRound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EPumpRound
        path: ''
        startLine: 6905
      syntax:
        content:
          CSharp: EPumpRound = 2
          VB: EPumpRound = 2
        return:
          type: Global.SimulationState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.SimulationState.EParallel
      commentId: F:Global.SimulationState.EParallel
      language: CSharp
      name:
        CSharp: EParallel
        VB: EParallel
      nameWithType:
        CSharp: SimulationState.EParallel
        VB: SimulationState.EParallel
      qualifiedName:
        CSharp: SimulationState.EParallel
        VB: SimulationState.EParallel
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EParallel
        path: ''
        startLine: 6906
      syntax:
        content:
          CSharp: EParallel = 3
          VB: EParallel = 3
        return:
          type: Global.SimulationState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Global.CircuitData
    commentId: T:Global.CircuitData
    language: CSharp
    name:
      CSharp: CircuitData
      VB: CircuitData
    nameWithType:
      CSharp: CircuitData
      VB: CircuitData
    qualifiedName:
      CSharp: CircuitData
      VB: CircuitData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: CircuitData
      path: ''
      startLine: 6912
    summary: "\nCircuitData\n"
    example: []
    syntax:
      content:
        CSharp: public class CircuitData
        VB: Public Class CircuitData
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.CircuitData.PressureLost
      commentId: P:Global.CircuitData.PressureLost
      language: CSharp
      name:
        CSharp: PressureLost
        VB: PressureLost
      nameWithType:
        CSharp: CircuitData.PressureLost
        VB: CircuitData.PressureLost
      qualifiedName:
        CSharp: CircuitData.PressureLost
        VB: CircuitData.PressureLost
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PressureLost
        path: ''
        startLine: 6922
      syntax:
        content:
          CSharp: public float PressureLost { get; set; }
          VB: Public Property PressureLost As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.CircuitData.PressureLost*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Global.SubFlowData
    commentId: T:Global.SubFlowData
    language: CSharp
    name:
      CSharp: SubFlowData
      VB: SubFlowData
    nameWithType:
      CSharp: SubFlowData
      VB: SubFlowData
    qualifiedName:
      CSharp: SubFlowData
      VB: SubFlowData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SubFlowData
      path: ''
      startLine: 6958
    summary: "\nSubFlowData\n"
    example: []
    syntax:
      content:
        CSharp: public class SubFlowData
        VB: Public Class SubFlowData
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SubFlowData.GenericDevice
      commentId: P:Global.SubFlowData.GenericDevice
      language: CSharp
      name:
        CSharp: GenericDevice
        VB: GenericDevice
      nameWithType:
        CSharp: SubFlowData.GenericDevice
        VB: SubFlowData.GenericDevice
      qualifiedName:
        CSharp: SubFlowData.GenericDevice
        VB: SubFlowData.GenericDevice
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GenericDevice
        path: ''
        startLine: 6966
      syntax:
        content:
          CSharp: public GenericDevice GenericDevice { get; set; }
          VB: Public Property GenericDevice As GenericDevice
        parameters: []
        return:
          type: Global.GenericDevice
      overload: Global.SubFlowData.GenericDevice*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.SubFlowData.SubFlows
      commentId: P:Global.SubFlowData.SubFlows
      language: CSharp
      name:
        CSharp: SubFlows
        VB: SubFlows
      nameWithType:
        CSharp: SubFlowData.SubFlows
        VB: SubFlowData.SubFlows
      qualifiedName:
        CSharp: SubFlowData.SubFlows
        VB: SubFlowData.SubFlows
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubFlows
        path: ''
        startLine: 6985
      syntax:
        content:
          CSharp: public List<int> SubFlows { get; set; }
          VB: Public Property SubFlows As List(Of Integer)
        parameters: []
        return:
          type: System.Collections.Generic.List{System.Int32}
      overload: Global.SubFlowData.SubFlows*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Global.FlowData
    commentId: T:Global.FlowData
    language: CSharp
    name:
      CSharp: FlowData
      VB: FlowData
    nameWithType:
      CSharp: FlowData
      VB: FlowData
    qualifiedName:
      CSharp: FlowData
      VB: FlowData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FlowData
      path: ''
      startLine: 7021
    syntax:
      content:
        CSharp: public class FlowData
        VB: Public Class FlowData
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.FlowData.SerialPump
      commentId: P:Global.FlowData.SerialPump
      language: CSharp
      name:
        CSharp: SerialPump
        VB: SerialPump
      nameWithType:
        CSharp: FlowData.SerialPump
        VB: FlowData.SerialPump
      qualifiedName:
        CSharp: FlowData.SerialPump
        VB: FlowData.SerialPump
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SerialPump
        path: ''
        startLine: 7032
      syntax:
        content:
          CSharp: public AnimationCurve SerialPump { get; set; }
          VB: Public Property SerialPump As AnimationCurve
        parameters: []
        return:
          type: Global.AnimationCurve
      overload: Global.FlowData.SerialPump*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FlowData.Ready
      commentId: P:Global.FlowData.Ready
      language: CSharp
      name:
        CSharp: Ready
        VB: Ready
      nameWithType:
        CSharp: FlowData.Ready
        VB: FlowData.Ready
      qualifiedName:
        CSharp: FlowData.Ready
        VB: FlowData.Ready
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Ready
        path: ''
        startLine: 7049
      syntax:
        content:
          CSharp: public bool Ready { get; set; }
          VB: Public Property Ready As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.FlowData.Ready*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FlowData.Flows
      commentId: P:Global.FlowData.Flows
      language: CSharp
      name:
        CSharp: Flows
        VB: Flows
      nameWithType:
        CSharp: FlowData.Flows
        VB: FlowData.Flows
      qualifiedName:
        CSharp: FlowData.Flows
        VB: FlowData.Flows
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Flows
        path: ''
        startLine: 7069
      syntax:
        content:
          CSharp: public Hashtable Flows { get; set; }
          VB: Public Property Flows As Hashtable
        parameters: []
        return:
          type: Global.Hashtable
      overload: Global.FlowData.Flows*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FlowData.FlowID
      commentId: P:Global.FlowData.FlowID
      language: CSharp
      name:
        CSharp: FlowID
        VB: FlowID
      nameWithType:
        CSharp: FlowData.FlowID
        VB: FlowData.FlowID
      qualifiedName:
        CSharp: FlowData.FlowID
        VB: FlowData.FlowID
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlowID
        path: ''
        startLine: 7086
      syntax:
        content:
          CSharp: public int FlowID { get; set; }
          VB: Public Property FlowID As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.FlowData.FlowID*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FlowData.Parent
      commentId: P:Global.FlowData.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: FlowData.Parent
        VB: FlowData.Parent
      qualifiedName:
        CSharp: FlowData.Parent
        VB: FlowData.Parent
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Parent
        path: ''
        startLine: 7103
      syntax:
        content:
          CSharp: public int Parent { get; set; }
          VB: Public Property Parent As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.FlowData.Parent*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.FlowData.node
      commentId: F:Global.FlowData.node
      language: CSharp
      name:
        CSharp: node
        VB: node
      nameWithType:
        CSharp: FlowData.node
        VB: FlowData.node
      qualifiedName:
        CSharp: FlowData.node
        VB: FlowData.node
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: node
        path: ''
        startLine: 7117
      syntax:
        content:
          CSharp: public SubFlowData node
          VB: Public node As SubFlowData
        return:
          type: Global.SubFlowData
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.Simulation
    commentId: T:Global.Simulation
    language: CSharp
    name:
      CSharp: Simulation
      VB: Simulation
    nameWithType:
      CSharp: Simulation
      VB: Simulation
    qualifiedName:
      CSharp: Simulation
      VB: Simulation
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Simulation
      path: ''
      startLine: 7179
    summary: "\nThe Simulation class is responsible for the operation of the simulation.\nThe instance starts the simulation rounds according to the selected interval\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Simulation : Singleton<Simulation>'
        VB: >-
          Public Class Simulation

              Inherits Singleton(Of Simulation)
    inheritance:
    - System.Object
    - Global.Singleton{Simulation}
    inheritedMembers:
    - Global.Singleton{Simulation}.Instance
    - Global.Singleton{Simulation}.OnDestroy
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.Simulation.OnRunSimulation
      commentId: E:Global.Simulation.OnRunSimulation
      language: CSharp
      name:
        CSharp: OnRunSimulation
        VB: OnRunSimulation
      nameWithType:
        CSharp: Simulation.OnRunSimulation
        VB: Simulation.OnRunSimulation
      qualifiedName:
        CSharp: Simulation.OnRunSimulation
        VB: Simulation.OnRunSimulation
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnRunSimulation
        path: ''
        startLine: 7198
      summary: "\nOnRunSimulation event\n"
      example: []
      syntax:
        content:
          CSharp: public static event Simulation.RunSimulation OnRunSimulation
          VB: Public Shared Event OnRunSimulation As Simulation.RunSimulation
        return:
          type: Global.Simulation.RunSimulation
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.Simulation.OnPreSimulation
      commentId: E:Global.Simulation.OnPreSimulation
      language: CSharp
      name:
        CSharp: OnPreSimulation
        VB: OnPreSimulation
      nameWithType:
        CSharp: Simulation.OnPreSimulation
        VB: Simulation.OnPreSimulation
      qualifiedName:
        CSharp: Simulation.OnPreSimulation
        VB: Simulation.OnPreSimulation
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnPreSimulation
        path: ''
        startLine: 7209
      summary: "\nPreSimulation event\n"
      example: []
      syntax:
        content:
          CSharp: public static event Simulation.PreSimulation OnPreSimulation
          VB: Public Shared Event OnPreSimulation As Simulation.PreSimulation
        return:
          type: Global.Simulation.PreSimulation
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Global.Simulation.RunSimulation
    commentId: T:Global.Simulation.RunSimulation
    language: CSharp
    name:
      CSharp: Simulation.RunSimulation
      VB: Simulation.RunSimulation
    nameWithType:
      CSharp: Simulation.RunSimulation
      VB: Simulation.RunSimulation
    qualifiedName:
      CSharp: Simulation.RunSimulation
      VB: Simulation.RunSimulation
    type: Delegate
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: RunSimulation
      path: ''
      startLine: 7193
    summary: "\nRunSimulation Delegate\n"
    example: []
    syntax:
      content:
        CSharp: public delegate void RunSimulation();
        VB: Public Delegate Sub RunSimulation
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: Global.Simulation.PreSimulation
    commentId: T:Global.Simulation.PreSimulation
    language: CSharp
    name:
      CSharp: Simulation.PreSimulation
      VB: Simulation.PreSimulation
    nameWithType:
      CSharp: Simulation.PreSimulation
      VB: Simulation.PreSimulation
    qualifiedName:
      CSharp: Simulation.PreSimulation
      VB: Simulation.PreSimulation
    type: Delegate
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PreSimulation
      path: ''
      startLine: 7204
    summary: "\nPreSimulation Delegate\n"
    example: []
    syntax:
      content:
        CSharp: public delegate void PreSimulation();
        VB: Public Delegate Sub PreSimulation
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: Global.SimulationSettings
    commentId: T:Global.SimulationSettings
    language: CSharp
    name:
      CSharp: SimulationSettings
      VB: SimulationSettings
    nameWithType:
      CSharp: SimulationSettings
      VB: SimulationSettings
    qualifiedName:
      CSharp: SimulationSettings
      VB: SimulationSettings
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SimulationSettings
      path: ''
      startLine: 7324
    summary: "\nSimulationSettings\nThis class contains all settings for simulation (system)\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SimulationSettings : MonoBehaviour'
        VB: >-
          Public Class SimulationSettings

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SimulationSettings.TimeMultiplier
      commentId: P:Global.SimulationSettings.TimeMultiplier
      language: CSharp
      name:
        CSharp: TimeMultiplier
        VB: TimeMultiplier
      nameWithType:
        CSharp: SimulationSettings.TimeMultiplier
        VB: SimulationSettings.TimeMultiplier
      qualifiedName:
        CSharp: SimulationSettings.TimeMultiplier
        VB: SimulationSettings.TimeMultiplier
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TimeMultiplier
        path: ''
        startLine: 7341
      syntax:
        content:
          CSharp: public float TimeMultiplier { get; }
          VB: Public ReadOnly Property TimeMultiplier As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.SimulationSettings.TimeMultiplier*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.SimulationSettings.SimulationInterval
      commentId: P:Global.SimulationSettings.SimulationInterval
      language: CSharp
      name:
        CSharp: SimulationInterval
        VB: SimulationInterval
      nameWithType:
        CSharp: SimulationSettings.SimulationInterval
        VB: SimulationSettings.SimulationInterval
      qualifiedName:
        CSharp: SimulationSettings.SimulationInterval
        VB: SimulationSettings.SimulationInterval
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SimulationInterval
        path: ''
        startLine: 7352
      syntax:
        content:
          CSharp: public float SimulationInterval { get; }
          VB: Public ReadOnly Property SimulationInterval As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.SimulationSettings.SimulationInterval*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.SimulationSettings.Instance
      commentId: P:Global.SimulationSettings.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: SimulationSettings.Instance
        VB: SimulationSettings.Instance
      qualifiedName:
        CSharp: SimulationSettings.Instance
        VB: SimulationSettings.Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 7364
      syntax:
        content:
          CSharp: public static SimulationSettings Instance { get; }
          VB: Public Shared ReadOnly Property Instance As SimulationSettings
        parameters: []
        return:
          type: Global.SimulationSettings
      overload: Global.SimulationSettings.Instance*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Global.SimulationSettings.circuits
      commentId: F:Global.SimulationSettings.circuits
      language: CSharp
      name:
        CSharp: circuits
        VB: circuits
      nameWithType:
        CSharp: SimulationSettings.circuits
        VB: SimulationSettings.circuits
      qualifiedName:
        CSharp: SimulationSettings.circuits
        VB: SimulationSettings.circuits
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: circuits
        path: ''
        startLine: 7381
      summary: "\ncircuits\n"
      example: []
      syntax:
        content:
          CSharp: public Hashtable circuits
          VB: Public circuits As Hashtable
        return:
          type: Global.Hashtable
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SimulationSettings.flows
      commentId: F:Global.SimulationSettings.flows
      language: CSharp
      name:
        CSharp: flows
        VB: flows
      nameWithType:
        CSharp: SimulationSettings.flows
        VB: SimulationSettings.flows
      qualifiedName:
        CSharp: SimulationSettings.flows
        VB: SimulationSettings.flows
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: flows
        path: ''
        startLine: 7386
      summary: "\nflows\n"
      example: []
      syntax:
        content:
          CSharp: public Hashtable flows
          VB: Public flows As Hashtable
        return:
          type: Global.Hashtable
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SimulationSettings.simulations
      commentId: F:Global.SimulationSettings.simulations
      language: CSharp
      name:
        CSharp: simulations
        VB: simulations
      nameWithType:
        CSharp: SimulationSettings.simulations
        VB: SimulationSettings.simulations
      qualifiedName:
        CSharp: SimulationSettings.simulations
        VB: SimulationSettings.simulations
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: simulations
        path: ''
        startLine: 7393
      summary: "\nsimulations\n"
      example: []
      syntax:
        content:
          CSharp: public Hashtable simulations
          VB: Public simulations As Hashtable
        return:
          type: Global.Hashtable
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.GenericSlot
    commentId: T:Global.GenericSlot
    language: CSharp
    name:
      CSharp: GenericSlot
      VB: GenericSlot
    nameWithType:
      CSharp: GenericSlot
      VB: GenericSlot
    qualifiedName:
      CSharp: GenericSlot
      VB: GenericSlot
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericSlot
      path: ''
      startLine: 7459
    summary: "\nGenericSlot\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericSlot : MonoBehaviour'
        VB: >-
          Public Class GenericSlot

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericSlot.slotID
      commentId: F:Global.GenericSlot.slotID
      language: CSharp
      name:
        CSharp: slotID
        VB: slotID
      nameWithType:
        CSharp: GenericSlot.slotID
        VB: GenericSlot.slotID
      qualifiedName:
        CSharp: GenericSlot.slotID
        VB: GenericSlot.slotID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: slotID
        path: ''
        startLine: 7468
      summary: "\nslotID\n"
      example: []
      syntax:
        content:
          CSharp: protected int slotID
          VB: Protected slotID As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.GenericSlot.SlotID
      commentId: P:Global.GenericSlot.SlotID
      language: CSharp
      name:
        CSharp: SlotID
        VB: SlotID
      nameWithType:
        CSharp: GenericSlot.SlotID
        VB: GenericSlot.SlotID
      qualifiedName:
        CSharp: GenericSlot.SlotID
        VB: GenericSlot.SlotID
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SlotID
        path: ''
        startLine: 7469
      syntax:
        content:
          CSharp: public int SlotID { get; }
          VB: Public ReadOnly Property SlotID As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.GenericSlot.SlotID*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.GenericSlot.lastDeviceData
      commentId: F:Global.GenericSlot.lastDeviceData
      language: CSharp
      name:
        CSharp: lastDeviceData
        VB: lastDeviceData
      nameWithType:
        CSharp: GenericSlot.lastDeviceData
        VB: GenericSlot.lastDeviceData
      qualifiedName:
        CSharp: GenericSlot.lastDeviceData
        VB: GenericSlot.lastDeviceData
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lastDeviceData
        path: ''
        startLine: 7478
      summary: "\nlastDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: protected DeviceData lastDeviceData
          VB: Protected lastDeviceData As DeviceData
        return:
          type: Global.DeviceData
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.GenericSlot.LastDeviceData
      commentId: P:Global.GenericSlot.LastDeviceData
      language: CSharp
      name:
        CSharp: LastDeviceData
        VB: LastDeviceData
      nameWithType:
        CSharp: GenericSlot.LastDeviceData
        VB: GenericSlot.LastDeviceData
      qualifiedName:
        CSharp: GenericSlot.LastDeviceData
        VB: GenericSlot.LastDeviceData
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LastDeviceData
        path: ''
        startLine: 7479
      syntax:
        content:
          CSharp: public DeviceData LastDeviceData { get; }
          VB: Public ReadOnly Property LastDeviceData As DeviceData
        parameters: []
        return:
          type: Global.DeviceData
      overload: Global.GenericSlot.LastDeviceData*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.GenericSlot.listOfPID
      commentId: F:Global.GenericSlot.listOfPID
      language: CSharp
      name:
        CSharp: listOfPID
        VB: listOfPID
      nameWithType:
        CSharp: GenericSlot.listOfPID
        VB: GenericSlot.listOfPID
      qualifiedName:
        CSharp: GenericSlot.listOfPID
        VB: GenericSlot.listOfPID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: listOfPID
        path: ''
        startLine: 7490
      summary: "\nlistOfPID\n"
      example: []
      syntax:
        content:
          CSharp: protected List<GeneralPID> listOfPID
          VB: Protected listOfPID As List(Of GeneralPID)
        return:
          type: System.Collections.Generic.List{GeneralPID}
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.GenericSlot.listOfDM
      commentId: F:Global.GenericSlot.listOfDM
      language: CSharp
      name:
        CSharp: listOfDM
        VB: listOfDM
      nameWithType:
        CSharp: GenericSlot.listOfDM
        VB: GenericSlot.listOfDM
      qualifiedName:
        CSharp: GenericSlot.listOfDM
        VB: GenericSlot.listOfDM
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: listOfDM
        path: ''
        startLine: 7495
      summary: "\nlistOfPID\n"
      example: []
      syntax:
        content:
          CSharp: protected List<GenericDM> listOfDM
          VB: Protected listOfDM As List(Of GenericDM)
        return:
          type: System.Collections.Generic.List{GenericDM}
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Global.GenericSlot.AddPIDtoSlot(GeneralPID)
      commentId: M:Global.GenericSlot.AddPIDtoSlot(GeneralPID)
      language: CSharp
      name:
        CSharp: AddPIDtoSlot(GeneralPID)
        VB: AddPIDtoSlot(GeneralPID)
      nameWithType:
        CSharp: GenericSlot.AddPIDtoSlot(GeneralPID)
        VB: GenericSlot.AddPIDtoSlot(GeneralPID)
      qualifiedName:
        CSharp: GenericSlot.AddPIDtoSlot(GeneralPID)
        VB: GenericSlot.AddPIDtoSlot(GeneralPID)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddPIDtoSlot
        path: ''
        startLine: 7514
      summary: "\nAddPIDtoSlot\n"
      example: []
      syntax:
        content:
          CSharp: public void AddPIDtoSlot(GeneralPID pid)
          VB: Public Sub AddPIDtoSlot(pid As GeneralPID)
        parameters:
        - id: pid
          type: Global.GeneralPID
          description: ''
      overload: Global.GenericSlot.AddPIDtoSlot*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericSlot.AddDMtoSlot(GenericDM)
      commentId: M:Global.GenericSlot.AddDMtoSlot(GenericDM)
      language: CSharp
      name:
        CSharp: AddDMtoSlot(GenericDM)
        VB: AddDMtoSlot(GenericDM)
      nameWithType:
        CSharp: GenericSlot.AddDMtoSlot(GenericDM)
        VB: GenericSlot.AddDMtoSlot(GenericDM)
      qualifiedName:
        CSharp: GenericSlot.AddDMtoSlot(GenericDM)
        VB: GenericSlot.AddDMtoSlot(GenericDM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddDMtoSlot
        path: ''
        startLine: 7522
      summary: "\nAddDMtoSlot\n"
      example: []
      syntax:
        content:
          CSharp: public void AddDMtoSlot(GenericDM dm)
          VB: Public Sub AddDMtoSlot(dm As GenericDM)
        parameters:
        - id: dm
          type: Global.GenericDM
          description: ''
      overload: Global.GenericSlot.AddDMtoSlot*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.ISlot
    commentId: T:Global.ISlot
    language: CSharp
    name:
      CSharp: ISlot
      VB: ISlot
    nameWithType:
      CSharp: ISlot
      VB: ISlot
    qualifiedName:
      CSharp: ISlot
      VB: ISlot
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ISlot
      path: ''
      startLine: 7569
    summary: "\nISlot\n"
    example: []
    syntax:
      content:
        CSharp: public interface ISlot
        VB: Public Interface ISlot
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Global.ISlot.Ready(DeviceData,SimulationState)
      commentId: M:Global.ISlot.Ready(DeviceData,SimulationState)
      language: CSharp
      name:
        CSharp: Ready(DeviceData, SimulationState)
        VB: Ready(DeviceData, SimulationState)
      nameWithType:
        CSharp: ISlot.Ready(DeviceData, SimulationState)
        VB: ISlot.Ready(DeviceData, SimulationState)
      qualifiedName:
        CSharp: ISlot.Ready(DeviceData, SimulationState)
        VB: ISlot.Ready(DeviceData, SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Ready
        path: ''
        startLine: 7575
      summary: "\nReady\n"
      example: []
      syntax:
        content:
          CSharp: void Ready(DeviceData deviceData, SimulationState aState = SimulationState.EPressureLoss)
          VB: Sub Ready(deviceData As DeviceData, aState As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: deviceData
          type: Global.DeviceData
          description: ''
        - id: aState
          type: Global.SimulationState
      overload: Global.ISlot.Ready*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.ISlot.GetDeviceData
      commentId: M:Global.ISlot.GetDeviceData
      language: CSharp
      name:
        CSharp: GetDeviceData()
        VB: GetDeviceData()
      nameWithType:
        CSharp: ISlot.GetDeviceData()
        VB: ISlot.GetDeviceData()
      qualifiedName:
        CSharp: ISlot.GetDeviceData()
        VB: ISlot.GetDeviceData()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetDeviceData
        path: ''
        startLine: 7581
      summary: "\nGetDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: GenericDeviceData GetDeviceData()
          VB: Function GetDeviceData As GenericDeviceData
        return:
          type: Global.GenericDeviceData
      overload: Global.ISlot.GetDeviceData*
      modifiers:
        CSharp: []
        VB: []
  - id: Global.SlotIn
    commentId: T:Global.SlotIn
    language: CSharp
    name:
      CSharp: SlotIn
      VB: SlotIn
    nameWithType:
      CSharp: SlotIn
      VB: SlotIn
    qualifiedName:
      CSharp: SlotIn
      VB: SlotIn
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SlotIn
      path: ''
      startLine: 7621
    summary: "\nDevice slotin.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SlotIn : GenericSlot, ISlot'
        VB: >-
          Public Class SlotIn

              Inherits GenericSlot

              Implements ISlot
    inheritance:
    - System.Object
    - Global.GenericSlot
    implements:
    - Global.ISlot
    inheritedMembers:
    - Global.GenericSlot.slotID
    - Global.GenericSlot.SlotID
    - Global.GenericSlot.lastDeviceData
    - Global.GenericSlot.LastDeviceData
    - Global.GenericSlot.listOfPID
    - Global.GenericSlot.listOfDM
    - Global.GenericSlot.AddPIDtoSlot(GeneralPID)
    - Global.GenericSlot.AddDMtoSlot(GenericDM)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SlotIn.GetDeviceData
      commentId: M:Global.SlotIn.GetDeviceData
      language: CSharp
      name:
        CSharp: GetDeviceData()
        VB: GetDeviceData()
      nameWithType:
        CSharp: SlotIn.GetDeviceData()
        VB: SlotIn.GetDeviceData()
      qualifiedName:
        CSharp: SlotIn.GetDeviceData()
        VB: SlotIn.GetDeviceData()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetDeviceData
        path: ''
        startLine: 7694
      summary: "\nGetDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public GenericDeviceData GetDeviceData()
          VB: Public Function GetDeviceData As GenericDeviceData
        return:
          type: Global.GenericDeviceData
          description: ''
      overload: Global.SlotIn.GetDeviceData*
      implements:
      - Global.ISlot.GetDeviceData
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SlotIn.Ready(DeviceData,SimulationState)
      commentId: M:Global.SlotIn.Ready(DeviceData,SimulationState)
      language: CSharp
      name:
        CSharp: Ready(DeviceData, SimulationState)
        VB: Ready(DeviceData, SimulationState)
      nameWithType:
        CSharp: SlotIn.Ready(DeviceData, SimulationState)
        VB: SlotIn.Ready(DeviceData, SimulationState)
      qualifiedName:
        CSharp: SlotIn.Ready(DeviceData, SimulationState)
        VB: SlotIn.Ready(DeviceData, SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Ready
        path: ''
        startLine: 7703
      summary: "\nSlotOut object call this methdod. Main purpose is forward data from slotout\nto slot in.\n"
      example: []
      syntax:
        content:
          CSharp: public void Ready(DeviceData deviceData, SimulationState state = SimulationState.EPressureLoss)
          VB: Public Sub Ready(deviceData As DeviceData, state As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: deviceData
          type: Global.DeviceData
        - id: state
          type: Global.SimulationState
      overload: Global.SlotIn.Ready*
      implements:
      - Global.ISlot.Ready(DeviceData,SimulationState)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.SlotOut
    commentId: T:Global.SlotOut
    language: CSharp
    name:
      CSharp: SlotOut
      VB: SlotOut
    nameWithType:
      CSharp: SlotOut
      VB: SlotOut
    qualifiedName:
      CSharp: SlotOut
      VB: SlotOut
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SlotOut
      path: ''
      startLine: 7803
    summary: "\nSlotOut\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SlotOut : GenericSlot'
        VB: >-
          Public Class SlotOut

              Inherits GenericSlot
    inheritance:
    - System.Object
    - Global.GenericSlot
    inheritedMembers:
    - Global.GenericSlot.slotID
    - Global.GenericSlot.SlotID
    - Global.GenericSlot.lastDeviceData
    - Global.GenericSlot.LastDeviceData
    - Global.GenericSlot.listOfPID
    - Global.GenericSlot.listOfDM
    - Global.GenericSlot.AddPIDtoSlot(GeneralPID)
    - Global.GenericSlot.AddDMtoSlot(GenericDM)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SlotOut.RegisterSlot(ISlot)
      commentId: M:Global.SlotOut.RegisterSlot(ISlot)
      language: CSharp
      name:
        CSharp: RegisterSlot(ISlot)
        VB: RegisterSlot(ISlot)
      nameWithType:
        CSharp: SlotOut.RegisterSlot(ISlot)
        VB: SlotOut.RegisterSlot(ISlot)
      qualifiedName:
        CSharp: SlotOut.RegisterSlot(ISlot)
        VB: SlotOut.RegisterSlot(ISlot)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RegisterSlot
        path: ''
        startLine: 7835
      summary: "\nRegisterSlot\n"
      example: []
      syntax:
        content:
          CSharp: public void RegisterSlot(ISlot slot)
          VB: Public Sub RegisterSlot(slot As ISlot)
        parameters:
        - id: slot
          type: Global.ISlot
      overload: Global.SlotOut.RegisterSlot*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SlotOut.GetNextDevice
      commentId: M:Global.SlotOut.GetNextDevice
      language: CSharp
      name:
        CSharp: GetNextDevice()
        VB: GetNextDevice()
      nameWithType:
        CSharp: SlotOut.GetNextDevice()
        VB: SlotOut.GetNextDevice()
      qualifiedName:
        CSharp: SlotOut.GetNextDevice()
        VB: SlotOut.GetNextDevice()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetNextDevice
        path: ''
        startLine: 7844
      summary: "\nGetNextDevice\n"
      example: []
      syntax:
        content:
          CSharp: public GenericDeviceData GetNextDevice()
          VB: Public Function GetNextDevice As GenericDeviceData
        return:
          type: Global.GenericDeviceData
          description: ''
      overload: Global.SlotOut.GetNextDevice*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SlotOut.isConnected
      commentId: M:Global.SlotOut.isConnected
      language: CSharp
      name:
        CSharp: isConnected()
        VB: isConnected()
      nameWithType:
        CSharp: SlotOut.isConnected()
        VB: SlotOut.isConnected()
      qualifiedName:
        CSharp: SlotOut.isConnected()
        VB: SlotOut.isConnected()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: isConnected
        path: ''
        startLine: 7853
      summary: "\nisConnected\n"
      example: []
      syntax:
        content:
          CSharp: public bool isConnected()
          VB: Public Function isConnected As Boolean
        return:
          type: System.Boolean
          description: ''
      overload: Global.SlotOut.isConnected*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SlotOut.SetLastDeviceData(DeviceData)
      commentId: M:Global.SlotOut.SetLastDeviceData(DeviceData)
      language: CSharp
      name:
        CSharp: SetLastDeviceData(DeviceData)
        VB: SetLastDeviceData(DeviceData)
      nameWithType:
        CSharp: SlotOut.SetLastDeviceData(DeviceData)
        VB: SlotOut.SetLastDeviceData(DeviceData)
      qualifiedName:
        CSharp: SlotOut.SetLastDeviceData(DeviceData)
        VB: SlotOut.SetLastDeviceData(DeviceData)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetLastDeviceData
        path: ''
        startLine: 7862
      summary: "\nSetLastDeviceData\n"
      example: []
      syntax:
        content:
          CSharp: public void SetLastDeviceData(DeviceData deviceData)
          VB: Public Sub SetLastDeviceData(deviceData As DeviceData)
        parameters:
        - id: deviceData
          type: Global.DeviceData
          description: ''
      overload: Global.SlotOut.SetLastDeviceData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SlotOut.PushData(DeviceData,SimulationState)
      commentId: M:Global.SlotOut.PushData(DeviceData,SimulationState)
      language: CSharp
      name:
        CSharp: PushData(DeviceData, SimulationState)
        VB: PushData(DeviceData, SimulationState)
      nameWithType:
        CSharp: SlotOut.PushData(DeviceData, SimulationState)
        VB: SlotOut.PushData(DeviceData, SimulationState)
      qualifiedName:
        CSharp: SlotOut.PushData(DeviceData, SimulationState)
        VB: SlotOut.PushData(DeviceData, SimulationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PushData
        path: ''
        startLine: 7874
      summary: "\nPushData\n\nForward data to slotin\n"
      example: []
      syntax:
        content:
          CSharp: public void PushData(DeviceData deviceData, SimulationState state = SimulationState.EPressureLoss)
          VB: Public Sub PushData(deviceData As DeviceData, state As SimulationState = SimulationState.EPressureLoss)
        parameters:
        - id: deviceData
          type: Global.DeviceData
          description: ''
        - id: state
          type: Global.SimulationState
          description: ''
      overload: Global.SlotOut.PushData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.GenericDeviceData
    commentId: T:Global.GenericDeviceData
    language: CSharp
    name:
      CSharp: GenericDeviceData
      VB: GenericDeviceData
    nameWithType:
      CSharp: GenericDeviceData
      VB: GenericDeviceData
    qualifiedName:
      CSharp: GenericDeviceData
      VB: GenericDeviceData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericDeviceData
      path: ''
      startLine: 7930
    syntax:
      content:
        CSharp: 'public class GenericDeviceData : ScriptableObject'
        VB: >-
          Public Class GenericDeviceData

              Inherits ScriptableObject
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericDeviceData.DeviceName
      commentId: F:Global.GenericDeviceData.DeviceName
      language: CSharp
      name:
        CSharp: DeviceName
        VB: DeviceName
      nameWithType:
        CSharp: GenericDeviceData.DeviceName
        VB: GenericDeviceData.DeviceName
      qualifiedName:
        CSharp: GenericDeviceData.DeviceName
        VB: GenericDeviceData.DeviceName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeviceName
        path: ''
        startLine: 7935
      summary: "\nDeviceName\n"
      example: []
      syntax:
        content:
          CSharp: public string DeviceName
          VB: Public DeviceName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDeviceData.DeviceModel
      commentId: F:Global.GenericDeviceData.DeviceModel
      language: CSharp
      name:
        CSharp: DeviceModel
        VB: DeviceModel
      nameWithType:
        CSharp: GenericDeviceData.DeviceModel
        VB: GenericDeviceData.DeviceModel
      qualifiedName:
        CSharp: GenericDeviceData.DeviceModel
        VB: GenericDeviceData.DeviceModel
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeviceModel
        path: ''
        startLine: 7941
      summary: "\nDeviceModel\n"
      example: []
      syntax:
        content:
          CSharp: public string DeviceModel
          VB: Public DeviceModel As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDeviceData.Manufactor
      commentId: F:Global.GenericDeviceData.Manufactor
      language: CSharp
      name:
        CSharp: Manufactor
        VB: Manufactor
      nameWithType:
        CSharp: GenericDeviceData.Manufactor
        VB: GenericDeviceData.Manufactor
      qualifiedName:
        CSharp: GenericDeviceData.Manufactor
        VB: GenericDeviceData.Manufactor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Manufactor
        path: ''
        startLine: 7947
      summary: "\nManufactor\n"
      example: []
      syntax:
        content:
          CSharp: public string Manufactor
          VB: Public Manufactor As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericDeviceData.ComputeVolume
      commentId: M:Global.GenericDeviceData.ComputeVolume
      language: CSharp
      name:
        CSharp: ComputeVolume()
        VB: ComputeVolume()
      nameWithType:
        CSharp: GenericDeviceData.ComputeVolume()
        VB: GenericDeviceData.ComputeVolume()
      qualifiedName:
        CSharp: GenericDeviceData.ComputeVolume()
        VB: GenericDeviceData.ComputeVolume()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ComputeVolume
        path: ''
        startLine: 7953
      summary: "\nComputeVolume\n"
      example: []
      syntax:
        content:
          CSharp: public virtual float ComputeVolume()
          VB: Public Overridable Function ComputeVolume As Single
        return:
          type: System.Single
          description: ''
      overload: Global.GenericDeviceData.ComputeVolume*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
  - id: Global.GenericHeaterData
    commentId: T:Global.GenericHeaterData
    language: CSharp
    name:
      CSharp: GenericHeaterData
      VB: GenericHeaterData
    nameWithType:
      CSharp: GenericHeaterData
      VB: GenericHeaterData
    qualifiedName:
      CSharp: GenericHeaterData
      VB: GenericHeaterData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericHeaterData
      path: ''
      startLine: 7996
    summary: "\nGenericHeaterData\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericHeaterData : GenericDeviceData'
        VB: >-
          Public Class GenericHeaterData

              Inherits GenericDeviceData
    inheritance:
    - System.Object
    - Global.GenericDeviceData
    inheritedMembers:
    - Global.GenericDeviceData.DeviceName
    - Global.GenericDeviceData.DeviceModel
    - Global.GenericDeviceData.Manufactor
    - Global.GenericDeviceData.ComputeVolume
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericHeaterData.MinPower
      commentId: P:Global.GenericHeaterData.MinPower
      language: CSharp
      name:
        CSharp: MinPower
        VB: MinPower
      nameWithType:
        CSharp: GenericHeaterData.MinPower
        VB: GenericHeaterData.MinPower
      qualifiedName:
        CSharp: GenericHeaterData.MinPower
        VB: GenericHeaterData.MinPower
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MinPower
        path: ''
        startLine: 8004
      syntax:
        content:
          CSharp: public float MinPower { get; }
          VB: Public ReadOnly Property MinPower As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericHeaterData.MinPower*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.GenericHeaterData.MaxPower
      commentId: P:Global.GenericHeaterData.MaxPower
      language: CSharp
      name:
        CSharp: MaxPower
        VB: MaxPower
      nameWithType:
        CSharp: GenericHeaterData.MaxPower
        VB: GenericHeaterData.MaxPower
      qualifiedName:
        CSharp: GenericHeaterData.MaxPower
        VB: GenericHeaterData.MaxPower
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MaxPower
        path: ''
        startLine: 8016
      syntax:
        content:
          CSharp: public float MaxPower { get; }
          VB: Public ReadOnly Property MaxPower As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericHeaterData.MaxPower*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.GenericHeaterData.DeadTime
      commentId: P:Global.GenericHeaterData.DeadTime
      language: CSharp
      name:
        CSharp: DeadTime
        VB: DeadTime
      nameWithType:
        CSharp: GenericHeaterData.DeadTime
        VB: GenericHeaterData.DeadTime
      qualifiedName:
        CSharp: GenericHeaterData.DeadTime
        VB: GenericHeaterData.DeadTime
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeadTime
        path: ''
        startLine: 8028
      syntax:
        content:
          CSharp: public float DeadTime { get; set; }
          VB: Public Property DeadTime As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericHeaterData.DeadTime*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.GenericHeaterData.PowerCurve
      commentId: P:Global.GenericHeaterData.PowerCurve
      language: CSharp
      name:
        CSharp: PowerCurve
        VB: PowerCurve
      nameWithType:
        CSharp: GenericHeaterData.PowerCurve
        VB: GenericHeaterData.PowerCurve
      qualifiedName:
        CSharp: GenericHeaterData.PowerCurve
        VB: GenericHeaterData.PowerCurve
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PowerCurve
        path: ''
        startLine: 8045
      syntax:
        content:
          CSharp: public AnimationCurve PowerCurve { get; set; }
          VB: Public Property PowerCurve As AnimationCurve
        parameters: []
        return:
          type: Global.AnimationCurve
      overload: Global.GenericHeaterData.PowerCurve*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.GenericHeaterData.Power
      commentId: P:Global.GenericHeaterData.Power
      language: CSharp
      name:
        CSharp: Power
        VB: Power
      nameWithType:
        CSharp: GenericHeaterData.Power
        VB: GenericHeaterData.Power
      qualifiedName:
        CSharp: GenericHeaterData.Power
        VB: GenericHeaterData.Power
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Power
        path: ''
        startLine: 8061
      syntax:
        content:
          CSharp: public float Power { get; set; }
          VB: Public Property Power As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericHeaterData.Power*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Global.GenericHeatExchangeData
    commentId: T:Global.GenericHeatExchangeData
    language: CSharp
    name:
      CSharp: GenericHeatExchangeData
      VB: GenericHeatExchangeData
    nameWithType:
      CSharp: GenericHeatExchangeData
      VB: GenericHeatExchangeData
    qualifiedName:
      CSharp: GenericHeatExchangeData
      VB: GenericHeatExchangeData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericHeatExchangeData
      path: ''
      startLine: 8113
    summary: "\nGenericWaterSourceData\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericHeatExchangeData : GenericDeviceData'
        VB: >-
          Public Class GenericHeatExchangeData

              Inherits GenericDeviceData
    inheritance:
    - System.Object
    - Global.GenericDeviceData
    inheritedMembers:
    - Global.GenericDeviceData.DeviceName
    - Global.GenericDeviceData.DeviceModel
    - Global.GenericDeviceData.Manufactor
    - Global.GenericDeviceData.ComputeVolume
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.GenericLoadData
    commentId: T:Global.GenericLoadData
    language: CSharp
    name:
      CSharp: GenericLoadData
      VB: GenericLoadData
    nameWithType:
      CSharp: GenericLoadData
      VB: GenericLoadData
    qualifiedName:
      CSharp: GenericLoadData
      VB: GenericLoadData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericLoadData
      path: ''
      startLine: 8150
    syntax:
      content:
        CSharp: 'public class GenericLoadData : GenericDeviceData'
        VB: >-
          Public Class GenericLoadData

              Inherits GenericDeviceData
    inheritance:
    - System.Object
    - Global.GenericDeviceData
    inheritedMembers:
    - Global.GenericDeviceData.DeviceName
    - Global.GenericDeviceData.DeviceModel
    - Global.GenericDeviceData.Manufactor
    - Global.GenericDeviceData.ComputeVolume
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericLoadData.Load
      commentId: P:Global.GenericLoadData.Load
      language: CSharp
      name:
        CSharp: Load
        VB: Load
      nameWithType:
        CSharp: GenericLoadData.Load
        VB: GenericLoadData.Load
      qualifiedName:
        CSharp: GenericLoadData.Load
        VB: GenericLoadData.Load
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Load
        path: ''
        startLine: 8157
      syntax:
        content:
          CSharp: public float Load { get; }
          VB: Public ReadOnly Property Load As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericLoadData.Load*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Global.GenericPipeTData
    commentId: T:Global.GenericPipeTData
    language: CSharp
    name:
      CSharp: GenericPipeTData
      VB: GenericPipeTData
    nameWithType:
      CSharp: GenericPipeTData
      VB: GenericPipeTData
    qualifiedName:
      CSharp: GenericPipeTData
      VB: GenericPipeTData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericPipeTData
      path: ''
      startLine: 8203
    summary: "\nGenericWaterSourceData\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericPipeTData : GenericDeviceData'
        VB: >-
          Public Class GenericPipeTData

              Inherits GenericDeviceData
    inheritance:
    - System.Object
    - Global.GenericDeviceData
    inheritedMembers:
    - Global.GenericDeviceData.DeviceName
    - Global.GenericDeviceData.DeviceModel
    - Global.GenericDeviceData.Manufactor
    - Global.GenericDeviceData.ComputeVolume
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.GenericPumpData
    commentId: T:Global.GenericPumpData
    language: CSharp
    name:
      CSharp: GenericPumpData
      VB: GenericPumpData
    nameWithType:
      CSharp: GenericPumpData
      VB: GenericPumpData
    qualifiedName:
      CSharp: GenericPumpData
      VB: GenericPumpData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericPumpData
      path: ''
      startLine: 8259
    summary: "\nGenericWaterSourceData\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericPumpData : GenericDeviceData'
        VB: >-
          Public Class GenericPumpData

              Inherits GenericDeviceData
    inheritance:
    - System.Object
    - Global.GenericDeviceData
    inheritedMembers:
    - Global.GenericDeviceData.DeviceName
    - Global.GenericDeviceData.DeviceModel
    - Global.GenericDeviceData.Manufactor
    - Global.GenericDeviceData.ComputeVolume
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericPumpData.Curve
      commentId: P:Global.GenericPumpData.Curve
      language: CSharp
      name:
        CSharp: Curve
        VB: Curve
      nameWithType:
        CSharp: GenericPumpData.Curve
        VB: GenericPumpData.Curve
      qualifiedName:
        CSharp: GenericPumpData.Curve
        VB: GenericPumpData.Curve
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Curve
        path: ''
        startLine: 8267
      syntax:
        content:
          CSharp: public AnimationCurve Curve { get; }
          VB: Public ReadOnly Property Curve As AnimationCurve
        parameters: []
        return:
          type: Global.AnimationCurve
      overload: Global.GenericPumpData.Curve*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Global.GenericValveData
    commentId: T:Global.GenericValveData
    language: CSharp
    name:
      CSharp: GenericValveData
      VB: GenericValveData
    nameWithType:
      CSharp: GenericValveData
      VB: GenericValveData
    qualifiedName:
      CSharp: GenericValveData
      VB: GenericValveData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericValveData
      path: ''
      startLine: 8314
    summary: "\nGenericWaterSourceData\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericValveData : GenericWaterPipeData'
        VB: >-
          Public Class GenericValveData

              Inherits GenericWaterPipeData
    inheritance:
    - System.Object
    - Global.GenericDeviceData
    - Global.GenericWaterPipeData
    inheritedMembers:
    - Global.GenericWaterPipeData.Diameter
    - Global.GenericWaterPipeData.lenght
    - Global.GenericWaterPipeData.Lenght
    - Global.GenericWaterPipeData.ComputeVolume
    - Global.GenericDeviceData.DeviceName
    - Global.GenericDeviceData.DeviceModel
    - Global.GenericDeviceData.Manufactor
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericValveData.Curve
      commentId: P:Global.GenericValveData.Curve
      language: CSharp
      name:
        CSharp: Curve
        VB: Curve
      nameWithType:
        CSharp: GenericValveData.Curve
        VB: GenericValveData.Curve
      qualifiedName:
        CSharp: GenericValveData.Curve
        VB: GenericValveData.Curve
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Curve
        path: ''
        startLine: 8323
      syntax:
        content:
          CSharp: public AnimationCurve Curve { get; set; }
          VB: Public Property Curve As AnimationCurve
        parameters: []
        return:
          type: Global.AnimationCurve
      overload: Global.GenericValveData.Curve*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.GenericValveData.MinValvePosition
      commentId: P:Global.GenericValveData.MinValvePosition
      language: CSharp
      name:
        CSharp: MinValvePosition
        VB: MinValvePosition
      nameWithType:
        CSharp: GenericValveData.MinValvePosition
        VB: GenericValveData.MinValvePosition
      qualifiedName:
        CSharp: GenericValveData.MinValvePosition
        VB: GenericValveData.MinValvePosition
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MinValvePosition
        path: ''
        startLine: 8338
      syntax:
        content:
          CSharp: public float MinValvePosition { get; set; }
          VB: Public Property MinValvePosition As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericValveData.MinValvePosition*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.GenericValveData.MaxValvePosition
      commentId: P:Global.GenericValveData.MaxValvePosition
      language: CSharp
      name:
        CSharp: MaxValvePosition
        VB: MaxValvePosition
      nameWithType:
        CSharp: GenericValveData.MaxValvePosition
        VB: GenericValveData.MaxValvePosition
      qualifiedName:
        CSharp: GenericValveData.MaxValvePosition
        VB: GenericValveData.MaxValvePosition
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MaxValvePosition
        path: ''
        startLine: 8353
      syntax:
        content:
          CSharp: public float MaxValvePosition { get; set; }
          VB: Public Property MaxValvePosition As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericValveData.MaxValvePosition*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.GenericValveData.ValvePosition
      commentId: P:Global.GenericValveData.ValvePosition
      language: CSharp
      name:
        CSharp: ValvePosition
        VB: ValvePosition
      nameWithType:
        CSharp: GenericValveData.ValvePosition
        VB: GenericValveData.ValvePosition
      qualifiedName:
        CSharp: GenericValveData.ValvePosition
        VB: GenericValveData.ValvePosition
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ValvePosition
        path: ''
        startLine: 8367
      syntax:
        content:
          CSharp: public float ValvePosition { get; set; }
          VB: Public Property ValvePosition As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericValveData.ValvePosition*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Global.GenericWaterPipeData
    commentId: T:Global.GenericWaterPipeData
    language: CSharp
    name:
      CSharp: GenericWaterPipeData
      VB: GenericWaterPipeData
    nameWithType:
      CSharp: GenericWaterPipeData
      VB: GenericWaterPipeData
    qualifiedName:
      CSharp: GenericWaterPipeData
      VB: GenericWaterPipeData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GenericWaterPipeData
      path: ''
      startLine: 8418
    summary: "\nGenericWaterPipeData\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GenericWaterPipeData : GenericDeviceData'
        VB: >-
          Public Class GenericWaterPipeData

              Inherits GenericDeviceData
    inheritance:
    - System.Object
    - Global.GenericDeviceData
    inheritedMembers:
    - Global.GenericDeviceData.DeviceName
    - Global.GenericDeviceData.DeviceModel
    - Global.GenericDeviceData.Manufactor
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.GenericWaterPipeData.Diameter
      commentId: P:Global.GenericWaterPipeData.Diameter
      language: CSharp
      name:
        CSharp: Diameter
        VB: Diameter
      nameWithType:
        CSharp: GenericWaterPipeData.Diameter
        VB: GenericWaterPipeData.Diameter
      qualifiedName:
        CSharp: GenericWaterPipeData.Diameter
        VB: GenericWaterPipeData.Diameter
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Diameter
        path: ''
        startLine: 8433
      summary: "\nDiameter set/get\n"
      example: []
      syntax:
        content:
          CSharp: public float Diameter { get; set; }
          VB: Public Property Diameter As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericWaterPipeData.Diameter*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.GenericWaterPipeData.lenght
      commentId: F:Global.GenericWaterPipeData.lenght
      language: CSharp
      name:
        CSharp: lenght
        VB: lenght
      nameWithType:
        CSharp: GenericWaterPipeData.lenght
        VB: GenericWaterPipeData.lenght
      qualifiedName:
        CSharp: GenericWaterPipeData.lenght
        VB: GenericWaterPipeData.lenght
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lenght
        path: ''
        startLine: 8448
      summary: "\nlenght of pipe\n"
      example: []
      syntax:
        content:
          CSharp: public float lenght
          VB: Public lenght As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.GenericWaterPipeData.Lenght
      commentId: P:Global.GenericWaterPipeData.Lenght
      language: CSharp
      name:
        CSharp: Lenght
        VB: Lenght
      nameWithType:
        CSharp: GenericWaterPipeData.Lenght
        VB: GenericWaterPipeData.Lenght
      qualifiedName:
        CSharp: GenericWaterPipeData.Lenght
        VB: GenericWaterPipeData.Lenght
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Lenght
        path: ''
        startLine: 8453
      summary: "\nLenght set/get\n"
      example: []
      syntax:
        content:
          CSharp: public float Lenght { get; set; }
          VB: Public Property Lenght As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.GenericWaterPipeData.Lenght*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.GenericWaterPipeData.ComputeVolume
      commentId: M:Global.GenericWaterPipeData.ComputeVolume
      language: CSharp
      name:
        CSharp: ComputeVolume()
        VB: ComputeVolume()
      nameWithType:
        CSharp: GenericWaterPipeData.ComputeVolume()
        VB: GenericWaterPipeData.ComputeVolume()
      qualifiedName:
        CSharp: GenericWaterPipeData.ComputeVolume()
        VB: GenericWaterPipeData.ComputeVolume()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ComputeVolume
        path: ''
        startLine: 8478
      summary: "\nthis method return volume of pipe(m3)\nFormula: Volume = π*diameter*leght\n"
      example: []
      syntax:
        content:
          CSharp: public override float ComputeVolume()
          VB: Public Overrides Function ComputeVolume As Single
        return:
          type: System.Single
          description: ''
      overload: Global.GenericWaterPipeData.ComputeVolume*
      overridden: Global.GenericDeviceData.ComputeVolume
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
references:
  Global.Light:
    name:
      CSharp:
      - id: Global.Light
        name: Light
        nameWithType: Light
        qualifiedName: Light
        isExternal: true
      VB:
      - id: Global.Light
        name: Light
        nameWithType: Light
        qualifiedName: Light
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Light'
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Global.LightFlickerEffect.Reset*:
    name:
      CSharp:
      - id: Global.LightFlickerEffect.Reset*
        name: Reset
        nameWithType: LightFlickerEffect.Reset
        qualifiedName: LightFlickerEffect.Reset
      VB:
      - id: Global.LightFlickerEffect.Reset*
        name: Reset
        nameWithType: LightFlickerEffect.Reset
        qualifiedName: LightFlickerEffect.Reset
    isDefinition: true
    commentId: Overload:Global.LightFlickerEffect.Reset
  Global.LightFlickerEffect:
    name:
      CSharp:
      - id: Global.LightFlickerEffect
        name: LightFlickerEffect
        nameWithType: LightFlickerEffect
        qualifiedName: LightFlickerEffect
      VB:
      - id: Global.LightFlickerEffect
        name: LightFlickerEffect
        nameWithType: LightFlickerEffect
        qualifiedName: LightFlickerEffect
    isDefinition: true
    commentId: T:Global.LightFlickerEffect
  Global.DeviceEditor:
    name:
      CSharp:
      - id: Global.DeviceEditor
        name: DeviceEditor
        nameWithType: DeviceEditor
        qualifiedName: DeviceEditor
      VB:
      - id: Global.DeviceEditor
        name: DeviceEditor
        nameWithType: DeviceEditor
        qualifiedName: DeviceEditor
    isDefinition: true
    commentId: T:Global.DeviceEditor
  Global.Object:
    name:
      CSharp:
      - id: Global.Object
        name: Object
        nameWithType: Object
        qualifiedName: Object
        isExternal: true
      VB:
      - id: Global.Object
        name: Object
        nameWithType: Object
        qualifiedName: Object
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Object'
  Global.SomeEditor.OnInspectorGUI*:
    name:
      CSharp:
      - id: Global.SomeEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: SomeEditor.OnInspectorGUI
        qualifiedName: SomeEditor.OnInspectorGUI
      VB:
      - id: Global.SomeEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: SomeEditor.OnInspectorGUI
        qualifiedName: SomeEditor.OnInspectorGUI
    isDefinition: true
    commentId: Overload:Global.SomeEditor.OnInspectorGUI
  Global.SomeEditor:
    name:
      CSharp:
      - id: Global.SomeEditor
        name: SomeEditor
        nameWithType: SomeEditor
        qualifiedName: SomeEditor
      VB:
      - id: Global.SomeEditor
        name: SomeEditor
        nameWithType: SomeEditor
        qualifiedName: SomeEditor
    isDefinition: true
    commentId: T:Global.SomeEditor
  Global.SlotOut:
    name:
      CSharp:
      - id: Global.SlotOut
        name: SlotOut
        nameWithType: SlotOut
        qualifiedName: SlotOut
      VB:
      - id: Global.SlotOut
        name: SlotOut
        nameWithType: SlotOut
        qualifiedName: SlotOut
    isDefinition: true
    commentId: T:Global.SlotOut
  Global.GenericDM.Start*:
    name:
      CSharp:
      - id: Global.GenericDM.Start*
        name: Start
        nameWithType: GenericDM.Start
        qualifiedName: GenericDM.Start
      VB:
      - id: Global.GenericDM.Start*
        name: Start
        nameWithType: GenericDM.Start
        qualifiedName: GenericDM.Start
    isDefinition: true
    commentId: Overload:Global.GenericDM.Start
  Global.DeviceData:
    name:
      CSharp:
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      VB:
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
    isDefinition: true
    commentId: T:Global.DeviceData
  Global.GenericDM.DoDM*:
    name:
      CSharp:
      - id: Global.GenericDM.DoDM*
        name: DoDM
        nameWithType: GenericDM.DoDM
        qualifiedName: GenericDM.DoDM
      VB:
      - id: Global.GenericDM.DoDM*
        name: DoDM
        nameWithType: GenericDM.DoDM
        qualifiedName: GenericDM.DoDM
    isDefinition: true
    commentId: Overload:Global.GenericDM.DoDM
  Global.GenericDM:
    name:
      CSharp:
      - id: Global.GenericDM
        name: GenericDM
        nameWithType: GenericDM
        qualifiedName: GenericDM
      VB:
      - id: Global.GenericDM
        name: GenericDM
        nameWithType: GenericDM
        qualifiedName: GenericDM
    isDefinition: true
    commentId: T:Global.GenericDM
  Global.Transform:
    name:
      CSharp:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
    isDefinition: true
  Global.LookWithMouse:
    name:
      CSharp:
      - id: Global.LookWithMouse
        name: LookWithMouse
        nameWithType: LookWithMouse
        qualifiedName: LookWithMouse
      VB:
      - id: Global.LookWithMouse
        name: LookWithMouse
        nameWithType: LookWithMouse
        qualifiedName: LookWithMouse
    isDefinition: true
    commentId: T:Global.LookWithMouse
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  Global.AnimationCurve:
    name:
      CSharp:
      - id: Global.AnimationCurve
        name: AnimationCurve
        nameWithType: AnimationCurve
        qualifiedName: AnimationCurve
        isExternal: true
      VB:
      - id: Global.AnimationCurve
        name: AnimationCurve
        nameWithType: AnimationCurve
        qualifiedName: AnimationCurve
        isExternal: true
    isDefinition: true
  Global.MathHelper.FlipCurve*:
    name:
      CSharp:
      - id: Global.MathHelper.FlipCurve*
        name: FlipCurve
        nameWithType: MathHelper.FlipCurve
        qualifiedName: MathHelper.FlipCurve
      VB:
      - id: Global.MathHelper.FlipCurve*
        name: FlipCurve
        nameWithType: MathHelper.FlipCurve
        qualifiedName: MathHelper.FlipCurve
    isDefinition: true
    commentId: Overload:Global.MathHelper.FlipCurve
  Global.MathHelper.FlipCurve2*:
    name:
      CSharp:
      - id: Global.MathHelper.FlipCurve2*
        name: FlipCurve2
        nameWithType: MathHelper.FlipCurve2
        qualifiedName: MathHelper.FlipCurve2
      VB:
      - id: Global.MathHelper.FlipCurve2*
        name: FlipCurve2
        nameWithType: MathHelper.FlipCurve2
        qualifiedName: MathHelper.FlipCurve2
    isDefinition: true
    commentId: Overload:Global.MathHelper.FlipCurve2
  Global.MathHelper.SumCurve*:
    name:
      CSharp:
      - id: Global.MathHelper.SumCurve*
        name: SumCurve
        nameWithType: MathHelper.SumCurve
        qualifiedName: MathHelper.SumCurve
      VB:
      - id: Global.MathHelper.SumCurve*
        name: SumCurve
        nameWithType: MathHelper.SumCurve
        qualifiedName: MathHelper.SumCurve
    isDefinition: true
    commentId: Overload:Global.MathHelper.SumCurve
  Global.MathHelper.SumCurve2*:
    name:
      CSharp:
      - id: Global.MathHelper.SumCurve2*
        name: SumCurve2
        nameWithType: MathHelper.SumCurve2
        qualifiedName: MathHelper.SumCurve2
      VB:
      - id: Global.MathHelper.SumCurve2*
        name: SumCurve2
        nameWithType: MathHelper.SumCurve2
        qualifiedName: MathHelper.SumCurve2
    isDefinition: true
    commentId: Overload:Global.MathHelper.SumCurve2
  Global.MathHelper:
    name:
      CSharp:
      - id: Global.MathHelper
        name: MathHelper
        nameWithType: MathHelper
        qualifiedName: MathHelper
      VB:
      - id: Global.MathHelper
        name: MathHelper
        nameWithType: MathHelper
        qualifiedName: MathHelper
    isDefinition: true
    commentId: T:Global.MathHelper
  Global.CharacterController:
    name:
      CSharp:
      - id: Global.CharacterController
        name: CharacterController
        nameWithType: CharacterController
        qualifiedName: CharacterController
        isExternal: true
      VB:
      - id: Global.CharacterController
        name: CharacterController
        nameWithType: CharacterController
        qualifiedName: CharacterController
        isExternal: true
    isDefinition: true
    commentId: '!:Global.CharacterController'
  Global.LayerMask:
    name:
      CSharp:
      - id: Global.LayerMask
        name: LayerMask
        nameWithType: LayerMask
        qualifiedName: LayerMask
        isExternal: true
      VB:
      - id: Global.LayerMask
        name: LayerMask
        nameWithType: LayerMask
        qualifiedName: LayerMask
        isExternal: true
    isDefinition: true
    commentId: '!:Global.LayerMask'
  Global.PlayerMovement:
    name:
      CSharp:
      - id: Global.PlayerMovement
        name: PlayerMovement
        nameWithType: PlayerMovement
        qualifiedName: PlayerMovement
      VB:
      - id: Global.PlayerMovement
        name: PlayerMovement
        nameWithType: PlayerMovement
        qualifiedName: PlayerMovement
    isDefinition: true
    commentId: T:Global.PlayerMovement
  Global.GenericDM.device:
    name:
      CSharp:
      - id: Global.GenericDM.device
        name: device
        nameWithType: GenericDM.device
        qualifiedName: GenericDM.device
      VB:
      - id: Global.GenericDM.device
        name: device
        nameWithType: GenericDM.device
        qualifiedName: GenericDM.device
    isDefinition: true
    parent: Global.GenericDM
    commentId: F:Global.GenericDM.device
  Global.GenericDM.Start:
    name:
      CSharp:
      - id: Global.GenericDM.Start
        name: Start
        nameWithType: GenericDM.Start
        qualifiedName: GenericDM.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDM.Start
        name: Start
        nameWithType: GenericDM.Start
        qualifiedName: GenericDM.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDM
    commentId: M:Global.GenericDM.Start
  Global.Text:
    name:
      CSharp:
      - id: Global.Text
        name: Text
        nameWithType: Text
        qualifiedName: Text
        isExternal: true
      VB:
      - id: Global.Text
        name: Text
        nameWithType: Text
        qualifiedName: Text
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Text'
  Global.GenericDM.DoDM(DeviceData):
    name:
      CSharp:
      - id: Global.GenericDM.DoDM(DeviceData)
        name: DoDM
        nameWithType: GenericDM.DoDM
        qualifiedName: GenericDM.DoDM
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDM.DoDM(DeviceData)
        name: DoDM
        nameWithType: GenericDM.DoDM
        qualifiedName: GenericDM.DoDM
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDM
    commentId: M:Global.GenericDM.DoDM(DeviceData)
  Global.TextDM.DoDM*:
    name:
      CSharp:
      - id: Global.TextDM.DoDM*
        name: DoDM
        nameWithType: TextDM.DoDM
        qualifiedName: TextDM.DoDM
      VB:
      - id: Global.TextDM.DoDM*
        name: DoDM
        nameWithType: TextDM.DoDM
        qualifiedName: TextDM.DoDM
    isDefinition: true
    commentId: Overload:Global.TextDM.DoDM
  Global.TextDM:
    name:
      CSharp:
      - id: Global.TextDM
        name: TextDM
        nameWithType: TextDM
        qualifiedName: TextDM
      VB:
      - id: Global.TextDM
        name: TextDM
        nameWithType: TextDM
        qualifiedName: TextDM
    isDefinition: true
    commentId: T:Global.TextDM
  Global.ValveLog:
    name:
      CSharp:
      - id: Global.ValveLog
        name: ValveLog
        nameWithType: ValveLog
        qualifiedName: ValveLog
      VB:
      - id: Global.ValveLog
        name: ValveLog
        nameWithType: ValveLog
        qualifiedName: ValveLog
    isDefinition: true
    commentId: T:Global.ValveLog
  Global.FlyCamera:
    name:
      CSharp:
      - id: Global.FlyCamera
        name: FlyCamera
        nameWithType: FlyCamera
        qualifiedName: FlyCamera
      VB:
      - id: Global.FlyCamera
        name: FlyCamera
        nameWithType: FlyCamera
        qualifiedName: FlyCamera
    isDefinition: true
    commentId: T:Global.FlyCamera
  Global.MouseControl:
    name:
      CSharp:
      - id: Global.MouseControl
        name: MouseControl
        nameWithType: MouseControl
        qualifiedName: MouseControl
      VB:
      - id: Global.MouseControl
        name: MouseControl
        nameWithType: MouseControl
        qualifiedName: MouseControl
    isDefinition: true
    commentId: T:Global.MouseControl
  Global.DeviceData.Id*:
    name:
      CSharp:
      - id: Global.DeviceData.Id*
        name: Id
        nameWithType: DeviceData.Id
        qualifiedName: DeviceData.Id
      VB:
      - id: Global.DeviceData.Id*
        name: Id
        nameWithType: DeviceData.Id
        qualifiedName: DeviceData.Id
    isDefinition: true
    commentId: Overload:Global.DeviceData.Id
  Global.DeviceData.TimeStamp*:
    name:
      CSharp:
      - id: Global.DeviceData.TimeStamp*
        name: TimeStamp
        nameWithType: DeviceData.TimeStamp
        qualifiedName: DeviceData.TimeStamp
      VB:
      - id: Global.DeviceData.TimeStamp*
        name: TimeStamp
        nameWithType: DeviceData.TimeStamp
        qualifiedName: DeviceData.TimeStamp
    isDefinition: true
    commentId: Overload:Global.DeviceData.TimeStamp
  Global.DeviceData.#ctor*:
    name:
      CSharp:
      - id: Global.DeviceData.#ctor*
        name: DeviceData
        nameWithType: DeviceData.DeviceData
        qualifiedName: DeviceData.DeviceData
      VB:
      - id: Global.DeviceData.#ctor*
        name: DeviceData
        nameWithType: DeviceData.DeviceData
        qualifiedName: DeviceData.DeviceData
    isDefinition: true
    commentId: Overload:Global.DeviceData.#ctor
  Global.DeviceParamType:
    name:
      CSharp:
      - id: Global.DeviceParamType
        name: DeviceParamType
        nameWithType: DeviceParamType
        qualifiedName: DeviceParamType
      VB:
      - id: Global.DeviceParamType
        name: DeviceParamType
        nameWithType: DeviceParamType
        qualifiedName: DeviceParamType
    isDefinition: true
    commentId: T:Global.DeviceParamType
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Global.DeviceParam:
    name:
      CSharp:
      - id: Global.DeviceParam
        name: DeviceParam
        nameWithType: DeviceParam
        qualifiedName: DeviceParam
      VB:
      - id: Global.DeviceParam
        name: DeviceParam
        nameWithType: DeviceParam
        qualifiedName: DeviceParam
    isDefinition: true
    commentId: T:Global.DeviceParam
  Global.DeviceData.Id:
    name:
      CSharp:
      - id: Global.DeviceData.Id
        name: Id
        nameWithType: DeviceData.Id
        qualifiedName: DeviceData.Id
      VB:
      - id: Global.DeviceData.Id
        name: Id
        nameWithType: DeviceData.Id
        qualifiedName: DeviceData.Id
    isDefinition: true
    parent: Global.DeviceData
    commentId: P:Global.DeviceData.Id
  Global.DeviceData.TimeStamp:
    name:
      CSharp:
      - id: Global.DeviceData.TimeStamp
        name: TimeStamp
        nameWithType: DeviceData.TimeStamp
        qualifiedName: DeviceData.TimeStamp
      VB:
      - id: Global.DeviceData.TimeStamp
        name: TimeStamp
        nameWithType: DeviceData.TimeStamp
        qualifiedName: DeviceData.TimeStamp
    isDefinition: true
    parent: Global.DeviceData
    commentId: P:Global.DeviceData.TimeStamp
  Global.FluidData.Temperature*:
    name:
      CSharp:
      - id: Global.FluidData.Temperature*
        name: Temperature
        nameWithType: FluidData.Temperature
        qualifiedName: FluidData.Temperature
      VB:
      - id: Global.FluidData.Temperature*
        name: Temperature
        nameWithType: FluidData.Temperature
        qualifiedName: FluidData.Temperature
    isDefinition: true
    commentId: Overload:Global.FluidData.Temperature
  Global.FluidData.Mass*:
    name:
      CSharp:
      - id: Global.FluidData.Mass*
        name: Mass
        nameWithType: FluidData.Mass
        qualifiedName: FluidData.Mass
      VB:
      - id: Global.FluidData.Mass*
        name: Mass
        nameWithType: FluidData.Mass
        qualifiedName: FluidData.Mass
    isDefinition: true
    commentId: Overload:Global.FluidData.Mass
  Global.FluidData.FlowRate*:
    name:
      CSharp:
      - id: Global.FluidData.FlowRate*
        name: FlowRate
        nameWithType: FluidData.FlowRate
        qualifiedName: FluidData.FlowRate
      VB:
      - id: Global.FluidData.FlowRate*
        name: FlowRate
        nameWithType: FluidData.FlowRate
        qualifiedName: FluidData.FlowRate
    isDefinition: true
    commentId: Overload:Global.FluidData.FlowRate
  Global.FluidData.Q*:
    name:
      CSharp:
      - id: Global.FluidData.Q*
        name: Q
        nameWithType: FluidData.Q
        qualifiedName: FluidData.Q
      VB:
      - id: Global.FluidData.Q*
        name: Q
        nameWithType: FluidData.Q
        qualifiedName: FluidData.Q
    isDefinition: true
    commentId: Overload:Global.FluidData.Q
  Global.FluidData.MaxCubicMeterPerHour*:
    name:
      CSharp:
      - id: Global.FluidData.MaxCubicMeterPerHour*
        name: MaxCubicMeterPerHour
        nameWithType: FluidData.MaxCubicMeterPerHour
        qualifiedName: FluidData.MaxCubicMeterPerHour
      VB:
      - id: Global.FluidData.MaxCubicMeterPerHour*
        name: MaxCubicMeterPerHour
        nameWithType: FluidData.MaxCubicMeterPerHour
        qualifiedName: FluidData.MaxCubicMeterPerHour
    isDefinition: true
    commentId: Overload:Global.FluidData.MaxCubicMeterPerHour
  Global.FluidData.PressureLoss*:
    name:
      CSharp:
      - id: Global.FluidData.PressureLoss*
        name: PressureLoss
        nameWithType: FluidData.PressureLoss
        qualifiedName: FluidData.PressureLoss
      VB:
      - id: Global.FluidData.PressureLoss*
        name: PressureLoss
        nameWithType: FluidData.PressureLoss
        qualifiedName: FluidData.PressureLoss
    isDefinition: true
    commentId: Overload:Global.FluidData.PressureLoss
  Global.FluidData.CircuitID*:
    name:
      CSharp:
      - id: Global.FluidData.CircuitID*
        name: CircuitID
        nameWithType: FluidData.CircuitID
        qualifiedName: FluidData.CircuitID
      VB:
      - id: Global.FluidData.CircuitID*
        name: CircuitID
        nameWithType: FluidData.CircuitID
        qualifiedName: FluidData.CircuitID
    isDefinition: true
    commentId: Overload:Global.FluidData.CircuitID
  Global.FluidData.FlowID*:
    name:
      CSharp:
      - id: Global.FluidData.FlowID*
        name: FlowID
        nameWithType: FluidData.FlowID
        qualifiedName: FluidData.FlowID
      VB:
      - id: Global.FluidData.FlowID*
        name: FlowID
        nameWithType: FluidData.FlowID
        qualifiedName: FluidData.FlowID
    isDefinition: true
    commentId: Overload:Global.FluidData.FlowID
  Global.FluidData:
    name:
      CSharp:
      - id: Global.FluidData
        name: FluidData
        nameWithType: FluidData
        qualifiedName: FluidData
      VB:
      - id: Global.FluidData
        name: FluidData
        nameWithType: FluidData
        qualifiedName: FluidData
    isDefinition: true
    commentId: T:Global.FluidData
  Global.FluidData.#ctor*:
    name:
      CSharp:
      - id: Global.FluidData.#ctor*
        name: FluidData
        nameWithType: FluidData.FluidData
        qualifiedName: FluidData.FluidData
      VB:
      - id: Global.FluidData.#ctor*
        name: FluidData
        nameWithType: FluidData.FluidData
        qualifiedName: FluidData.FluidData
    isDefinition: true
    commentId: Overload:Global.FluidData.#ctor
  Global.HeaterBoilerData:
    name:
      CSharp:
      - id: Global.HeaterBoilerData
        name: HeaterBoilerData
        nameWithType: HeaterBoilerData
        qualifiedName: HeaterBoilerData
      VB:
      - id: Global.HeaterBoilerData
        name: HeaterBoilerData
        nameWithType: HeaterBoilerData
        qualifiedName: HeaterBoilerData
    isDefinition: true
    commentId: T:Global.HeaterBoilerData
  Global.WaterSourceData:
    name:
      CSharp:
      - id: Global.WaterSourceData
        name: WaterSourceData
        nameWithType: WaterSourceData
        qualifiedName: WaterSourceData
      VB:
      - id: Global.WaterSourceData
        name: WaterSourceData
        nameWithType: WaterSourceData
        qualifiedName: WaterSourceData
    isDefinition: true
    commentId: T:Global.WaterSourceData
  Global.WaterSourceData.temperature:
    name:
      CSharp:
      - id: Global.WaterSourceData.temperature
        name: temperature
        nameWithType: WaterSourceData.temperature
        qualifiedName: WaterSourceData.temperature
      VB:
      - id: Global.WaterSourceData.temperature
        name: temperature
        nameWithType: WaterSourceData.temperature
        qualifiedName: WaterSourceData.temperature
    isDefinition: true
    parent: Global.WaterSourceData
    commentId: F:Global.WaterSourceData.temperature
  Global.WaterSourceData.literPerMinute:
    name:
      CSharp:
      - id: Global.WaterSourceData.literPerMinute
        name: literPerMinute
        nameWithType: WaterSourceData.literPerMinute
        qualifiedName: WaterSourceData.literPerMinute
      VB:
      - id: Global.WaterSourceData.literPerMinute
        name: literPerMinute
        nameWithType: WaterSourceData.literPerMinute
        qualifiedName: WaterSourceData.literPerMinute
    isDefinition: true
    parent: Global.WaterSourceData
    commentId: F:Global.WaterSourceData.literPerMinute
  Global.WaterSourceData.bar:
    name:
      CSharp:
      - id: Global.WaterSourceData.bar
        name: bar
        nameWithType: WaterSourceData.bar
        qualifiedName: WaterSourceData.bar
      VB:
      - id: Global.WaterSourceData.bar
        name: bar
        nameWithType: WaterSourceData.bar
        qualifiedName: WaterSourceData.bar
    isDefinition: true
    parent: Global.WaterSourceData
    commentId: F:Global.WaterSourceData.bar
  Global.WaterSourceData.diameter:
    name:
      CSharp:
      - id: Global.WaterSourceData.diameter
        name: diameter
        nameWithType: WaterSourceData.diameter
        qualifiedName: WaterSourceData.diameter
      VB:
      - id: Global.WaterSourceData.diameter
        name: diameter
        nameWithType: WaterSourceData.diameter
        qualifiedName: WaterSourceData.diameter
    isDefinition: true
    parent: Global.WaterSourceData
    commentId: F:Global.WaterSourceData.diameter
  Global.WaterSourceData.Temperature:
    name:
      CSharp:
      - id: Global.WaterSourceData.Temperature
        name: Temperature
        nameWithType: WaterSourceData.Temperature
        qualifiedName: WaterSourceData.Temperature
      VB:
      - id: Global.WaterSourceData.Temperature
        name: Temperature
        nameWithType: WaterSourceData.Temperature
        qualifiedName: WaterSourceData.Temperature
    isDefinition: true
    parent: Global.WaterSourceData
    commentId: P:Global.WaterSourceData.Temperature
  Global.WaterSourceData.LiterPerMinute:
    name:
      CSharp:
      - id: Global.WaterSourceData.LiterPerMinute
        name: LiterPerMinute
        nameWithType: WaterSourceData.LiterPerMinute
        qualifiedName: WaterSourceData.LiterPerMinute
      VB:
      - id: Global.WaterSourceData.LiterPerMinute
        name: LiterPerMinute
        nameWithType: WaterSourceData.LiterPerMinute
        qualifiedName: WaterSourceData.LiterPerMinute
    isDefinition: true
    parent: Global.WaterSourceData
    commentId: P:Global.WaterSourceData.LiterPerMinute
  Global.WaterSourceData.Diameter:
    name:
      CSharp:
      - id: Global.WaterSourceData.Diameter
        name: Diameter
        nameWithType: WaterSourceData.Diameter
        qualifiedName: WaterSourceData.Diameter
      VB:
      - id: Global.WaterSourceData.Diameter
        name: Diameter
        nameWithType: WaterSourceData.Diameter
        qualifiedName: WaterSourceData.Diameter
    isDefinition: true
    parent: Global.WaterSourceData
    commentId: P:Global.WaterSourceData.Diameter
  Global.WaterPipeData:
    name:
      CSharp:
      - id: Global.WaterPipeData
        name: WaterPipeData
        nameWithType: WaterPipeData
        qualifiedName: WaterPipeData
      VB:
      - id: Global.WaterPipeData
        name: WaterPipeData
        nameWithType: WaterPipeData
        qualifiedName: WaterPipeData
    isDefinition: true
    commentId: T:Global.WaterPipeData
  Global.WaterSourceData.Temperature*:
    name:
      CSharp:
      - id: Global.WaterSourceData.Temperature*
        name: Temperature
        nameWithType: WaterSourceData.Temperature
        qualifiedName: WaterSourceData.Temperature
      VB:
      - id: Global.WaterSourceData.Temperature*
        name: Temperature
        nameWithType: WaterSourceData.Temperature
        qualifiedName: WaterSourceData.Temperature
    isDefinition: true
    commentId: Overload:Global.WaterSourceData.Temperature
  Global.WaterSourceData.LiterPerMinute*:
    name:
      CSharp:
      - id: Global.WaterSourceData.LiterPerMinute*
        name: LiterPerMinute
        nameWithType: WaterSourceData.LiterPerMinute
        qualifiedName: WaterSourceData.LiterPerMinute
      VB:
      - id: Global.WaterSourceData.LiterPerMinute*
        name: LiterPerMinute
        nameWithType: WaterSourceData.LiterPerMinute
        qualifiedName: WaterSourceData.LiterPerMinute
    isDefinition: true
    commentId: Overload:Global.WaterSourceData.LiterPerMinute
  Global.WaterSourceData.Diameter*:
    name:
      CSharp:
      - id: Global.WaterSourceData.Diameter*
        name: Diameter
        nameWithType: WaterSourceData.Diameter
        qualifiedName: WaterSourceData.Diameter
      VB:
      - id: Global.WaterSourceData.Diameter*
        name: Diameter
        nameWithType: WaterSourceData.Diameter
        qualifiedName: WaterSourceData.Diameter
    isDefinition: true
    commentId: Overload:Global.WaterSourceData.Diameter
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
    commentId: '!:T'
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  Global.Singleton`1.Instance*:
    name:
      CSharp:
      - id: Global.Singleton`1.Instance*
        name: Instance
        nameWithType: Singleton<T>.Instance
        qualifiedName: Singleton<T>.Instance
      VB:
      - id: Global.Singleton`1.Instance*
        name: Instance
        nameWithType: Singleton(Of T).Instance
        qualifiedName: Singleton(Of T).Instance
    isDefinition: true
    commentId: Overload:Global.Singleton`1.Instance
  Global.Singleton`1.OnDestroy*:
    name:
      CSharp:
      - id: Global.Singleton`1.OnDestroy*
        name: OnDestroy
        nameWithType: Singleton<T>.OnDestroy
        qualifiedName: Singleton<T>.OnDestroy
      VB:
      - id: Global.Singleton`1.OnDestroy*
        name: OnDestroy
        nameWithType: Singleton(Of T).OnDestroy
        qualifiedName: Singleton(Of T).OnDestroy
    isDefinition: true
    commentId: Overload:Global.Singleton`1.OnDestroy
  Global.Singleton`1:
    name:
      CSharp:
      - id: Global.Singleton`1
        name: Singleton
        nameWithType: Singleton
        qualifiedName: Singleton
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Singleton`1
        name: Singleton
        nameWithType: Singleton
        qualifiedName: Singleton
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Global.Singleton`1
  Global.GenericDevice:
    name:
      CSharp:
      - id: Global.GenericDevice
        name: GenericDevice
        nameWithType: GenericDevice
        qualifiedName: GenericDevice
      VB:
      - id: Global.GenericDevice
        name: GenericDevice
        nameWithType: GenericDevice
        qualifiedName: GenericDevice
    isDefinition: true
    commentId: T:Global.GenericDevice
  Global.GenericDevice.deviceData:
    name:
      CSharp:
      - id: Global.GenericDevice.deviceData
        name: deviceData
        nameWithType: GenericDevice.deviceData
        qualifiedName: GenericDevice.deviceData
      VB:
      - id: Global.GenericDevice.deviceData
        name: deviceData
        nameWithType: GenericDevice.deviceData
        qualifiedName: GenericDevice.deviceData
    isDefinition: true
    parent: Global.GenericDevice
    commentId: F:Global.GenericDevice.deviceData
  Global.GenericDevice.DeviceData:
    name:
      CSharp:
      - id: Global.GenericDevice.DeviceData
        name: DeviceData
        nameWithType: GenericDevice.DeviceData
        qualifiedName: GenericDevice.DeviceData
      VB:
      - id: Global.GenericDevice.DeviceData
        name: DeviceData
        nameWithType: GenericDevice.DeviceData
        qualifiedName: GenericDevice.DeviceData
    isDefinition: true
    parent: Global.GenericDevice
    commentId: P:Global.GenericDevice.DeviceData
  Global.GenericDevice.pressureLoss:
    name:
      CSharp:
      - id: Global.GenericDevice.pressureLoss
        name: pressureLoss
        nameWithType: GenericDevice.pressureLoss
        qualifiedName: GenericDevice.pressureLoss
      VB:
      - id: Global.GenericDevice.pressureLoss
        name: pressureLoss
        nameWithType: GenericDevice.pressureLoss
        qualifiedName: GenericDevice.pressureLoss
    isDefinition: true
    parent: Global.GenericDevice
    commentId: F:Global.GenericDevice.pressureLoss
  Global.GenericDevice.currentQ:
    name:
      CSharp:
      - id: Global.GenericDevice.currentQ
        name: currentQ
        nameWithType: GenericDevice.currentQ
        qualifiedName: GenericDevice.currentQ
      VB:
      - id: Global.GenericDevice.currentQ
        name: currentQ
        nameWithType: GenericDevice.currentQ
        qualifiedName: GenericDevice.currentQ
    isDefinition: true
    parent: Global.GenericDevice
    commentId: F:Global.GenericDevice.currentQ
  Global.GenericDevice.simulationStartPoint:
    name:
      CSharp:
      - id: Global.GenericDevice.simulationStartPoint
        name: simulationStartPoint
        nameWithType: GenericDevice.simulationStartPoint
        qualifiedName: GenericDevice.simulationStartPoint
      VB:
      - id: Global.GenericDevice.simulationStartPoint
        name: simulationStartPoint
        nameWithType: GenericDevice.simulationStartPoint
        qualifiedName: GenericDevice.simulationStartPoint
    isDefinition: true
    parent: Global.GenericDevice
    commentId: F:Global.GenericDevice.simulationStartPoint
  Global.GenericDevice.listOfSlotIn:
    name:
      CSharp:
      - id: Global.GenericDevice.listOfSlotIn
        name: listOfSlotIn
        nameWithType: GenericDevice.listOfSlotIn
        qualifiedName: GenericDevice.listOfSlotIn
      VB:
      - id: Global.GenericDevice.listOfSlotIn
        name: listOfSlotIn
        nameWithType: GenericDevice.listOfSlotIn
        qualifiedName: GenericDevice.listOfSlotIn
    isDefinition: true
    parent: Global.GenericDevice
    commentId: F:Global.GenericDevice.listOfSlotIn
  Global.GenericDevice.instanceID:
    name:
      CSharp:
      - id: Global.GenericDevice.instanceID
        name: instanceID
        nameWithType: GenericDevice.instanceID
        qualifiedName: GenericDevice.instanceID
      VB:
      - id: Global.GenericDevice.instanceID
        name: instanceID
        nameWithType: GenericDevice.instanceID
        qualifiedName: GenericDevice.instanceID
    isDefinition: true
    parent: Global.GenericDevice
    commentId: F:Global.GenericDevice.instanceID
  Global.GenericDevice.OnAwake:
    name:
      CSharp:
      - id: Global.GenericDevice.OnAwake
        name: OnAwake
        nameWithType: GenericDevice.OnAwake
        qualifiedName: GenericDevice.OnAwake
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.OnAwake
        name: OnAwake
        nameWithType: GenericDevice.OnAwake
        qualifiedName: GenericDevice.OnAwake
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.OnAwake
  Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState):
    name:
      CSharp:
      - id: Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
        name: Send
        nameWithType: GenericDevice.Send
        qualifiedName: GenericDevice.Send
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
        name: Send
        nameWithType: GenericDevice.Send
        qualifiedName: GenericDevice.Send
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.Send(DeviceData,System.Int32,SimulationState)
  Global.GenericDevice.UpdateData(DeviceData,System.Int32):
    name:
      CSharp:
      - id: Global.GenericDevice.UpdateData(DeviceData,System.Int32)
        name: UpdateData
        nameWithType: GenericDevice.UpdateData
        qualifiedName: GenericDevice.UpdateData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.UpdateData(DeviceData,System.Int32)
        name: UpdateData
        nameWithType: GenericDevice.UpdateData
        qualifiedName: GenericDevice.UpdateData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.UpdateData(DeviceData,System.Int32)
  Global.GenericDevice.GetDeviceData:
    name:
      CSharp:
      - id: Global.GenericDevice.GetDeviceData
        name: GetDeviceData
        nameWithType: GenericDevice.GetDeviceData
        qualifiedName: GenericDevice.GetDeviceData
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.GetDeviceData
        name: GetDeviceData
        nameWithType: GenericDevice.GetDeviceData
        qualifiedName: GenericDevice.GetDeviceData
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.GetDeviceData
  Global.GenericDevice.GetParams:
    name:
      CSharp:
      - id: Global.GenericDevice.GetParams
        name: GetParams
        nameWithType: GenericDevice.GetParams
        qualifiedName: GenericDevice.GetParams
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.GetParams
        name: GetParams
        nameWithType: GenericDevice.GetParams
        qualifiedName: GenericDevice.GetParams
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.GetParams
  Global.GenericDevice.GetSlotsOut:
    name:
      CSharp:
      - id: Global.GenericDevice.GetSlotsOut
        name: GetSlotsOut
        nameWithType: GenericDevice.GetSlotsOut
        qualifiedName: GenericDevice.GetSlotsOut
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.GetSlotsOut
        name: GetSlotsOut
        nameWithType: GenericDevice.GetSlotsOut
        qualifiedName: GenericDevice.GetSlotsOut
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.GetSlotsOut
  Global.GenericDevice.GetSlotsIn:
    name:
      CSharp:
      - id: Global.GenericDevice.GetSlotsIn
        name: GetSlotsIn
        nameWithType: GenericDevice.GetSlotsIn
        qualifiedName: GenericDevice.GetSlotsIn
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.GetSlotsIn
        name: GetSlotsIn
        nameWithType: GenericDevice.GetSlotsIn
        qualifiedName: GenericDevice.GetSlotsIn
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.GetSlotsIn
  Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState):
    name:
      CSharp:
      - id: Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
        name: ForwardData
        nameWithType: GenericDevice.ForwardData
        qualifiedName: GenericDevice.ForwardData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
        name: ForwardData
        nameWithType: GenericDevice.ForwardData
        qualifiedName: GenericDevice.ForwardData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.ForwardData(DeviceData,System.Int32,SimulationState)
  Global.GenericDevice.RunSimulation:
    name:
      CSharp:
      - id: Global.GenericDevice.RunSimulation
        name: RunSimulation
        nameWithType: GenericDevice.RunSimulation
        qualifiedName: GenericDevice.RunSimulation
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.RunSimulation
        name: RunSimulation
        nameWithType: GenericDevice.RunSimulation
        qualifiedName: GenericDevice.RunSimulation
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.RunSimulation
  Global.GenericDevice.PreSimulation:
    name:
      CSharp:
      - id: Global.GenericDevice.PreSimulation
        name: PreSimulation
        nameWithType: GenericDevice.PreSimulation
        qualifiedName: GenericDevice.PreSimulation
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.PreSimulation
        name: PreSimulation
        nameWithType: GenericDevice.PreSimulation
        qualifiedName: GenericDevice.PreSimulation
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.PreSimulation
  Global.GenericDevice.GetParellel:
    name:
      CSharp:
      - id: Global.GenericDevice.GetParellel
        name: GetParellel
        nameWithType: GenericDevice.GetParellel
        qualifiedName: GenericDevice.GetParellel
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.GetParellel
        name: GetParellel
        nameWithType: GenericDevice.GetParellel
        qualifiedName: GenericDevice.GetParellel
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.GetParellel
  Global.GenericDevice.GetDevice:
    name:
      CSharp:
      - id: Global.GenericDevice.GetDevice
        name: GetDevice
        nameWithType: GenericDevice.GetDevice
        qualifiedName: GenericDevice.GetDevice
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.GetDevice
        name: GetDevice
        nameWithType: GenericDevice.GetDevice
        qualifiedName: GenericDevice.GetDevice
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.GetDevice
  Global.GenericDevice.GetSlotOutData(System.Int32):
    name:
      CSharp:
      - id: Global.GenericDevice.GetSlotOutData(System.Int32)
        name: GetSlotOutData
        nameWithType: GenericDevice.GetSlotOutData
        qualifiedName: GenericDevice.GetSlotOutData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.GetSlotOutData(System.Int32)
        name: GetSlotOutData
        nameWithType: GenericDevice.GetSlotOutData
        qualifiedName: GenericDevice.GetSlotOutData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.GetSlotOutData(System.Int32)
  Global.GenericDevice.GetSlotOutInstanceID(System.Int32):
    name:
      CSharp:
      - id: Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
        name: GetSlotOutInstanceID
        nameWithType: GenericDevice.GetSlotOutInstanceID
        qualifiedName: GenericDevice.GetSlotOutInstanceID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
        name: GetSlotOutInstanceID
        nameWithType: GenericDevice.GetSlotOutInstanceID
        qualifiedName: GenericDevice.GetSlotOutInstanceID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.GetSlotOutInstanceID(System.Int32)
  Global.GenericDevice.GetSlotInInstanceID(System.Int32):
    name:
      CSharp:
      - id: Global.GenericDevice.GetSlotInInstanceID(System.Int32)
        name: GetSlotInInstanceID
        nameWithType: GenericDevice.GetSlotInInstanceID
        qualifiedName: GenericDevice.GetSlotInInstanceID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.GetSlotInInstanceID(System.Int32)
        name: GetSlotInInstanceID
        nameWithType: GenericDevice.GetSlotInInstanceID
        qualifiedName: GenericDevice.GetSlotInInstanceID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.GetSlotInInstanceID(System.Int32)
  Global.GenericDevice.GetPressureLoss:
    name:
      CSharp:
      - id: Global.GenericDevice.GetPressureLoss
        name: GetPressureLoss
        nameWithType: GenericDevice.GetPressureLoss
        qualifiedName: GenericDevice.GetPressureLoss
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.GetPressureLoss
        name: GetPressureLoss
        nameWithType: GenericDevice.GetPressureLoss
        qualifiedName: GenericDevice.GetPressureLoss
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.GetPressureLoss
  Global.GenericDevice.SetPressureLoss(System.Single):
    name:
      CSharp:
      - id: Global.GenericDevice.SetPressureLoss(System.Single)
        name: SetPressureLoss
        nameWithType: GenericDevice.SetPressureLoss
        qualifiedName: GenericDevice.SetPressureLoss
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDevice.SetPressureLoss(System.Single)
        name: SetPressureLoss
        nameWithType: GenericDevice.SetPressureLoss
        qualifiedName: GenericDevice.SetPressureLoss
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDevice
    commentId: M:Global.GenericDevice.SetPressureLoss(System.Single)
  Global.IDevice:
    name:
      CSharp:
      - id: Global.IDevice
        name: IDevice
        nameWithType: IDevice
        qualifiedName: IDevice
      VB:
      - id: Global.IDevice
        name: IDevice
        nameWithType: IDevice
        qualifiedName: IDevice
    isDefinition: true
    commentId: T:Global.IDevice
  Global.GenericConsumer:
    name:
      CSharp:
      - id: Global.GenericConsumer
        name: GenericConsumer
        nameWithType: GenericConsumer
        qualifiedName: GenericConsumer
      VB:
      - id: Global.GenericConsumer
        name: GenericConsumer
        nameWithType: GenericConsumer
        qualifiedName: GenericConsumer
    isDefinition: true
    commentId: T:Global.GenericConsumer
  Global.GenericDeviceData:
    name:
      CSharp:
      - id: Global.GenericDeviceData
        name: GenericDeviceData
        nameWithType: GenericDeviceData
        qualifiedName: GenericDeviceData
      VB:
      - id: Global.GenericDeviceData
        name: GenericDeviceData
        nameWithType: GenericDeviceData
        qualifiedName: GenericDeviceData
    isDefinition: true
    commentId: T:Global.GenericDeviceData
  Global.GenericDevice.DeviceData*:
    name:
      CSharp:
      - id: Global.GenericDevice.DeviceData*
        name: DeviceData
        nameWithType: GenericDevice.DeviceData
        qualifiedName: GenericDevice.DeviceData
      VB:
      - id: Global.GenericDevice.DeviceData*
        name: DeviceData
        nameWithType: GenericDevice.DeviceData
        qualifiedName: GenericDevice.DeviceData
    isDefinition: true
    commentId: Overload:Global.GenericDevice.DeviceData
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Global.SlotIn[]:
    name:
      CSharp:
      - id: Global.SlotIn
        name: SlotIn
        nameWithType: SlotIn
        qualifiedName: SlotIn
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.SlotIn
        name: SlotIn
        nameWithType: SlotIn
        qualifiedName: SlotIn
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.GenericDevice.OnAwake*:
    name:
      CSharp:
      - id: Global.GenericDevice.OnAwake*
        name: OnAwake
        nameWithType: GenericDevice.OnAwake
        qualifiedName: GenericDevice.OnAwake
      VB:
      - id: Global.GenericDevice.OnAwake*
        name: OnAwake
        nameWithType: GenericDevice.OnAwake
        qualifiedName: GenericDevice.OnAwake
    isDefinition: true
    commentId: Overload:Global.GenericDevice.OnAwake
  Global.SimulationState:
    name:
      CSharp:
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      VB:
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
    isDefinition: true
    commentId: T:Global.SimulationState
  Global.GenericDevice.Send*:
    name:
      CSharp:
      - id: Global.GenericDevice.Send*
        name: Send
        nameWithType: GenericDevice.Send
        qualifiedName: GenericDevice.Send
      VB:
      - id: Global.GenericDevice.Send*
        name: Send
        nameWithType: GenericDevice.Send
        qualifiedName: GenericDevice.Send
    isDefinition: true
    commentId: Overload:Global.GenericDevice.Send
  Global.IDevice.Send(DeviceData,System.Int32,SimulationState):
    name:
      CSharp:
      - id: Global.IDevice.Send(DeviceData,System.Int32,SimulationState)
        name: Send
        nameWithType: IDevice.Send
        qualifiedName: IDevice.Send
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IDevice.Send(DeviceData,System.Int32,SimulationState)
        name: Send
        nameWithType: IDevice.Send
        qualifiedName: IDevice.Send
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IDevice
    commentId: M:Global.IDevice.Send(DeviceData,System.Int32,SimulationState)
  Global.GenericDevice.UpdateData*:
    name:
      CSharp:
      - id: Global.GenericDevice.UpdateData*
        name: UpdateData
        nameWithType: GenericDevice.UpdateData
        qualifiedName: GenericDevice.UpdateData
      VB:
      - id: Global.GenericDevice.UpdateData*
        name: UpdateData
        nameWithType: GenericDevice.UpdateData
        qualifiedName: GenericDevice.UpdateData
    isDefinition: true
    commentId: Overload:Global.GenericDevice.UpdateData
  Global.IDevice.UpdateData(DeviceData,System.Int32):
    name:
      CSharp:
      - id: Global.IDevice.UpdateData(DeviceData,System.Int32)
        name: UpdateData
        nameWithType: IDevice.UpdateData
        qualifiedName: IDevice.UpdateData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IDevice.UpdateData(DeviceData,System.Int32)
        name: UpdateData
        nameWithType: IDevice.UpdateData
        qualifiedName: IDevice.UpdateData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IDevice
    commentId: M:Global.IDevice.UpdateData(DeviceData,System.Int32)
  Global.GenericDevice.GetDeviceData*:
    name:
      CSharp:
      - id: Global.GenericDevice.GetDeviceData*
        name: GetDeviceData
        nameWithType: GenericDevice.GetDeviceData
        qualifiedName: GenericDevice.GetDeviceData
      VB:
      - id: Global.GenericDevice.GetDeviceData*
        name: GetDeviceData
        nameWithType: GenericDevice.GetDeviceData
        qualifiedName: GenericDevice.GetDeviceData
    isDefinition: true
    commentId: Overload:Global.GenericDevice.GetDeviceData
  Global.IDevice.GetDeviceData:
    name:
      CSharp:
      - id: Global.IDevice.GetDeviceData
        name: GetDeviceData
        nameWithType: IDevice.GetDeviceData
        qualifiedName: IDevice.GetDeviceData
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IDevice.GetDeviceData
        name: GetDeviceData
        nameWithType: IDevice.GetDeviceData
        qualifiedName: IDevice.GetDeviceData
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IDevice
    commentId: M:Global.IDevice.GetDeviceData
  Global.GenericDevice.GetParams*:
    name:
      CSharp:
      - id: Global.GenericDevice.GetParams*
        name: GetParams
        nameWithType: GenericDevice.GetParams
        qualifiedName: GenericDevice.GetParams
      VB:
      - id: Global.GenericDevice.GetParams*
        name: GetParams
        nameWithType: GenericDevice.GetParams
        qualifiedName: GenericDevice.GetParams
    isDefinition: true
    commentId: Overload:Global.GenericDevice.GetParams
  Global.SlotOut[]:
    name:
      CSharp:
      - id: Global.SlotOut
        name: SlotOut
        nameWithType: SlotOut
        qualifiedName: SlotOut
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.SlotOut
        name: SlotOut
        nameWithType: SlotOut
        qualifiedName: SlotOut
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.GenericDevice.GetSlotsOut*:
    name:
      CSharp:
      - id: Global.GenericDevice.GetSlotsOut*
        name: GetSlotsOut
        nameWithType: GenericDevice.GetSlotsOut
        qualifiedName: GenericDevice.GetSlotsOut
      VB:
      - id: Global.GenericDevice.GetSlotsOut*
        name: GetSlotsOut
        nameWithType: GenericDevice.GetSlotsOut
        qualifiedName: GenericDevice.GetSlotsOut
    isDefinition: true
    commentId: Overload:Global.GenericDevice.GetSlotsOut
  Global.GenericDevice.GetSlotsIn*:
    name:
      CSharp:
      - id: Global.GenericDevice.GetSlotsIn*
        name: GetSlotsIn
        nameWithType: GenericDevice.GetSlotsIn
        qualifiedName: GenericDevice.GetSlotsIn
      VB:
      - id: Global.GenericDevice.GetSlotsIn*
        name: GetSlotsIn
        nameWithType: GenericDevice.GetSlotsIn
        qualifiedName: GenericDevice.GetSlotsIn
    isDefinition: true
    commentId: Overload:Global.GenericDevice.GetSlotsIn
  Global.GenericDevice.ForwardData*:
    name:
      CSharp:
      - id: Global.GenericDevice.ForwardData*
        name: ForwardData
        nameWithType: GenericDevice.ForwardData
        qualifiedName: GenericDevice.ForwardData
      VB:
      - id: Global.GenericDevice.ForwardData*
        name: ForwardData
        nameWithType: GenericDevice.ForwardData
        qualifiedName: GenericDevice.ForwardData
    isDefinition: true
    commentId: Overload:Global.GenericDevice.ForwardData
  Global.GenericDevice.RunSimulation*:
    name:
      CSharp:
      - id: Global.GenericDevice.RunSimulation*
        name: RunSimulation
        nameWithType: GenericDevice.RunSimulation
        qualifiedName: GenericDevice.RunSimulation
      VB:
      - id: Global.GenericDevice.RunSimulation*
        name: RunSimulation
        nameWithType: GenericDevice.RunSimulation
        qualifiedName: GenericDevice.RunSimulation
    isDefinition: true
    commentId: Overload:Global.GenericDevice.RunSimulation
  Global.GenericDevice.PreSimulation*:
    name:
      CSharp:
      - id: Global.GenericDevice.PreSimulation*
        name: PreSimulation
        nameWithType: GenericDevice.PreSimulation
        qualifiedName: GenericDevice.PreSimulation
      VB:
      - id: Global.GenericDevice.PreSimulation*
        name: PreSimulation
        nameWithType: GenericDevice.PreSimulation
        qualifiedName: GenericDevice.PreSimulation
    isDefinition: true
    commentId: Overload:Global.GenericDevice.PreSimulation
  Global.GenericDevice.GetParellel*:
    name:
      CSharp:
      - id: Global.GenericDevice.GetParellel*
        name: GetParellel
        nameWithType: GenericDevice.GetParellel
        qualifiedName: GenericDevice.GetParellel
      VB:
      - id: Global.GenericDevice.GetParellel*
        name: GetParellel
        nameWithType: GenericDevice.GetParellel
        qualifiedName: GenericDevice.GetParellel
    isDefinition: true
    commentId: Overload:Global.GenericDevice.GetParellel
  Global.IDevice.GetParellel:
    name:
      CSharp:
      - id: Global.IDevice.GetParellel
        name: GetParellel
        nameWithType: IDevice.GetParellel
        qualifiedName: IDevice.GetParellel
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IDevice.GetParellel
        name: GetParellel
        nameWithType: IDevice.GetParellel
        qualifiedName: IDevice.GetParellel
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IDevice
    commentId: M:Global.IDevice.GetParellel
  Global.GenericDevice.GetDevice*:
    name:
      CSharp:
      - id: Global.GenericDevice.GetDevice*
        name: GetDevice
        nameWithType: GenericDevice.GetDevice
        qualifiedName: GenericDevice.GetDevice
      VB:
      - id: Global.GenericDevice.GetDevice*
        name: GetDevice
        nameWithType: GenericDevice.GetDevice
        qualifiedName: GenericDevice.GetDevice
    isDefinition: true
    commentId: Overload:Global.GenericDevice.GetDevice
  Global.IDevice.GetDevice:
    name:
      CSharp:
      - id: Global.IDevice.GetDevice
        name: GetDevice
        nameWithType: IDevice.GetDevice
        qualifiedName: IDevice.GetDevice
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IDevice.GetDevice
        name: GetDevice
        nameWithType: IDevice.GetDevice
        qualifiedName: IDevice.GetDevice
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IDevice
    commentId: M:Global.IDevice.GetDevice
  Global.GenericDevice.GetSlotOutData*:
    name:
      CSharp:
      - id: Global.GenericDevice.GetSlotOutData*
        name: GetSlotOutData
        nameWithType: GenericDevice.GetSlotOutData
        qualifiedName: GenericDevice.GetSlotOutData
      VB:
      - id: Global.GenericDevice.GetSlotOutData*
        name: GetSlotOutData
        nameWithType: GenericDevice.GetSlotOutData
        qualifiedName: GenericDevice.GetSlotOutData
    isDefinition: true
    commentId: Overload:Global.GenericDevice.GetSlotOutData
  Global.IDevice.GetSlotOutData(System.Int32):
    name:
      CSharp:
      - id: Global.IDevice.GetSlotOutData(System.Int32)
        name: GetSlotOutData
        nameWithType: IDevice.GetSlotOutData
        qualifiedName: IDevice.GetSlotOutData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IDevice.GetSlotOutData(System.Int32)
        name: GetSlotOutData
        nameWithType: IDevice.GetSlotOutData
        qualifiedName: IDevice.GetSlotOutData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IDevice
    commentId: M:Global.IDevice.GetSlotOutData(System.Int32)
  Global.GenericDevice.GetSlotOutInstanceID*:
    name:
      CSharp:
      - id: Global.GenericDevice.GetSlotOutInstanceID*
        name: GetSlotOutInstanceID
        nameWithType: GenericDevice.GetSlotOutInstanceID
        qualifiedName: GenericDevice.GetSlotOutInstanceID
      VB:
      - id: Global.GenericDevice.GetSlotOutInstanceID*
        name: GetSlotOutInstanceID
        nameWithType: GenericDevice.GetSlotOutInstanceID
        qualifiedName: GenericDevice.GetSlotOutInstanceID
    isDefinition: true
    commentId: Overload:Global.GenericDevice.GetSlotOutInstanceID
  Global.IDevice.GetSlotOutInstanceID(System.Int32):
    name:
      CSharp:
      - id: Global.IDevice.GetSlotOutInstanceID(System.Int32)
        name: GetSlotOutInstanceID
        nameWithType: IDevice.GetSlotOutInstanceID
        qualifiedName: IDevice.GetSlotOutInstanceID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IDevice.GetSlotOutInstanceID(System.Int32)
        name: GetSlotOutInstanceID
        nameWithType: IDevice.GetSlotOutInstanceID
        qualifiedName: IDevice.GetSlotOutInstanceID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IDevice
    commentId: M:Global.IDevice.GetSlotOutInstanceID(System.Int32)
  Global.GenericDevice.GetSlotInInstanceID*:
    name:
      CSharp:
      - id: Global.GenericDevice.GetSlotInInstanceID*
        name: GetSlotInInstanceID
        nameWithType: GenericDevice.GetSlotInInstanceID
        qualifiedName: GenericDevice.GetSlotInInstanceID
      VB:
      - id: Global.GenericDevice.GetSlotInInstanceID*
        name: GetSlotInInstanceID
        nameWithType: GenericDevice.GetSlotInInstanceID
        qualifiedName: GenericDevice.GetSlotInInstanceID
    isDefinition: true
    commentId: Overload:Global.GenericDevice.GetSlotInInstanceID
  Global.IDevice.GetSlotInInstanceID(System.Int32):
    name:
      CSharp:
      - id: Global.IDevice.GetSlotInInstanceID(System.Int32)
        name: GetSlotInInstanceID
        nameWithType: IDevice.GetSlotInInstanceID
        qualifiedName: IDevice.GetSlotInInstanceID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IDevice.GetSlotInInstanceID(System.Int32)
        name: GetSlotInInstanceID
        nameWithType: IDevice.GetSlotInInstanceID
        qualifiedName: IDevice.GetSlotInInstanceID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IDevice
    commentId: M:Global.IDevice.GetSlotInInstanceID(System.Int32)
  Global.GenericDevice.GetPressureLoss*:
    name:
      CSharp:
      - id: Global.GenericDevice.GetPressureLoss*
        name: GetPressureLoss
        nameWithType: GenericDevice.GetPressureLoss
        qualifiedName: GenericDevice.GetPressureLoss
      VB:
      - id: Global.GenericDevice.GetPressureLoss*
        name: GetPressureLoss
        nameWithType: GenericDevice.GetPressureLoss
        qualifiedName: GenericDevice.GetPressureLoss
    isDefinition: true
    commentId: Overload:Global.GenericDevice.GetPressureLoss
  Global.IDevice.GetPressureLoss:
    name:
      CSharp:
      - id: Global.IDevice.GetPressureLoss
        name: GetPressureLoss
        nameWithType: IDevice.GetPressureLoss
        qualifiedName: IDevice.GetPressureLoss
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IDevice.GetPressureLoss
        name: GetPressureLoss
        nameWithType: IDevice.GetPressureLoss
        qualifiedName: IDevice.GetPressureLoss
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IDevice
    commentId: M:Global.IDevice.GetPressureLoss
  Global.GenericDevice.SetPressureLoss*:
    name:
      CSharp:
      - id: Global.GenericDevice.SetPressureLoss*
        name: SetPressureLoss
        nameWithType: GenericDevice.SetPressureLoss
        qualifiedName: GenericDevice.SetPressureLoss
      VB:
      - id: Global.GenericDevice.SetPressureLoss*
        name: SetPressureLoss
        nameWithType: GenericDevice.SetPressureLoss
        qualifiedName: GenericDevice.SetPressureLoss
    isDefinition: true
    commentId: Overload:Global.GenericDevice.SetPressureLoss
  Global.IDevice.SetPressureLoss(System.Single):
    name:
      CSharp:
      - id: Global.IDevice.SetPressureLoss(System.Single)
        name: SetPressureLoss
        nameWithType: IDevice.SetPressureLoss
        qualifiedName: IDevice.SetPressureLoss
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.IDevice.SetPressureLoss(System.Single)
        name: SetPressureLoss
        nameWithType: IDevice.SetPressureLoss
        qualifiedName: IDevice.SetPressureLoss
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.IDevice
    commentId: M:Global.IDevice.SetPressureLoss(System.Single)
  Global.GenericHeater.Power*:
    name:
      CSharp:
      - id: Global.GenericHeater.Power*
        name: Power
        nameWithType: GenericHeater.Power
        qualifiedName: GenericHeater.Power
      VB:
      - id: Global.GenericHeater.Power*
        name: Power
        nameWithType: GenericHeater.Power
        qualifiedName: GenericHeater.Power
    isDefinition: true
    commentId: Overload:Global.GenericHeater.Power
  Global.GenericHeater.GetDeviceData*:
    name:
      CSharp:
      - id: Global.GenericHeater.GetDeviceData*
        name: GetDeviceData
        nameWithType: GenericHeater.GetDeviceData
        qualifiedName: GenericHeater.GetDeviceData
      VB:
      - id: Global.GenericHeater.GetDeviceData*
        name: GetDeviceData
        nameWithType: GenericHeater.GetDeviceData
        qualifiedName: GenericHeater.GetDeviceData
    isDefinition: true
    commentId: Overload:Global.GenericHeater.GetDeviceData
  Global.GenericHeater.GetParams*:
    name:
      CSharp:
      - id: Global.GenericHeater.GetParams*
        name: GetParams
        nameWithType: GenericHeater.GetParams
        qualifiedName: GenericHeater.GetParams
      VB:
      - id: Global.GenericHeater.GetParams*
        name: GetParams
        nameWithType: GenericHeater.GetParams
        qualifiedName: GenericHeater.GetParams
    isDefinition: true
    commentId: Overload:Global.GenericHeater.GetParams
  Global.GenericHeater:
    name:
      CSharp:
      - id: Global.GenericHeater
        name: GenericHeater
        nameWithType: GenericHeater
        qualifiedName: GenericHeater
      VB:
      - id: Global.GenericHeater
        name: GenericHeater
        nameWithType: GenericHeater
        qualifiedName: GenericHeater
    isDefinition: true
    commentId: T:Global.GenericHeater
  Global.GenericHeaterBoiler:
    name:
      CSharp:
      - id: Global.GenericHeaterBoiler
        name: GenericHeaterBoiler
        nameWithType: GenericHeaterBoiler
        qualifiedName: GenericHeaterBoiler
      VB:
      - id: Global.GenericHeaterBoiler
        name: GenericHeaterBoiler
        nameWithType: GenericHeaterBoiler
        qualifiedName: GenericHeaterBoiler
    isDefinition: true
    commentId: T:Global.GenericHeaterBoiler
  Global.GenericHeatExchanger:
    name:
      CSharp:
      - id: Global.GenericHeatExchanger
        name: GenericHeatExchanger
        nameWithType: GenericHeatExchanger
        qualifiedName: GenericHeatExchanger
      VB:
      - id: Global.GenericHeatExchanger
        name: GenericHeatExchanger
        nameWithType: GenericHeatExchanger
        qualifiedName: GenericHeatExchanger
    isDefinition: true
    commentId: T:Global.GenericHeatExchanger
  Global.GenericLoad:
    name:
      CSharp:
      - id: Global.GenericLoad
        name: GenericLoad
        nameWithType: GenericLoad
        qualifiedName: GenericLoad
      VB:
      - id: Global.GenericLoad
        name: GenericLoad
        nameWithType: GenericLoad
        qualifiedName: GenericLoad
    isDefinition: true
    commentId: T:Global.GenericLoad
  Global.GenericPipeT:
    name:
      CSharp:
      - id: Global.GenericPipeT
        name: GenericPipeT
        nameWithType: GenericPipeT
        qualifiedName: GenericPipeT
      VB:
      - id: Global.GenericPipeT
        name: GenericPipeT
        nameWithType: GenericPipeT
        qualifiedName: GenericPipeT
    isDefinition: true
    commentId: T:Global.GenericPipeT
  Global.GenericPipeT2In1.GetParellel*:
    name:
      CSharp:
      - id: Global.GenericPipeT2In1.GetParellel*
        name: GetParellel
        nameWithType: GenericPipeT2In1.GetParellel
        qualifiedName: GenericPipeT2In1.GetParellel
      VB:
      - id: Global.GenericPipeT2In1.GetParellel*
        name: GetParellel
        nameWithType: GenericPipeT2In1.GetParellel
        qualifiedName: GenericPipeT2In1.GetParellel
    isDefinition: true
    commentId: Overload:Global.GenericPipeT2In1.GetParellel
  Global.GenericPipeT2In1:
    name:
      CSharp:
      - id: Global.GenericPipeT2In1
        name: GenericPipeT2In1
        nameWithType: GenericPipeT2In1
        qualifiedName: GenericPipeT2In1
      VB:
      - id: Global.GenericPipeT2In1
        name: GenericPipeT2In1
        nameWithType: GenericPipeT2In1
        qualifiedName: GenericPipeT2In1
    isDefinition: true
    commentId: T:Global.GenericPipeT2In1
  Global.GenericPump.OnAwake*:
    name:
      CSharp:
      - id: Global.GenericPump.OnAwake*
        name: OnAwake
        nameWithType: GenericPump.OnAwake
        qualifiedName: GenericPump.OnAwake
      VB:
      - id: Global.GenericPump.OnAwake*
        name: OnAwake
        nameWithType: GenericPump.OnAwake
        qualifiedName: GenericPump.OnAwake
    isDefinition: true
    commentId: Overload:Global.GenericPump.OnAwake
  Global.GenericPump.PreSimulation*:
    name:
      CSharp:
      - id: Global.GenericPump.PreSimulation*
        name: PreSimulation
        nameWithType: GenericPump.PreSimulation
        qualifiedName: GenericPump.PreSimulation
      VB:
      - id: Global.GenericPump.PreSimulation*
        name: PreSimulation
        nameWithType: GenericPump.PreSimulation
        qualifiedName: GenericPump.PreSimulation
    isDefinition: true
    commentId: Overload:Global.GenericPump.PreSimulation
  Global.GenericPump.RunSimulation*:
    name:
      CSharp:
      - id: Global.GenericPump.RunSimulation*
        name: RunSimulation
        nameWithType: GenericPump.RunSimulation
        qualifiedName: GenericPump.RunSimulation
      VB:
      - id: Global.GenericPump.RunSimulation*
        name: RunSimulation
        nameWithType: GenericPump.RunSimulation
        qualifiedName: GenericPump.RunSimulation
    isDefinition: true
    commentId: Overload:Global.GenericPump.RunSimulation
  Global.GenericPump:
    name:
      CSharp:
      - id: Global.GenericPump
        name: GenericPump
        nameWithType: GenericPump
        qualifiedName: GenericPump
      VB:
      - id: Global.GenericPump
        name: GenericPump
        nameWithType: GenericPump
        qualifiedName: GenericPump
    isDefinition: true
    commentId: T:Global.GenericPump
  Global.GenericValve.ValvePos*:
    name:
      CSharp:
      - id: Global.GenericValve.ValvePos*
        name: ValvePos
        nameWithType: GenericValve.ValvePos
        qualifiedName: GenericValve.ValvePos
      VB:
      - id: Global.GenericValve.ValvePos*
        name: ValvePos
        nameWithType: GenericValve.ValvePos
        qualifiedName: GenericValve.ValvePos
    isDefinition: true
    commentId: Overload:Global.GenericValve.ValvePos
  Global.GenericValve.GetDeviceData*:
    name:
      CSharp:
      - id: Global.GenericValve.GetDeviceData*
        name: GetDeviceData
        nameWithType: GenericValve.GetDeviceData
        qualifiedName: GenericValve.GetDeviceData
      VB:
      - id: Global.GenericValve.GetDeviceData*
        name: GetDeviceData
        nameWithType: GenericValve.GetDeviceData
        qualifiedName: GenericValve.GetDeviceData
    isDefinition: true
    commentId: Overload:Global.GenericValve.GetDeviceData
  Global.GenericValve.GetParams*:
    name:
      CSharp:
      - id: Global.GenericValve.GetParams*
        name: GetParams
        nameWithType: GenericValve.GetParams
        qualifiedName: GenericValve.GetParams
      VB:
      - id: Global.GenericValve.GetParams*
        name: GetParams
        nameWithType: GenericValve.GetParams
        qualifiedName: GenericValve.GetParams
    isDefinition: true
    commentId: Overload:Global.GenericValve.GetParams
  Global.GenericValve.RunSimulation*:
    name:
      CSharp:
      - id: Global.GenericValve.RunSimulation*
        name: RunSimulation
        nameWithType: GenericValve.RunSimulation
        qualifiedName: GenericValve.RunSimulation
      VB:
      - id: Global.GenericValve.RunSimulation*
        name: RunSimulation
        nameWithType: GenericValve.RunSimulation
        qualifiedName: GenericValve.RunSimulation
    isDefinition: true
    commentId: Overload:Global.GenericValve.RunSimulation
  Global.GenericValve:
    name:
      CSharp:
      - id: Global.GenericValve
        name: GenericValve
        nameWithType: GenericValve
        qualifiedName: GenericValve
      VB:
      - id: Global.GenericValve
        name: GenericValve
        nameWithType: GenericValve
        qualifiedName: GenericValve
    isDefinition: true
    commentId: T:Global.GenericValve
  Global.GenericWaterMixer.GetDeviceData*:
    name:
      CSharp:
      - id: Global.GenericWaterMixer.GetDeviceData*
        name: GetDeviceData
        nameWithType: GenericWaterMixer.GetDeviceData
        qualifiedName: GenericWaterMixer.GetDeviceData
      VB:
      - id: Global.GenericWaterMixer.GetDeviceData*
        name: GetDeviceData
        nameWithType: GenericWaterMixer.GetDeviceData
        qualifiedName: GenericWaterMixer.GetDeviceData
    isDefinition: true
    commentId: Overload:Global.GenericWaterMixer.GetDeviceData
  Global.GenericWaterMixer.ForwardData*:
    name:
      CSharp:
      - id: Global.GenericWaterMixer.ForwardData*
        name: ForwardData
        nameWithType: GenericWaterMixer.ForwardData
        qualifiedName: GenericWaterMixer.ForwardData
      VB:
      - id: Global.GenericWaterMixer.ForwardData*
        name: ForwardData
        nameWithType: GenericWaterMixer.ForwardData
        qualifiedName: GenericWaterMixer.ForwardData
    isDefinition: true
    commentId: Overload:Global.GenericWaterMixer.ForwardData
  Global.GenericWaterMixer:
    name:
      CSharp:
      - id: Global.GenericWaterMixer
        name: GenericWaterMixer
        nameWithType: GenericWaterMixer
        qualifiedName: GenericWaterMixer
      VB:
      - id: Global.GenericWaterMixer
        name: GenericWaterMixer
        nameWithType: GenericWaterMixer
        qualifiedName: GenericWaterMixer
    isDefinition: true
    commentId: T:Global.GenericWaterMixer
  Global.GenericWaterPipe.RunSimulation*:
    name:
      CSharp:
      - id: Global.GenericWaterPipe.RunSimulation*
        name: RunSimulation
        nameWithType: GenericWaterPipe.RunSimulation
        qualifiedName: GenericWaterPipe.RunSimulation
      VB:
      - id: Global.GenericWaterPipe.RunSimulation*
        name: RunSimulation
        nameWithType: GenericWaterPipe.RunSimulation
        qualifiedName: GenericWaterPipe.RunSimulation
    isDefinition: true
    commentId: Overload:Global.GenericWaterPipe.RunSimulation
  Global.GenericWaterPipe:
    name:
      CSharp:
      - id: Global.GenericWaterPipe
        name: GenericWaterPipe
        nameWithType: GenericWaterPipe
        qualifiedName: GenericWaterPipe
      VB:
      - id: Global.GenericWaterPipe
        name: GenericWaterPipe
        nameWithType: GenericWaterPipe
        qualifiedName: GenericWaterPipe
    isDefinition: true
    commentId: T:Global.GenericWaterPipe
  Global.ActionCanvas:
    name:
      CSharp:
      - id: Global.ActionCanvas
        name: ActionCanvas
        nameWithType: ActionCanvas
        qualifiedName: ActionCanvas
      VB:
      - id: Global.ActionCanvas
        name: ActionCanvas
        nameWithType: ActionCanvas
        qualifiedName: ActionCanvas
    isDefinition: true
    commentId: T:Global.ActionCanvas
  Global.ActionCanvas.Instance*:
    name:
      CSharp:
      - id: Global.ActionCanvas.Instance*
        name: Instance
        nameWithType: ActionCanvas.Instance
        qualifiedName: ActionCanvas.Instance
      VB:
      - id: Global.ActionCanvas.Instance*
        name: Instance
        nameWithType: ActionCanvas.Instance
        qualifiedName: ActionCanvas.Instance
    isDefinition: true
    commentId: Overload:Global.ActionCanvas.Instance
  Global.ActionCanvas.ShowActionDialog*:
    name:
      CSharp:
      - id: Global.ActionCanvas.ShowActionDialog*
        name: ShowActionDialog
        nameWithType: ActionCanvas.ShowActionDialog
        qualifiedName: ActionCanvas.ShowActionDialog
      VB:
      - id: Global.ActionCanvas.ShowActionDialog*
        name: ShowActionDialog
        nameWithType: ActionCanvas.ShowActionDialog
        qualifiedName: ActionCanvas.ShowActionDialog
    isDefinition: true
    commentId: Overload:Global.ActionCanvas.ShowActionDialog
  Global.ActionCanvas.HideActionDialog*:
    name:
      CSharp:
      - id: Global.ActionCanvas.HideActionDialog*
        name: HideActionDialog
        nameWithType: ActionCanvas.HideActionDialog
        qualifiedName: ActionCanvas.HideActionDialog
      VB:
      - id: Global.ActionCanvas.HideActionDialog*
        name: HideActionDialog
        nameWithType: ActionCanvas.HideActionDialog
        qualifiedName: ActionCanvas.HideActionDialog
    isDefinition: true
    commentId: Overload:Global.ActionCanvas.HideActionDialog
  Global.ActionDialog.SetDialog*:
    name:
      CSharp:
      - id: Global.ActionDialog.SetDialog*
        name: SetDialog
        nameWithType: ActionDialog.SetDialog
        qualifiedName: ActionDialog.SetDialog
      VB:
      - id: Global.ActionDialog.SetDialog*
        name: SetDialog
        nameWithType: ActionDialog.SetDialog
        qualifiedName: ActionDialog.SetDialog
    isDefinition: true
    commentId: Overload:Global.ActionDialog.SetDialog
  Global.ActionDialog.ClearList*:
    name:
      CSharp:
      - id: Global.ActionDialog.ClearList*
        name: ClearList
        nameWithType: ActionDialog.ClearList
        qualifiedName: ActionDialog.ClearList
      VB:
      - id: Global.ActionDialog.ClearList*
        name: ClearList
        nameWithType: ActionDialog.ClearList
        qualifiedName: ActionDialog.ClearList
    isDefinition: true
    commentId: Overload:Global.ActionDialog.ClearList
  Global.ActionDialog:
    name:
      CSharp:
      - id: Global.ActionDialog
        name: ActionDialog
        nameWithType: ActionDialog
        qualifiedName: ActionDialog
      VB:
      - id: Global.ActionDialog
        name: ActionDialog
        nameWithType: ActionDialog
        qualifiedName: ActionDialog
    isDefinition: true
    commentId: T:Global.ActionDialog
  Global.FloatLineParam.OnDestroy*:
    name:
      CSharp:
      - id: Global.FloatLineParam.OnDestroy*
        name: OnDestroy
        nameWithType: FloatLineParam.OnDestroy
        qualifiedName: FloatLineParam.OnDestroy
      VB:
      - id: Global.FloatLineParam.OnDestroy*
        name: OnDestroy
        nameWithType: FloatLineParam.OnDestroy
        qualifiedName: FloatLineParam.OnDestroy
    isDefinition: true
    commentId: Overload:Global.FloatLineParam.OnDestroy
  Global.UnityAction`1:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  Global.UnityAction{System.Single}:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.UnityAction`1
    commentId: '!:Global.UnityAction{System.Single}'
  Global.FloatLineParam.SetFloatline*:
    name:
      CSharp:
      - id: Global.FloatLineParam.SetFloatline*
        name: SetFloatline
        nameWithType: FloatLineParam.SetFloatline
        qualifiedName: FloatLineParam.SetFloatline
      VB:
      - id: Global.FloatLineParam.SetFloatline*
        name: SetFloatline
        nameWithType: FloatLineParam.SetFloatline
        qualifiedName: FloatLineParam.SetFloatline
    isDefinition: true
    commentId: Overload:Global.FloatLineParam.SetFloatline
  Global.FloatLineParam.ValueChangeCheck*:
    name:
      CSharp:
      - id: Global.FloatLineParam.ValueChangeCheck*
        name: ValueChangeCheck
        nameWithType: FloatLineParam.ValueChangeCheck
        qualifiedName: FloatLineParam.ValueChangeCheck
      VB:
      - id: Global.FloatLineParam.ValueChangeCheck*
        name: ValueChangeCheck
        nameWithType: FloatLineParam.ValueChangeCheck
        qualifiedName: FloatLineParam.ValueChangeCheck
    isDefinition: true
    commentId: Overload:Global.FloatLineParam.ValueChangeCheck
  Global.FloatLineParam:
    name:
      CSharp:
      - id: Global.FloatLineParam
        name: FloatLineParam
        nameWithType: FloatLineParam
        qualifiedName: FloatLineParam
      VB:
      - id: Global.FloatLineParam
        name: FloatLineParam
        nameWithType: FloatLineParam
        qualifiedName: FloatLineParam
    isDefinition: true
    commentId: T:Global.FloatLineParam
  Global.InfoCanvas:
    name:
      CSharp:
      - id: Global.InfoCanvas
        name: InfoCanvas
        nameWithType: InfoCanvas
        qualifiedName: InfoCanvas
      VB:
      - id: Global.InfoCanvas
        name: InfoCanvas
        nameWithType: InfoCanvas
        qualifiedName: InfoCanvas
    isDefinition: true
    commentId: T:Global.InfoCanvas
  Global.InfoCanvas.Instance*:
    name:
      CSharp:
      - id: Global.InfoCanvas.Instance*
        name: Instance
        nameWithType: InfoCanvas.Instance
        qualifiedName: InfoCanvas.Instance
      VB:
      - id: Global.InfoCanvas.Instance*
        name: Instance
        nameWithType: InfoCanvas.Instance
        qualifiedName: InfoCanvas.Instance
    isDefinition: true
    commentId: Overload:Global.InfoCanvas.Instance
  Global.InfoCanvas.SetTitle*:
    name:
      CSharp:
      - id: Global.InfoCanvas.SetTitle*
        name: SetTitle
        nameWithType: InfoCanvas.SetTitle
        qualifiedName: InfoCanvas.SetTitle
      VB:
      - id: Global.InfoCanvas.SetTitle*
        name: SetTitle
        nameWithType: InfoCanvas.SetTitle
        qualifiedName: InfoCanvas.SetTitle
    isDefinition: true
    commentId: Overload:Global.InfoCanvas.SetTitle
  Global.InfoCanvas.SetSlotInfoIN*:
    name:
      CSharp:
      - id: Global.InfoCanvas.SetSlotInfoIN*
        name: SetSlotInfoIN
        nameWithType: InfoCanvas.SetSlotInfoIN
        qualifiedName: InfoCanvas.SetSlotInfoIN
      VB:
      - id: Global.InfoCanvas.SetSlotInfoIN*
        name: SetSlotInfoIN
        nameWithType: InfoCanvas.SetSlotInfoIN
        qualifiedName: InfoCanvas.SetSlotInfoIN
    isDefinition: true
    commentId: Overload:Global.InfoCanvas.SetSlotInfoIN
  Global.InfoCanvas.Ready*:
    name:
      CSharp:
      - id: Global.InfoCanvas.Ready*
        name: Ready
        nameWithType: InfoCanvas.Ready
        qualifiedName: InfoCanvas.Ready
      VB:
      - id: Global.InfoCanvas.Ready*
        name: Ready
        nameWithType: InfoCanvas.Ready
        qualifiedName: InfoCanvas.Ready
    isDefinition: true
    commentId: Overload:Global.InfoCanvas.Ready
  Global.InfoCanvas.SetSlotOutInfo*:
    name:
      CSharp:
      - id: Global.InfoCanvas.SetSlotOutInfo*
        name: SetSlotOutInfo
        nameWithType: InfoCanvas.SetSlotOutInfo
        qualifiedName: InfoCanvas.SetSlotOutInfo
      VB:
      - id: Global.InfoCanvas.SetSlotOutInfo*
        name: SetSlotOutInfo
        nameWithType: InfoCanvas.SetSlotOutInfo
        qualifiedName: InfoCanvas.SetSlotOutInfo
    isDefinition: true
    commentId: Overload:Global.InfoCanvas.SetSlotOutInfo
  Global.InfoCanvas.AddDeviceInfo*:
    name:
      CSharp:
      - id: Global.InfoCanvas.AddDeviceInfo*
        name: AddDeviceInfo
        nameWithType: InfoCanvas.AddDeviceInfo
        qualifiedName: InfoCanvas.AddDeviceInfo
      VB:
      - id: Global.InfoCanvas.AddDeviceInfo*
        name: AddDeviceInfo
        nameWithType: InfoCanvas.AddDeviceInfo
        qualifiedName: InfoCanvas.AddDeviceInfo
    isDefinition: true
    commentId: Overload:Global.InfoCanvas.AddDeviceInfo
  Global.InfoCanvas.AddDeviceData*:
    name:
      CSharp:
      - id: Global.InfoCanvas.AddDeviceData*
        name: AddDeviceData
        nameWithType: InfoCanvas.AddDeviceData
        qualifiedName: InfoCanvas.AddDeviceData
      VB:
      - id: Global.InfoCanvas.AddDeviceData*
        name: AddDeviceData
        nameWithType: InfoCanvas.AddDeviceData
        qualifiedName: InfoCanvas.AddDeviceData
    isDefinition: true
    commentId: Overload:Global.InfoCanvas.AddDeviceData
  Global.InfoCanvas.ClearInfo*:
    name:
      CSharp:
      - id: Global.InfoCanvas.ClearInfo*
        name: ClearInfo
        nameWithType: InfoCanvas.ClearInfo
        qualifiedName: InfoCanvas.ClearInfo
      VB:
      - id: Global.InfoCanvas.ClearInfo*
        name: ClearInfo
        nameWithType: InfoCanvas.ClearInfo
        qualifiedName: InfoCanvas.ClearInfo
    isDefinition: true
    commentId: Overload:Global.InfoCanvas.ClearInfo
  Global.InfoCanvas.ClearActions*:
    name:
      CSharp:
      - id: Global.InfoCanvas.ClearActions*
        name: ClearActions
        nameWithType: InfoCanvas.ClearActions
        qualifiedName: InfoCanvas.ClearActions
      VB:
      - id: Global.InfoCanvas.ClearActions*
        name: ClearActions
        nameWithType: InfoCanvas.ClearActions
        qualifiedName: InfoCanvas.ClearActions
    isDefinition: true
    commentId: Overload:Global.InfoCanvas.ClearActions
  Global.SlotLine.SetSlotlineInfo*:
    name:
      CSharp:
      - id: Global.SlotLine.SetSlotlineInfo*
        name: SetSlotlineInfo
        nameWithType: SlotLine.SetSlotlineInfo
        qualifiedName: SlotLine.SetSlotlineInfo
      VB:
      - id: Global.SlotLine.SetSlotlineInfo*
        name: SetSlotlineInfo
        nameWithType: SlotLine.SetSlotlineInfo
        qualifiedName: SlotLine.SetSlotlineInfo
    isDefinition: true
    commentId: Overload:Global.SlotLine.SetSlotlineInfo
  Global.SlotLine:
    name:
      CSharp:
      - id: Global.SlotLine
        name: SlotLine
        nameWithType: SlotLine
        qualifiedName: SlotLine
      VB:
      - id: Global.SlotLine
        name: SlotLine
        nameWithType: SlotLine
        qualifiedName: SlotLine
    isDefinition: true
    commentId: T:Global.SlotLine
  Global.SlotsList.AddSlotList*:
    name:
      CSharp:
      - id: Global.SlotsList.AddSlotList*
        name: AddSlotList
        nameWithType: SlotsList.AddSlotList
        qualifiedName: SlotsList.AddSlotList
      VB:
      - id: Global.SlotsList.AddSlotList*
        name: AddSlotList
        nameWithType: SlotsList.AddSlotList
        qualifiedName: SlotsList.AddSlotList
    isDefinition: true
    commentId: Overload:Global.SlotsList.AddSlotList
  Global.SlotsList.ClearList*:
    name:
      CSharp:
      - id: Global.SlotsList.ClearList*
        name: ClearList
        nameWithType: SlotsList.ClearList
        qualifiedName: SlotsList.ClearList
      VB:
      - id: Global.SlotsList.ClearList*
        name: ClearList
        nameWithType: SlotsList.ClearList
        qualifiedName: SlotsList.ClearList
    isDefinition: true
    commentId: Overload:Global.SlotsList.ClearList
  Global.SlotsList:
    name:
      CSharp:
      - id: Global.SlotsList
        name: SlotsList
        nameWithType: SlotsList
        qualifiedName: SlotsList
      VB:
      - id: Global.SlotsList
        name: SlotsList
        nameWithType: SlotsList
        qualifiedName: SlotsList
    isDefinition: true
    commentId: T:Global.SlotsList
  Global.SlotTemplate.SetTitle*:
    name:
      CSharp:
      - id: Global.SlotTemplate.SetTitle*
        name: SetTitle
        nameWithType: SlotTemplate.SetTitle
        qualifiedName: SlotTemplate.SetTitle
      VB:
      - id: Global.SlotTemplate.SetTitle*
        name: SetTitle
        nameWithType: SlotTemplate.SetTitle
        qualifiedName: SlotTemplate.SetTitle
    isDefinition: true
    commentId: Overload:Global.SlotTemplate.SetTitle
  Global.SlotTemplate.AddData*:
    name:
      CSharp:
      - id: Global.SlotTemplate.AddData*
        name: AddData
        nameWithType: SlotTemplate.AddData
        qualifiedName: SlotTemplate.AddData
      VB:
      - id: Global.SlotTemplate.AddData*
        name: AddData
        nameWithType: SlotTemplate.AddData
        qualifiedName: SlotTemplate.AddData
    isDefinition: true
    commentId: Overload:Global.SlotTemplate.AddData
  Global.SlotTemplate:
    name:
      CSharp:
      - id: Global.SlotTemplate
        name: SlotTemplate
        nameWithType: SlotTemplate
        qualifiedName: SlotTemplate
      VB:
      - id: Global.SlotTemplate
        name: SlotTemplate
        nameWithType: SlotTemplate
        qualifiedName: SlotTemplate
    isDefinition: true
    commentId: T:Global.SlotTemplate
  Global.IDevice.Send*:
    name:
      CSharp:
      - id: Global.IDevice.Send*
        name: Send
        nameWithType: IDevice.Send
        qualifiedName: IDevice.Send
      VB:
      - id: Global.IDevice.Send*
        name: Send
        nameWithType: IDevice.Send
        qualifiedName: IDevice.Send
    isDefinition: true
    commentId: Overload:Global.IDevice.Send
  Global.IDevice.UpdateData*:
    name:
      CSharp:
      - id: Global.IDevice.UpdateData*
        name: UpdateData
        nameWithType: IDevice.UpdateData
        qualifiedName: IDevice.UpdateData
      VB:
      - id: Global.IDevice.UpdateData*
        name: UpdateData
        nameWithType: IDevice.UpdateData
        qualifiedName: IDevice.UpdateData
    isDefinition: true
    commentId: Overload:Global.IDevice.UpdateData
  Global.IDevice.GetDeviceData*:
    name:
      CSharp:
      - id: Global.IDevice.GetDeviceData*
        name: GetDeviceData
        nameWithType: IDevice.GetDeviceData
        qualifiedName: IDevice.GetDeviceData
      VB:
      - id: Global.IDevice.GetDeviceData*
        name: GetDeviceData
        nameWithType: IDevice.GetDeviceData
        qualifiedName: IDevice.GetDeviceData
    isDefinition: true
    commentId: Overload:Global.IDevice.GetDeviceData
  Global.IDevice.GetSlotOutData*:
    name:
      CSharp:
      - id: Global.IDevice.GetSlotOutData*
        name: GetSlotOutData
        nameWithType: IDevice.GetSlotOutData
        qualifiedName: IDevice.GetSlotOutData
      VB:
      - id: Global.IDevice.GetSlotOutData*
        name: GetSlotOutData
        nameWithType: IDevice.GetSlotOutData
        qualifiedName: IDevice.GetSlotOutData
    isDefinition: true
    commentId: Overload:Global.IDevice.GetSlotOutData
  Global.IDevice.GetSlotOutInstanceID*:
    name:
      CSharp:
      - id: Global.IDevice.GetSlotOutInstanceID*
        name: GetSlotOutInstanceID
        nameWithType: IDevice.GetSlotOutInstanceID
        qualifiedName: IDevice.GetSlotOutInstanceID
      VB:
      - id: Global.IDevice.GetSlotOutInstanceID*
        name: GetSlotOutInstanceID
        nameWithType: IDevice.GetSlotOutInstanceID
        qualifiedName: IDevice.GetSlotOutInstanceID
    isDefinition: true
    commentId: Overload:Global.IDevice.GetSlotOutInstanceID
  Global.IDevice.GetSlotInInstanceID*:
    name:
      CSharp:
      - id: Global.IDevice.GetSlotInInstanceID*
        name: GetSlotInInstanceID
        nameWithType: IDevice.GetSlotInInstanceID
        qualifiedName: IDevice.GetSlotInInstanceID
      VB:
      - id: Global.IDevice.GetSlotInInstanceID*
        name: GetSlotInInstanceID
        nameWithType: IDevice.GetSlotInInstanceID
        qualifiedName: IDevice.GetSlotInInstanceID
    isDefinition: true
    commentId: Overload:Global.IDevice.GetSlotInInstanceID
  Global.IDevice.GetParellel*:
    name:
      CSharp:
      - id: Global.IDevice.GetParellel*
        name: GetParellel
        nameWithType: IDevice.GetParellel
        qualifiedName: IDevice.GetParellel
      VB:
      - id: Global.IDevice.GetParellel*
        name: GetParellel
        nameWithType: IDevice.GetParellel
        qualifiedName: IDevice.GetParellel
    isDefinition: true
    commentId: Overload:Global.IDevice.GetParellel
  Global.IDevice.GetDevice*:
    name:
      CSharp:
      - id: Global.IDevice.GetDevice*
        name: GetDevice
        nameWithType: IDevice.GetDevice
        qualifiedName: IDevice.GetDevice
      VB:
      - id: Global.IDevice.GetDevice*
        name: GetDevice
        nameWithType: IDevice.GetDevice
        qualifiedName: IDevice.GetDevice
    isDefinition: true
    commentId: Overload:Global.IDevice.GetDevice
  Global.IDevice.GetPressureLoss*:
    name:
      CSharp:
      - id: Global.IDevice.GetPressureLoss*
        name: GetPressureLoss
        nameWithType: IDevice.GetPressureLoss
        qualifiedName: IDevice.GetPressureLoss
      VB:
      - id: Global.IDevice.GetPressureLoss*
        name: GetPressureLoss
        nameWithType: IDevice.GetPressureLoss
        qualifiedName: IDevice.GetPressureLoss
    isDefinition: true
    commentId: Overload:Global.IDevice.GetPressureLoss
  Global.IDevice.SetPressureLoss*:
    name:
      CSharp:
      - id: Global.IDevice.SetPressureLoss*
        name: SetPressureLoss
        nameWithType: IDevice.SetPressureLoss
        qualifiedName: IDevice.SetPressureLoss
      VB:
      - id: Global.IDevice.SetPressureLoss*
        name: SetPressureLoss
        nameWithType: IDevice.SetPressureLoss
        qualifiedName: IDevice.SetPressureLoss
    isDefinition: true
    commentId: Overload:Global.IDevice.SetPressureLoss
  Global.DeviceMath:
    name:
      CSharp:
      - id: Global.DeviceMath
        name: DeviceMath
        nameWithType: DeviceMath
        qualifiedName: DeviceMath
      VB:
      - id: Global.DeviceMath
        name: DeviceMath
        nameWithType: DeviceMath
        qualifiedName: DeviceMath
    isDefinition: true
    commentId: T:Global.DeviceMath
  Global.DeviceMath.deviceInterface:
    name:
      CSharp:
      - id: Global.DeviceMath.deviceInterface
        name: deviceInterface
        nameWithType: DeviceMath.deviceInterface
        qualifiedName: DeviceMath.deviceInterface
      VB:
      - id: Global.DeviceMath.deviceInterface
        name: deviceInterface
        nameWithType: DeviceMath.deviceInterface
        qualifiedName: DeviceMath.deviceInterface
    isDefinition: true
    parent: Global.DeviceMath
    commentId: F:Global.DeviceMath.deviceInterface
  Global.DeviceMath.DeviceInterface:
    name:
      CSharp:
      - id: Global.DeviceMath.DeviceInterface
        name: DeviceInterface
        nameWithType: DeviceMath.DeviceInterface
        qualifiedName: DeviceMath.DeviceInterface
      VB:
      - id: Global.DeviceMath.DeviceInterface
        name: DeviceInterface
        nameWithType: DeviceMath.DeviceInterface
        qualifiedName: DeviceMath.DeviceInterface
    isDefinition: true
    parent: Global.DeviceMath
    commentId: P:Global.DeviceMath.DeviceInterface
  Global.DeviceMath.data:
    name:
      CSharp:
      - id: Global.DeviceMath.data
        name: data
        nameWithType: DeviceMath.data
        qualifiedName: DeviceMath.data
      VB:
      - id: Global.DeviceMath.data
        name: data
        nameWithType: DeviceMath.data
        qualifiedName: DeviceMath.data
    isDefinition: true
    parent: Global.DeviceMath
    commentId: F:Global.DeviceMath.data
  Global.ConsumerMath.Data1*:
    name:
      CSharp:
      - id: Global.ConsumerMath.Data1*
        name: Data1
        nameWithType: ConsumerMath.Data1
        qualifiedName: ConsumerMath.Data1
      VB:
      - id: Global.ConsumerMath.Data1*
        name: Data1
        nameWithType: ConsumerMath.Data1
        qualifiedName: ConsumerMath.Data1
    isDefinition: true
    commentId: Overload:Global.ConsumerMath.Data1
  Global.DeviceMath.Compute(SimulationState):
    name:
      CSharp:
      - id: Global.DeviceMath.Compute(SimulationState)
        name: Compute
        nameWithType: DeviceMath.Compute
        qualifiedName: DeviceMath.Compute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.DeviceMath.Compute(SimulationState)
        name: Compute
        nameWithType: DeviceMath.Compute
        qualifiedName: DeviceMath.Compute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.DeviceMath
    commentId: M:Global.DeviceMath.Compute(SimulationState)
  Global.ConsumerMath.Compute*:
    name:
      CSharp:
      - id: Global.ConsumerMath.Compute*
        name: Compute
        nameWithType: ConsumerMath.Compute
        qualifiedName: ConsumerMath.Compute
      VB:
      - id: Global.ConsumerMath.Compute*
        name: Compute
        nameWithType: ConsumerMath.Compute
        qualifiedName: ConsumerMath.Compute
    isDefinition: true
    commentId: Overload:Global.ConsumerMath.Compute
  Global.ConsumerMath:
    name:
      CSharp:
      - id: Global.ConsumerMath
        name: ConsumerMath
        nameWithType: ConsumerMath
        qualifiedName: ConsumerMath
      VB:
      - id: Global.ConsumerMath
        name: ConsumerMath
        nameWithType: ConsumerMath
        qualifiedName: ConsumerMath
    isDefinition: true
    commentId: T:Global.ConsumerMath
  Global.DeviceMath.DeviceInterface*:
    name:
      CSharp:
      - id: Global.DeviceMath.DeviceInterface*
        name: DeviceInterface
        nameWithType: DeviceMath.DeviceInterface
        qualifiedName: DeviceMath.DeviceInterface
      VB:
      - id: Global.DeviceMath.DeviceInterface*
        name: DeviceInterface
        nameWithType: DeviceMath.DeviceInterface
        qualifiedName: DeviceMath.DeviceInterface
    isDefinition: true
    commentId: Overload:Global.DeviceMath.DeviceInterface
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{DeviceData}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{DeviceData}
  Global.DeviceMath.Compute*:
    name:
      CSharp:
      - id: Global.DeviceMath.Compute*
        name: Compute
        nameWithType: DeviceMath.Compute
        qualifiedName: DeviceMath.Compute
      VB:
      - id: Global.DeviceMath.Compute*
        name: Compute
        nameWithType: DeviceMath.Compute
        qualifiedName: DeviceMath.Compute
    isDefinition: true
    commentId: Overload:Global.DeviceMath.Compute
  Global.HeatExchangerMath.Data1*:
    name:
      CSharp:
      - id: Global.HeatExchangerMath.Data1*
        name: Data1
        nameWithType: HeatExchangerMath.Data1
        qualifiedName: HeatExchangerMath.Data1
      VB:
      - id: Global.HeatExchangerMath.Data1*
        name: Data1
        nameWithType: HeatExchangerMath.Data1
        qualifiedName: HeatExchangerMath.Data1
    isDefinition: true
    commentId: Overload:Global.HeatExchangerMath.Data1
  Global.HeatExchangerMath.Data2*:
    name:
      CSharp:
      - id: Global.HeatExchangerMath.Data2*
        name: Data2
        nameWithType: HeatExchangerMath.Data2
        qualifiedName: HeatExchangerMath.Data2
      VB:
      - id: Global.HeatExchangerMath.Data2*
        name: Data2
        nameWithType: HeatExchangerMath.Data2
        qualifiedName: HeatExchangerMath.Data2
    isDefinition: true
    commentId: Overload:Global.HeatExchangerMath.Data2
  Global.HeatExchangerMath.Compute*:
    name:
      CSharp:
      - id: Global.HeatExchangerMath.Compute*
        name: Compute
        nameWithType: HeatExchangerMath.Compute
        qualifiedName: HeatExchangerMath.Compute
      VB:
      - id: Global.HeatExchangerMath.Compute*
        name: Compute
        nameWithType: HeatExchangerMath.Compute
        qualifiedName: HeatExchangerMath.Compute
    isDefinition: true
    commentId: Overload:Global.HeatExchangerMath.Compute
  Global.HeatExchangerMath:
    name:
      CSharp:
      - id: Global.HeatExchangerMath
        name: HeatExchangerMath
        nameWithType: HeatExchangerMath
        qualifiedName: HeatExchangerMath
      VB:
      - id: Global.HeatExchangerMath
        name: HeatExchangerMath
        nameWithType: HeatExchangerMath
        qualifiedName: HeatExchangerMath
    isDefinition: true
    commentId: T:Global.HeatExchangerMath
  Global.HeatExchangerNoMath.Data1*:
    name:
      CSharp:
      - id: Global.HeatExchangerNoMath.Data1*
        name: Data1
        nameWithType: HeatExchangerNoMath.Data1
        qualifiedName: HeatExchangerNoMath.Data1
      VB:
      - id: Global.HeatExchangerNoMath.Data1*
        name: Data1
        nameWithType: HeatExchangerNoMath.Data1
        qualifiedName: HeatExchangerNoMath.Data1
    isDefinition: true
    commentId: Overload:Global.HeatExchangerNoMath.Data1
  Global.HeatExchangerNoMath.Data2*:
    name:
      CSharp:
      - id: Global.HeatExchangerNoMath.Data2*
        name: Data2
        nameWithType: HeatExchangerNoMath.Data2
        qualifiedName: HeatExchangerNoMath.Data2
      VB:
      - id: Global.HeatExchangerNoMath.Data2*
        name: Data2
        nameWithType: HeatExchangerNoMath.Data2
        qualifiedName: HeatExchangerNoMath.Data2
    isDefinition: true
    commentId: Overload:Global.HeatExchangerNoMath.Data2
  Global.HeatExchangerNoMath.Compute*:
    name:
      CSharp:
      - id: Global.HeatExchangerNoMath.Compute*
        name: Compute
        nameWithType: HeatExchangerNoMath.Compute
        qualifiedName: HeatExchangerNoMath.Compute
      VB:
      - id: Global.HeatExchangerNoMath.Compute*
        name: Compute
        nameWithType: HeatExchangerNoMath.Compute
        qualifiedName: HeatExchangerNoMath.Compute
    isDefinition: true
    commentId: Overload:Global.HeatExchangerNoMath.Compute
  Global.HeatExchangerNoMath:
    name:
      CSharp:
      - id: Global.HeatExchangerNoMath
        name: HeatExchangerNoMath
        nameWithType: HeatExchangerNoMath
        qualifiedName: HeatExchangerNoMath
      VB:
      - id: Global.HeatExchangerNoMath
        name: HeatExchangerNoMath
        nameWithType: HeatExchangerNoMath
        qualifiedName: HeatExchangerNoMath
    isDefinition: true
    commentId: T:Global.HeatExchangerNoMath
  Global.HeatMath.Data1*:
    name:
      CSharp:
      - id: Global.HeatMath.Data1*
        name: Data1
        nameWithType: HeatMath.Data1
        qualifiedName: HeatMath.Data1
      VB:
      - id: Global.HeatMath.Data1*
        name: Data1
        nameWithType: HeatMath.Data1
        qualifiedName: HeatMath.Data1
    isDefinition: true
    commentId: Overload:Global.HeatMath.Data1
  Global.HeatMath.Compute*:
    name:
      CSharp:
      - id: Global.HeatMath.Compute*
        name: Compute
        nameWithType: HeatMath.Compute
        qualifiedName: HeatMath.Compute
      VB:
      - id: Global.HeatMath.Compute*
        name: Compute
        nameWithType: HeatMath.Compute
        qualifiedName: HeatMath.Compute
    isDefinition: true
    commentId: Overload:Global.HeatMath.Compute
  Global.HeatMath:
    name:
      CSharp:
      - id: Global.HeatMath
        name: HeatMath
        nameWithType: HeatMath
        qualifiedName: HeatMath
      VB:
      - id: Global.HeatMath
        name: HeatMath
        nameWithType: HeatMath
        qualifiedName: HeatMath
    isDefinition: true
    commentId: T:Global.HeatMath
  Global.PipeMath.Data1*:
    name:
      CSharp:
      - id: Global.PipeMath.Data1*
        name: Data1
        nameWithType: PipeMath.Data1
        qualifiedName: PipeMath.Data1
      VB:
      - id: Global.PipeMath.Data1*
        name: Data1
        nameWithType: PipeMath.Data1
        qualifiedName: PipeMath.Data1
    isDefinition: true
    commentId: Overload:Global.PipeMath.Data1
  Global.PipeMath.Compute*:
    name:
      CSharp:
      - id: Global.PipeMath.Compute*
        name: Compute
        nameWithType: PipeMath.Compute
        qualifiedName: PipeMath.Compute
      VB:
      - id: Global.PipeMath.Compute*
        name: Compute
        nameWithType: PipeMath.Compute
        qualifiedName: PipeMath.Compute
    isDefinition: true
    commentId: Overload:Global.PipeMath.Compute
  Global.PipeMath:
    name:
      CSharp:
      - id: Global.PipeMath
        name: PipeMath
        nameWithType: PipeMath
        qualifiedName: PipeMath
      VB:
      - id: Global.PipeMath
        name: PipeMath
        nameWithType: PipeMath
        qualifiedName: PipeMath
    isDefinition: true
    commentId: T:Global.PipeMath
  Global.PipeTMath.Data1*:
    name:
      CSharp:
      - id: Global.PipeTMath.Data1*
        name: Data1
        nameWithType: PipeTMath.Data1
        qualifiedName: PipeTMath.Data1
      VB:
      - id: Global.PipeTMath.Data1*
        name: Data1
        nameWithType: PipeTMath.Data1
        qualifiedName: PipeTMath.Data1
    isDefinition: true
    commentId: Overload:Global.PipeTMath.Data1
  Global.PipeTMath.Compute*:
    name:
      CSharp:
      - id: Global.PipeTMath.Compute*
        name: Compute
        nameWithType: PipeTMath.Compute
        qualifiedName: PipeTMath.Compute
      VB:
      - id: Global.PipeTMath.Compute*
        name: Compute
        nameWithType: PipeTMath.Compute
        qualifiedName: PipeTMath.Compute
    isDefinition: true
    commentId: Overload:Global.PipeTMath.Compute
  Global.PipeTMath:
    name:
      CSharp:
      - id: Global.PipeTMath
        name: PipeTMath
        nameWithType: PipeTMath
        qualifiedName: PipeTMath
      VB:
      - id: Global.PipeTMath
        name: PipeTMath
        nameWithType: PipeTMath
        qualifiedName: PipeTMath
    isDefinition: true
    commentId: T:Global.PipeTMath
  Global.PipeTMath2In1.Data1*:
    name:
      CSharp:
      - id: Global.PipeTMath2In1.Data1*
        name: Data1
        nameWithType: PipeTMath2In1.Data1
        qualifiedName: PipeTMath2In1.Data1
      VB:
      - id: Global.PipeTMath2In1.Data1*
        name: Data1
        nameWithType: PipeTMath2In1.Data1
        qualifiedName: PipeTMath2In1.Data1
    isDefinition: true
    commentId: Overload:Global.PipeTMath2In1.Data1
  Global.PipeTMath2In1.Data2*:
    name:
      CSharp:
      - id: Global.PipeTMath2In1.Data2*
        name: Data2
        nameWithType: PipeTMath2In1.Data2
        qualifiedName: PipeTMath2In1.Data2
      VB:
      - id: Global.PipeTMath2In1.Data2*
        name: Data2
        nameWithType: PipeTMath2In1.Data2
        qualifiedName: PipeTMath2In1.Data2
    isDefinition: true
    commentId: Overload:Global.PipeTMath2In1.Data2
  Global.PipeTMath2In1.Compute*:
    name:
      CSharp:
      - id: Global.PipeTMath2In1.Compute*
        name: Compute
        nameWithType: PipeTMath2In1.Compute
        qualifiedName: PipeTMath2In1.Compute
      VB:
      - id: Global.PipeTMath2In1.Compute*
        name: Compute
        nameWithType: PipeTMath2In1.Compute
        qualifiedName: PipeTMath2In1.Compute
    isDefinition: true
    commentId: Overload:Global.PipeTMath2In1.Compute
  Global.PipeTMath2In1:
    name:
      CSharp:
      - id: Global.PipeTMath2In1
        name: PipeTMath2In1
        nameWithType: PipeTMath2In1
        qualifiedName: PipeTMath2In1
      VB:
      - id: Global.PipeTMath2In1
        name: PipeTMath2In1
        nameWithType: PipeTMath2In1
        qualifiedName: PipeTMath2In1
    isDefinition: true
    commentId: T:Global.PipeTMath2In1
  Global.PumpMath.Data1*:
    name:
      CSharp:
      - id: Global.PumpMath.Data1*
        name: Data1
        nameWithType: PumpMath.Data1
        qualifiedName: PumpMath.Data1
      VB:
      - id: Global.PumpMath.Data1*
        name: Data1
        nameWithType: PumpMath.Data1
        qualifiedName: PumpMath.Data1
    isDefinition: true
    commentId: Overload:Global.PumpMath.Data1
  Global.PumpMath.Compute*:
    name:
      CSharp:
      - id: Global.PumpMath.Compute*
        name: Compute
        nameWithType: PumpMath.Compute
        qualifiedName: PumpMath.Compute
      VB:
      - id: Global.PumpMath.Compute*
        name: Compute
        nameWithType: PumpMath.Compute
        qualifiedName: PumpMath.Compute
    isDefinition: true
    commentId: Overload:Global.PumpMath.Compute
  Global.PumpMath:
    name:
      CSharp:
      - id: Global.PumpMath
        name: PumpMath
        nameWithType: PumpMath
        qualifiedName: PumpMath
      VB:
      - id: Global.PumpMath
        name: PumpMath
        nameWithType: PumpMath
        qualifiedName: PumpMath
    isDefinition: true
    commentId: T:Global.PumpMath
  Global.SimMath.SetData*:
    name:
      CSharp:
      - id: Global.SimMath.SetData*
        name: SetData
        nameWithType: SimMath.SetData
        qualifiedName: SimMath.SetData
      VB:
      - id: Global.SimMath.SetData*
        name: SetData
        nameWithType: SimMath.SetData
        qualifiedName: SimMath.SetData
    isDefinition: true
    commentId: Overload:Global.SimMath.SetData
  Global.SimMath:
    name:
      CSharp:
      - id: Global.SimMath
        name: SimMath
        nameWithType: SimMath
        qualifiedName: SimMath
      VB:
      - id: Global.SimMath
        name: SimMath
        nameWithType: SimMath
        qualifiedName: SimMath
    isDefinition: true
    commentId: T:Global.SimMath
  Global.ValveMath.Data1*:
    name:
      CSharp:
      - id: Global.ValveMath.Data1*
        name: Data1
        nameWithType: ValveMath.Data1
        qualifiedName: ValveMath.Data1
      VB:
      - id: Global.ValveMath.Data1*
        name: Data1
        nameWithType: ValveMath.Data1
        qualifiedName: ValveMath.Data1
    isDefinition: true
    commentId: Overload:Global.ValveMath.Data1
  Global.ValveMath.Compute*:
    name:
      CSharp:
      - id: Global.ValveMath.Compute*
        name: Compute
        nameWithType: ValveMath.Compute
        qualifiedName: ValveMath.Compute
      VB:
      - id: Global.ValveMath.Compute*
        name: Compute
        nameWithType: ValveMath.Compute
        qualifiedName: ValveMath.Compute
    isDefinition: true
    commentId: Overload:Global.ValveMath.Compute
  Global.ValveMath:
    name:
      CSharp:
      - id: Global.ValveMath
        name: ValveMath
        nameWithType: ValveMath
        qualifiedName: ValveMath
      VB:
      - id: Global.ValveMath
        name: ValveMath
        nameWithType: ValveMath
        qualifiedName: ValveMath
    isDefinition: true
    commentId: T:Global.ValveMath
  Global.RigidbodyFPSController:
    name:
      CSharp:
      - id: Global.RigidbodyFPSController
        name: RigidbodyFPSController
        nameWithType: RigidbodyFPSController
        qualifiedName: RigidbodyFPSController
      VB:
      - id: Global.RigidbodyFPSController
        name: RigidbodyFPSController
        nameWithType: RigidbodyFPSController
        qualifiedName: RigidbodyFPSController
    isDefinition: true
    commentId: T:Global.RigidbodyFPSController
  Global.GeneralPID.Start*:
    name:
      CSharp:
      - id: Global.GeneralPID.Start*
        name: Start
        nameWithType: GeneralPID.Start
        qualifiedName: GeneralPID.Start
      VB:
      - id: Global.GeneralPID.Start*
        name: Start
        nameWithType: GeneralPID.Start
        qualifiedName: GeneralPID.Start
    isDefinition: true
    commentId: Overload:Global.GeneralPID.Start
  Global.GeneralPID.DoPID*:
    name:
      CSharp:
      - id: Global.GeneralPID.DoPID*
        name: DoPID
        nameWithType: GeneralPID.DoPID
        qualifiedName: GeneralPID.DoPID
      VB:
      - id: Global.GeneralPID.DoPID*
        name: DoPID
        nameWithType: GeneralPID.DoPID
        qualifiedName: GeneralPID.DoPID
    isDefinition: true
    commentId: Overload:Global.GeneralPID.DoPID
  Global.GeneralPID:
    name:
      CSharp:
      - id: Global.GeneralPID
        name: GeneralPID
        nameWithType: GeneralPID
        qualifiedName: GeneralPID
      VB:
      - id: Global.GeneralPID
        name: GeneralPID
        nameWithType: GeneralPID
        qualifiedName: GeneralPID
    isDefinition: true
    commentId: T:Global.GeneralPID
  Global.GeneralPID.device:
    name:
      CSharp:
      - id: Global.GeneralPID.device
        name: device
        nameWithType: GeneralPID.device
        qualifiedName: GeneralPID.device
      VB:
      - id: Global.GeneralPID.device
        name: device
        nameWithType: GeneralPID.device
        qualifiedName: GeneralPID.device
    isDefinition: true
    parent: Global.GeneralPID
    commentId: F:Global.GeneralPID.device
  Global.GeneralPID.Start:
    name:
      CSharp:
      - id: Global.GeneralPID.Start
        name: Start
        nameWithType: GeneralPID.Start
        qualifiedName: GeneralPID.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GeneralPID.Start
        name: Start
        nameWithType: GeneralPID.Start
        qualifiedName: GeneralPID.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GeneralPID
    commentId: M:Global.GeneralPID.Start
  Global.GeneralPID.DoPID(DeviceData):
    name:
      CSharp:
      - id: Global.GeneralPID.DoPID(DeviceData)
        name: DoPID
        nameWithType: GeneralPID.DoPID
        qualifiedName: GeneralPID.DoPID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GeneralPID.DoPID(DeviceData)
        name: DoPID
        nameWithType: GeneralPID.DoPID
        qualifiedName: GeneralPID.DoPID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GeneralPID
    commentId: M:Global.GeneralPID.DoPID(DeviceData)
  Global.ValvePID.DoPID*:
    name:
      CSharp:
      - id: Global.ValvePID.DoPID*
        name: DoPID
        nameWithType: ValvePID.DoPID
        qualifiedName: ValvePID.DoPID
      VB:
      - id: Global.ValvePID.DoPID*
        name: DoPID
        nameWithType: ValvePID.DoPID
        qualifiedName: ValvePID.DoPID
    isDefinition: true
    commentId: Overload:Global.ValvePID.DoPID
  Global.ValvePID:
    name:
      CSharp:
      - id: Global.ValvePID
        name: ValvePID
        nameWithType: ValvePID
        qualifiedName: ValvePID
      VB:
      - id: Global.ValvePID
        name: ValvePID
        nameWithType: ValvePID
        qualifiedName: ValvePID
    isDefinition: true
    commentId: T:Global.ValvePID
  Global.CircuitData.PressureLost*:
    name:
      CSharp:
      - id: Global.CircuitData.PressureLost*
        name: PressureLost
        nameWithType: CircuitData.PressureLost
        qualifiedName: CircuitData.PressureLost
      VB:
      - id: Global.CircuitData.PressureLost*
        name: PressureLost
        nameWithType: CircuitData.PressureLost
        qualifiedName: CircuitData.PressureLost
    isDefinition: true
    commentId: Overload:Global.CircuitData.PressureLost
  Global.CircuitData:
    name:
      CSharp:
      - id: Global.CircuitData
        name: CircuitData
        nameWithType: CircuitData
        qualifiedName: CircuitData
      VB:
      - id: Global.CircuitData
        name: CircuitData
        nameWithType: CircuitData
        qualifiedName: CircuitData
    isDefinition: true
    commentId: T:Global.CircuitData
  Global.SubFlowData.GenericDevice*:
    name:
      CSharp:
      - id: Global.SubFlowData.GenericDevice*
        name: GenericDevice
        nameWithType: SubFlowData.GenericDevice
        qualifiedName: SubFlowData.GenericDevice
      VB:
      - id: Global.SubFlowData.GenericDevice*
        name: GenericDevice
        nameWithType: SubFlowData.GenericDevice
        qualifiedName: SubFlowData.GenericDevice
    isDefinition: true
    commentId: Overload:Global.SubFlowData.GenericDevice
  System.Collections.Generic.List{System.Int32}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Int32}
  Global.SubFlowData.SubFlows*:
    name:
      CSharp:
      - id: Global.SubFlowData.SubFlows*
        name: SubFlows
        nameWithType: SubFlowData.SubFlows
        qualifiedName: SubFlowData.SubFlows
      VB:
      - id: Global.SubFlowData.SubFlows*
        name: SubFlows
        nameWithType: SubFlowData.SubFlows
        qualifiedName: SubFlowData.SubFlows
    isDefinition: true
    commentId: Overload:Global.SubFlowData.SubFlows
  Global.SubFlowData:
    name:
      CSharp:
      - id: Global.SubFlowData
        name: SubFlowData
        nameWithType: SubFlowData
        qualifiedName: SubFlowData
      VB:
      - id: Global.SubFlowData
        name: SubFlowData
        nameWithType: SubFlowData
        qualifiedName: SubFlowData
    isDefinition: true
    commentId: T:Global.SubFlowData
  Global.FlowData.SerialPump*:
    name:
      CSharp:
      - id: Global.FlowData.SerialPump*
        name: SerialPump
        nameWithType: FlowData.SerialPump
        qualifiedName: FlowData.SerialPump
      VB:
      - id: Global.FlowData.SerialPump*
        name: SerialPump
        nameWithType: FlowData.SerialPump
        qualifiedName: FlowData.SerialPump
    isDefinition: true
    commentId: Overload:Global.FlowData.SerialPump
  Global.FlowData.Ready*:
    name:
      CSharp:
      - id: Global.FlowData.Ready*
        name: Ready
        nameWithType: FlowData.Ready
        qualifiedName: FlowData.Ready
      VB:
      - id: Global.FlowData.Ready*
        name: Ready
        nameWithType: FlowData.Ready
        qualifiedName: FlowData.Ready
    isDefinition: true
    commentId: Overload:Global.FlowData.Ready
  Global.Hashtable:
    name:
      CSharp:
      - id: Global.Hashtable
        name: Hashtable
        nameWithType: Hashtable
        qualifiedName: Hashtable
        isExternal: true
      VB:
      - id: Global.Hashtable
        name: Hashtable
        nameWithType: Hashtable
        qualifiedName: Hashtable
        isExternal: true
    isDefinition: true
  Global.FlowData.Flows*:
    name:
      CSharp:
      - id: Global.FlowData.Flows*
        name: Flows
        nameWithType: FlowData.Flows
        qualifiedName: FlowData.Flows
      VB:
      - id: Global.FlowData.Flows*
        name: Flows
        nameWithType: FlowData.Flows
        qualifiedName: FlowData.Flows
    isDefinition: true
    commentId: Overload:Global.FlowData.Flows
  Global.FlowData.FlowID*:
    name:
      CSharp:
      - id: Global.FlowData.FlowID*
        name: FlowID
        nameWithType: FlowData.FlowID
        qualifiedName: FlowData.FlowID
      VB:
      - id: Global.FlowData.FlowID*
        name: FlowID
        nameWithType: FlowData.FlowID
        qualifiedName: FlowData.FlowID
    isDefinition: true
    commentId: Overload:Global.FlowData.FlowID
  Global.FlowData.Parent*:
    name:
      CSharp:
      - id: Global.FlowData.Parent*
        name: Parent
        nameWithType: FlowData.Parent
        qualifiedName: FlowData.Parent
      VB:
      - id: Global.FlowData.Parent*
        name: Parent
        nameWithType: FlowData.Parent
        qualifiedName: FlowData.Parent
    isDefinition: true
    commentId: Overload:Global.FlowData.Parent
  Global.FlowData:
    name:
      CSharp:
      - id: Global.FlowData
        name: FlowData
        nameWithType: FlowData
        qualifiedName: FlowData
      VB:
      - id: Global.FlowData
        name: FlowData
        nameWithType: FlowData
        qualifiedName: FlowData
    isDefinition: true
    commentId: T:Global.FlowData
  Global.Singleton{Simulation}:
    name:
      CSharp:
      - id: Global.Singleton`1
        name: Singleton
        nameWithType: Singleton
        qualifiedName: Singleton
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Simulation
        name: Simulation
        nameWithType: Simulation
        qualifiedName: Simulation
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Singleton`1
        name: Singleton
        nameWithType: Singleton
        qualifiedName: Singleton
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Simulation
        name: Simulation
        nameWithType: Simulation
        qualifiedName: Simulation
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Singleton`1
    commentId: T:Global.Singleton{Simulation}
  Global.Singleton`1.Instance:
    name:
      CSharp:
      - id: Global.Singleton`1.Instance
        name: Instance
        nameWithType: Singleton<T>.Instance
        qualifiedName: Singleton<T>.Instance
      VB:
      - id: Global.Singleton`1.Instance
        name: Instance
        nameWithType: Singleton(Of T).Instance
        qualifiedName: Singleton(Of T).Instance
    isDefinition: true
    commentId: P:Global.Singleton`1.Instance
  Global.Singleton{Simulation}.Instance:
    name:
      CSharp:
      - id: Global.Singleton`1.Instance
        name: Instance
        nameWithType: Singleton<Simulation>.Instance
        qualifiedName: Singleton<Simulation>.Instance
      VB:
      - id: Global.Singleton`1.Instance
        name: Instance
        nameWithType: Singleton(Of Simulation).Instance
        qualifiedName: Singleton(Of Simulation).Instance
    isDefinition: false
    definition: Global.Singleton`1.Instance
    parent: Global.Singleton{Simulation}
    commentId: P:Global.Singleton{Simulation}.Instance
  Global.Singleton`1.OnDestroy:
    name:
      CSharp:
      - id: Global.Singleton`1.OnDestroy
        name: OnDestroy
        nameWithType: Singleton<T>.OnDestroy
        qualifiedName: Singleton<T>.OnDestroy
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.Singleton`1.OnDestroy
        name: OnDestroy
        nameWithType: Singleton(Of T).OnDestroy
        qualifiedName: Singleton(Of T).OnDestroy
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Global.Singleton`1.OnDestroy
  Global.Singleton{Simulation}.OnDestroy:
    name:
      CSharp:
      - id: Global.Singleton`1.OnDestroy
        name: OnDestroy
        nameWithType: Singleton<Simulation>.OnDestroy
        qualifiedName: Singleton<Simulation>.OnDestroy
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.Singleton`1.OnDestroy
        name: OnDestroy
        nameWithType: Singleton(Of Simulation).OnDestroy
        qualifiedName: Singleton(Of Simulation).OnDestroy
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Singleton`1.OnDestroy
    parent: Global.Singleton{Simulation}
    commentId: M:Global.Singleton{Simulation}.OnDestroy
  Global.Simulation.RunSimulation:
    name:
      CSharp:
      - id: Global.Simulation.RunSimulation
        name: Simulation.RunSimulation
        nameWithType: Simulation.RunSimulation
        qualifiedName: Simulation.RunSimulation
      VB:
      - id: Global.Simulation.RunSimulation
        name: Simulation.RunSimulation
        nameWithType: Simulation.RunSimulation
        qualifiedName: Simulation.RunSimulation
    isDefinition: true
    commentId: T:Global.Simulation.RunSimulation
  Global.Simulation.PreSimulation:
    name:
      CSharp:
      - id: Global.Simulation.PreSimulation
        name: Simulation.PreSimulation
        nameWithType: Simulation.PreSimulation
        qualifiedName: Simulation.PreSimulation
      VB:
      - id: Global.Simulation.PreSimulation
        name: Simulation.PreSimulation
        nameWithType: Simulation.PreSimulation
        qualifiedName: Simulation.PreSimulation
    isDefinition: true
    commentId: T:Global.Simulation.PreSimulation
  Global.Simulation:
    name:
      CSharp:
      - id: Global.Simulation
        name: Simulation
        nameWithType: Simulation
        qualifiedName: Simulation
      VB:
      - id: Global.Simulation
        name: Simulation
        nameWithType: Simulation
        qualifiedName: Simulation
    isDefinition: true
    commentId: T:Global.Simulation
  Global.SimulationSettings.TimeMultiplier*:
    name:
      CSharp:
      - id: Global.SimulationSettings.TimeMultiplier*
        name: TimeMultiplier
        nameWithType: SimulationSettings.TimeMultiplier
        qualifiedName: SimulationSettings.TimeMultiplier
      VB:
      - id: Global.SimulationSettings.TimeMultiplier*
        name: TimeMultiplier
        nameWithType: SimulationSettings.TimeMultiplier
        qualifiedName: SimulationSettings.TimeMultiplier
    isDefinition: true
    commentId: Overload:Global.SimulationSettings.TimeMultiplier
  Global.SimulationSettings.SimulationInterval*:
    name:
      CSharp:
      - id: Global.SimulationSettings.SimulationInterval*
        name: SimulationInterval
        nameWithType: SimulationSettings.SimulationInterval
        qualifiedName: SimulationSettings.SimulationInterval
      VB:
      - id: Global.SimulationSettings.SimulationInterval*
        name: SimulationInterval
        nameWithType: SimulationSettings.SimulationInterval
        qualifiedName: SimulationSettings.SimulationInterval
    isDefinition: true
    commentId: Overload:Global.SimulationSettings.SimulationInterval
  Global.SimulationSettings:
    name:
      CSharp:
      - id: Global.SimulationSettings
        name: SimulationSettings
        nameWithType: SimulationSettings
        qualifiedName: SimulationSettings
      VB:
      - id: Global.SimulationSettings
        name: SimulationSettings
        nameWithType: SimulationSettings
        qualifiedName: SimulationSettings
    isDefinition: true
    commentId: T:Global.SimulationSettings
  Global.SimulationSettings.Instance*:
    name:
      CSharp:
      - id: Global.SimulationSettings.Instance*
        name: Instance
        nameWithType: SimulationSettings.Instance
        qualifiedName: SimulationSettings.Instance
      VB:
      - id: Global.SimulationSettings.Instance*
        name: Instance
        nameWithType: SimulationSettings.Instance
        qualifiedName: SimulationSettings.Instance
    isDefinition: true
    commentId: Overload:Global.SimulationSettings.Instance
  Global.GenericSlot.SlotID*:
    name:
      CSharp:
      - id: Global.GenericSlot.SlotID*
        name: SlotID
        nameWithType: GenericSlot.SlotID
        qualifiedName: GenericSlot.SlotID
      VB:
      - id: Global.GenericSlot.SlotID*
        name: SlotID
        nameWithType: GenericSlot.SlotID
        qualifiedName: GenericSlot.SlotID
    isDefinition: true
    commentId: Overload:Global.GenericSlot.SlotID
  Global.GenericSlot.LastDeviceData*:
    name:
      CSharp:
      - id: Global.GenericSlot.LastDeviceData*
        name: LastDeviceData
        nameWithType: GenericSlot.LastDeviceData
        qualifiedName: GenericSlot.LastDeviceData
      VB:
      - id: Global.GenericSlot.LastDeviceData*
        name: LastDeviceData
        nameWithType: GenericSlot.LastDeviceData
        qualifiedName: GenericSlot.LastDeviceData
    isDefinition: true
    commentId: Overload:Global.GenericSlot.LastDeviceData
  System.Collections.Generic.List{GeneralPID}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.GeneralPID
        name: GeneralPID
        nameWithType: GeneralPID
        qualifiedName: GeneralPID
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.GeneralPID
        name: GeneralPID
        nameWithType: GeneralPID
        qualifiedName: GeneralPID
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{GeneralPID}
  System.Collections.Generic.List{GenericDM}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.GenericDM
        name: GenericDM
        nameWithType: GenericDM
        qualifiedName: GenericDM
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.GenericDM
        name: GenericDM
        nameWithType: GenericDM
        qualifiedName: GenericDM
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{GenericDM}
  Global.GenericSlot.AddPIDtoSlot*:
    name:
      CSharp:
      - id: Global.GenericSlot.AddPIDtoSlot*
        name: AddPIDtoSlot
        nameWithType: GenericSlot.AddPIDtoSlot
        qualifiedName: GenericSlot.AddPIDtoSlot
      VB:
      - id: Global.GenericSlot.AddPIDtoSlot*
        name: AddPIDtoSlot
        nameWithType: GenericSlot.AddPIDtoSlot
        qualifiedName: GenericSlot.AddPIDtoSlot
    isDefinition: true
    commentId: Overload:Global.GenericSlot.AddPIDtoSlot
  Global.GenericSlot.AddDMtoSlot*:
    name:
      CSharp:
      - id: Global.GenericSlot.AddDMtoSlot*
        name: AddDMtoSlot
        nameWithType: GenericSlot.AddDMtoSlot
        qualifiedName: GenericSlot.AddDMtoSlot
      VB:
      - id: Global.GenericSlot.AddDMtoSlot*
        name: AddDMtoSlot
        nameWithType: GenericSlot.AddDMtoSlot
        qualifiedName: GenericSlot.AddDMtoSlot
    isDefinition: true
    commentId: Overload:Global.GenericSlot.AddDMtoSlot
  Global.GenericSlot:
    name:
      CSharp:
      - id: Global.GenericSlot
        name: GenericSlot
        nameWithType: GenericSlot
        qualifiedName: GenericSlot
      VB:
      - id: Global.GenericSlot
        name: GenericSlot
        nameWithType: GenericSlot
        qualifiedName: GenericSlot
    isDefinition: true
    commentId: T:Global.GenericSlot
  Global.ISlot.Ready*:
    name:
      CSharp:
      - id: Global.ISlot.Ready*
        name: Ready
        nameWithType: ISlot.Ready
        qualifiedName: ISlot.Ready
      VB:
      - id: Global.ISlot.Ready*
        name: Ready
        nameWithType: ISlot.Ready
        qualifiedName: ISlot.Ready
    isDefinition: true
    commentId: Overload:Global.ISlot.Ready
  Global.ISlot.GetDeviceData*:
    name:
      CSharp:
      - id: Global.ISlot.GetDeviceData*
        name: GetDeviceData
        nameWithType: ISlot.GetDeviceData
        qualifiedName: ISlot.GetDeviceData
      VB:
      - id: Global.ISlot.GetDeviceData*
        name: GetDeviceData
        nameWithType: ISlot.GetDeviceData
        qualifiedName: ISlot.GetDeviceData
    isDefinition: true
    commentId: Overload:Global.ISlot.GetDeviceData
  Global.ISlot:
    name:
      CSharp:
      - id: Global.ISlot
        name: ISlot
        nameWithType: ISlot
        qualifiedName: ISlot
      VB:
      - id: Global.ISlot
        name: ISlot
        nameWithType: ISlot
        qualifiedName: ISlot
    isDefinition: true
    commentId: T:Global.ISlot
  Global.GenericSlot.slotID:
    name:
      CSharp:
      - id: Global.GenericSlot.slotID
        name: slotID
        nameWithType: GenericSlot.slotID
        qualifiedName: GenericSlot.slotID
      VB:
      - id: Global.GenericSlot.slotID
        name: slotID
        nameWithType: GenericSlot.slotID
        qualifiedName: GenericSlot.slotID
    isDefinition: true
    parent: Global.GenericSlot
    commentId: F:Global.GenericSlot.slotID
  Global.GenericSlot.SlotID:
    name:
      CSharp:
      - id: Global.GenericSlot.SlotID
        name: SlotID
        nameWithType: GenericSlot.SlotID
        qualifiedName: GenericSlot.SlotID
      VB:
      - id: Global.GenericSlot.SlotID
        name: SlotID
        nameWithType: GenericSlot.SlotID
        qualifiedName: GenericSlot.SlotID
    isDefinition: true
    parent: Global.GenericSlot
    commentId: P:Global.GenericSlot.SlotID
  Global.GenericSlot.lastDeviceData:
    name:
      CSharp:
      - id: Global.GenericSlot.lastDeviceData
        name: lastDeviceData
        nameWithType: GenericSlot.lastDeviceData
        qualifiedName: GenericSlot.lastDeviceData
      VB:
      - id: Global.GenericSlot.lastDeviceData
        name: lastDeviceData
        nameWithType: GenericSlot.lastDeviceData
        qualifiedName: GenericSlot.lastDeviceData
    isDefinition: true
    parent: Global.GenericSlot
    commentId: F:Global.GenericSlot.lastDeviceData
  Global.GenericSlot.LastDeviceData:
    name:
      CSharp:
      - id: Global.GenericSlot.LastDeviceData
        name: LastDeviceData
        nameWithType: GenericSlot.LastDeviceData
        qualifiedName: GenericSlot.LastDeviceData
      VB:
      - id: Global.GenericSlot.LastDeviceData
        name: LastDeviceData
        nameWithType: GenericSlot.LastDeviceData
        qualifiedName: GenericSlot.LastDeviceData
    isDefinition: true
    parent: Global.GenericSlot
    commentId: P:Global.GenericSlot.LastDeviceData
  Global.GenericSlot.listOfPID:
    name:
      CSharp:
      - id: Global.GenericSlot.listOfPID
        name: listOfPID
        nameWithType: GenericSlot.listOfPID
        qualifiedName: GenericSlot.listOfPID
      VB:
      - id: Global.GenericSlot.listOfPID
        name: listOfPID
        nameWithType: GenericSlot.listOfPID
        qualifiedName: GenericSlot.listOfPID
    isDefinition: true
    parent: Global.GenericSlot
    commentId: F:Global.GenericSlot.listOfPID
  Global.GenericSlot.listOfDM:
    name:
      CSharp:
      - id: Global.GenericSlot.listOfDM
        name: listOfDM
        nameWithType: GenericSlot.listOfDM
        qualifiedName: GenericSlot.listOfDM
      VB:
      - id: Global.GenericSlot.listOfDM
        name: listOfDM
        nameWithType: GenericSlot.listOfDM
        qualifiedName: GenericSlot.listOfDM
    isDefinition: true
    parent: Global.GenericSlot
    commentId: F:Global.GenericSlot.listOfDM
  Global.GenericSlot.AddPIDtoSlot(GeneralPID):
    name:
      CSharp:
      - id: Global.GenericSlot.AddPIDtoSlot(GeneralPID)
        name: AddPIDtoSlot
        nameWithType: GenericSlot.AddPIDtoSlot
        qualifiedName: GenericSlot.AddPIDtoSlot
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.GeneralPID
        name: GeneralPID
        nameWithType: GeneralPID
        qualifiedName: GeneralPID
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericSlot.AddPIDtoSlot(GeneralPID)
        name: AddPIDtoSlot
        nameWithType: GenericSlot.AddPIDtoSlot
        qualifiedName: GenericSlot.AddPIDtoSlot
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.GeneralPID
        name: GeneralPID
        nameWithType: GeneralPID
        qualifiedName: GeneralPID
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericSlot
    commentId: M:Global.GenericSlot.AddPIDtoSlot(GeneralPID)
  Global.GenericSlot.AddDMtoSlot(GenericDM):
    name:
      CSharp:
      - id: Global.GenericSlot.AddDMtoSlot(GenericDM)
        name: AddDMtoSlot
        nameWithType: GenericSlot.AddDMtoSlot
        qualifiedName: GenericSlot.AddDMtoSlot
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.GenericDM
        name: GenericDM
        nameWithType: GenericDM
        qualifiedName: GenericDM
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericSlot.AddDMtoSlot(GenericDM)
        name: AddDMtoSlot
        nameWithType: GenericSlot.AddDMtoSlot
        qualifiedName: GenericSlot.AddDMtoSlot
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.GenericDM
        name: GenericDM
        nameWithType: GenericDM
        qualifiedName: GenericDM
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericSlot
    commentId: M:Global.GenericSlot.AddDMtoSlot(GenericDM)
  Global.SlotIn.GetDeviceData*:
    name:
      CSharp:
      - id: Global.SlotIn.GetDeviceData*
        name: GetDeviceData
        nameWithType: SlotIn.GetDeviceData
        qualifiedName: SlotIn.GetDeviceData
      VB:
      - id: Global.SlotIn.GetDeviceData*
        name: GetDeviceData
        nameWithType: SlotIn.GetDeviceData
        qualifiedName: SlotIn.GetDeviceData
    isDefinition: true
    commentId: Overload:Global.SlotIn.GetDeviceData
  Global.ISlot.GetDeviceData:
    name:
      CSharp:
      - id: Global.ISlot.GetDeviceData
        name: GetDeviceData
        nameWithType: ISlot.GetDeviceData
        qualifiedName: ISlot.GetDeviceData
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.ISlot.GetDeviceData
        name: GetDeviceData
        nameWithType: ISlot.GetDeviceData
        qualifiedName: ISlot.GetDeviceData
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.ISlot
    commentId: M:Global.ISlot.GetDeviceData
  Global.SlotIn.Ready*:
    name:
      CSharp:
      - id: Global.SlotIn.Ready*
        name: Ready
        nameWithType: SlotIn.Ready
        qualifiedName: SlotIn.Ready
      VB:
      - id: Global.SlotIn.Ready*
        name: Ready
        nameWithType: SlotIn.Ready
        qualifiedName: SlotIn.Ready
    isDefinition: true
    commentId: Overload:Global.SlotIn.Ready
  Global.ISlot.Ready(DeviceData,SimulationState):
    name:
      CSharp:
      - id: Global.ISlot.Ready(DeviceData,SimulationState)
        name: Ready
        nameWithType: ISlot.Ready
        qualifiedName: ISlot.Ready
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.ISlot.Ready(DeviceData,SimulationState)
        name: Ready
        nameWithType: ISlot.Ready
        qualifiedName: ISlot.Ready
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.DeviceData
        name: DeviceData
        nameWithType: DeviceData
        qualifiedName: DeviceData
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.SimulationState
        name: SimulationState
        nameWithType: SimulationState
        qualifiedName: SimulationState
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.ISlot
    commentId: M:Global.ISlot.Ready(DeviceData,SimulationState)
  Global.SlotIn:
    name:
      CSharp:
      - id: Global.SlotIn
        name: SlotIn
        nameWithType: SlotIn
        qualifiedName: SlotIn
      VB:
      - id: Global.SlotIn
        name: SlotIn
        nameWithType: SlotIn
        qualifiedName: SlotIn
    isDefinition: true
    commentId: T:Global.SlotIn
  Global.SlotOut.RegisterSlot*:
    name:
      CSharp:
      - id: Global.SlotOut.RegisterSlot*
        name: RegisterSlot
        nameWithType: SlotOut.RegisterSlot
        qualifiedName: SlotOut.RegisterSlot
      VB:
      - id: Global.SlotOut.RegisterSlot*
        name: RegisterSlot
        nameWithType: SlotOut.RegisterSlot
        qualifiedName: SlotOut.RegisterSlot
    isDefinition: true
    commentId: Overload:Global.SlotOut.RegisterSlot
  Global.SlotOut.GetNextDevice*:
    name:
      CSharp:
      - id: Global.SlotOut.GetNextDevice*
        name: GetNextDevice
        nameWithType: SlotOut.GetNextDevice
        qualifiedName: SlotOut.GetNextDevice
      VB:
      - id: Global.SlotOut.GetNextDevice*
        name: GetNextDevice
        nameWithType: SlotOut.GetNextDevice
        qualifiedName: SlotOut.GetNextDevice
    isDefinition: true
    commentId: Overload:Global.SlotOut.GetNextDevice
  Global.SlotOut.isConnected*:
    name:
      CSharp:
      - id: Global.SlotOut.isConnected*
        name: isConnected
        nameWithType: SlotOut.isConnected
        qualifiedName: SlotOut.isConnected
      VB:
      - id: Global.SlotOut.isConnected*
        name: isConnected
        nameWithType: SlotOut.isConnected
        qualifiedName: SlotOut.isConnected
    isDefinition: true
    commentId: Overload:Global.SlotOut.isConnected
  Global.SlotOut.SetLastDeviceData*:
    name:
      CSharp:
      - id: Global.SlotOut.SetLastDeviceData*
        name: SetLastDeviceData
        nameWithType: SlotOut.SetLastDeviceData
        qualifiedName: SlotOut.SetLastDeviceData
      VB:
      - id: Global.SlotOut.SetLastDeviceData*
        name: SetLastDeviceData
        nameWithType: SlotOut.SetLastDeviceData
        qualifiedName: SlotOut.SetLastDeviceData
    isDefinition: true
    commentId: Overload:Global.SlotOut.SetLastDeviceData
  Global.SlotOut.PushData*:
    name:
      CSharp:
      - id: Global.SlotOut.PushData*
        name: PushData
        nameWithType: SlotOut.PushData
        qualifiedName: SlotOut.PushData
      VB:
      - id: Global.SlotOut.PushData*
        name: PushData
        nameWithType: SlotOut.PushData
        qualifiedName: SlotOut.PushData
    isDefinition: true
    commentId: Overload:Global.SlotOut.PushData
  Global.GenericDeviceData.ComputeVolume*:
    name:
      CSharp:
      - id: Global.GenericDeviceData.ComputeVolume*
        name: ComputeVolume
        nameWithType: GenericDeviceData.ComputeVolume
        qualifiedName: GenericDeviceData.ComputeVolume
      VB:
      - id: Global.GenericDeviceData.ComputeVolume*
        name: ComputeVolume
        nameWithType: GenericDeviceData.ComputeVolume
        qualifiedName: GenericDeviceData.ComputeVolume
    isDefinition: true
    commentId: Overload:Global.GenericDeviceData.ComputeVolume
  Global.GenericDeviceData.DeviceName:
    name:
      CSharp:
      - id: Global.GenericDeviceData.DeviceName
        name: DeviceName
        nameWithType: GenericDeviceData.DeviceName
        qualifiedName: GenericDeviceData.DeviceName
      VB:
      - id: Global.GenericDeviceData.DeviceName
        name: DeviceName
        nameWithType: GenericDeviceData.DeviceName
        qualifiedName: GenericDeviceData.DeviceName
    isDefinition: true
    parent: Global.GenericDeviceData
    commentId: F:Global.GenericDeviceData.DeviceName
  Global.GenericDeviceData.DeviceModel:
    name:
      CSharp:
      - id: Global.GenericDeviceData.DeviceModel
        name: DeviceModel
        nameWithType: GenericDeviceData.DeviceModel
        qualifiedName: GenericDeviceData.DeviceModel
      VB:
      - id: Global.GenericDeviceData.DeviceModel
        name: DeviceModel
        nameWithType: GenericDeviceData.DeviceModel
        qualifiedName: GenericDeviceData.DeviceModel
    isDefinition: true
    parent: Global.GenericDeviceData
    commentId: F:Global.GenericDeviceData.DeviceModel
  Global.GenericDeviceData.Manufactor:
    name:
      CSharp:
      - id: Global.GenericDeviceData.Manufactor
        name: Manufactor
        nameWithType: GenericDeviceData.Manufactor
        qualifiedName: GenericDeviceData.Manufactor
      VB:
      - id: Global.GenericDeviceData.Manufactor
        name: Manufactor
        nameWithType: GenericDeviceData.Manufactor
        qualifiedName: GenericDeviceData.Manufactor
    isDefinition: true
    parent: Global.GenericDeviceData
    commentId: F:Global.GenericDeviceData.Manufactor
  Global.GenericDeviceData.ComputeVolume:
    name:
      CSharp:
      - id: Global.GenericDeviceData.ComputeVolume
        name: ComputeVolume
        nameWithType: GenericDeviceData.ComputeVolume
        qualifiedName: GenericDeviceData.ComputeVolume
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericDeviceData.ComputeVolume
        name: ComputeVolume
        nameWithType: GenericDeviceData.ComputeVolume
        qualifiedName: GenericDeviceData.ComputeVolume
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericDeviceData
    commentId: M:Global.GenericDeviceData.ComputeVolume
  Global.GenericHeaterData.MinPower*:
    name:
      CSharp:
      - id: Global.GenericHeaterData.MinPower*
        name: MinPower
        nameWithType: GenericHeaterData.MinPower
        qualifiedName: GenericHeaterData.MinPower
      VB:
      - id: Global.GenericHeaterData.MinPower*
        name: MinPower
        nameWithType: GenericHeaterData.MinPower
        qualifiedName: GenericHeaterData.MinPower
    isDefinition: true
    commentId: Overload:Global.GenericHeaterData.MinPower
  Global.GenericHeaterData.MaxPower*:
    name:
      CSharp:
      - id: Global.GenericHeaterData.MaxPower*
        name: MaxPower
        nameWithType: GenericHeaterData.MaxPower
        qualifiedName: GenericHeaterData.MaxPower
      VB:
      - id: Global.GenericHeaterData.MaxPower*
        name: MaxPower
        nameWithType: GenericHeaterData.MaxPower
        qualifiedName: GenericHeaterData.MaxPower
    isDefinition: true
    commentId: Overload:Global.GenericHeaterData.MaxPower
  Global.GenericHeaterData.DeadTime*:
    name:
      CSharp:
      - id: Global.GenericHeaterData.DeadTime*
        name: DeadTime
        nameWithType: GenericHeaterData.DeadTime
        qualifiedName: GenericHeaterData.DeadTime
      VB:
      - id: Global.GenericHeaterData.DeadTime*
        name: DeadTime
        nameWithType: GenericHeaterData.DeadTime
        qualifiedName: GenericHeaterData.DeadTime
    isDefinition: true
    commentId: Overload:Global.GenericHeaterData.DeadTime
  Global.GenericHeaterData.PowerCurve*:
    name:
      CSharp:
      - id: Global.GenericHeaterData.PowerCurve*
        name: PowerCurve
        nameWithType: GenericHeaterData.PowerCurve
        qualifiedName: GenericHeaterData.PowerCurve
      VB:
      - id: Global.GenericHeaterData.PowerCurve*
        name: PowerCurve
        nameWithType: GenericHeaterData.PowerCurve
        qualifiedName: GenericHeaterData.PowerCurve
    isDefinition: true
    commentId: Overload:Global.GenericHeaterData.PowerCurve
  Global.GenericHeaterData.Power*:
    name:
      CSharp:
      - id: Global.GenericHeaterData.Power*
        name: Power
        nameWithType: GenericHeaterData.Power
        qualifiedName: GenericHeaterData.Power
      VB:
      - id: Global.GenericHeaterData.Power*
        name: Power
        nameWithType: GenericHeaterData.Power
        qualifiedName: GenericHeaterData.Power
    isDefinition: true
    commentId: Overload:Global.GenericHeaterData.Power
  Global.GenericHeaterData:
    name:
      CSharp:
      - id: Global.GenericHeaterData
        name: GenericHeaterData
        nameWithType: GenericHeaterData
        qualifiedName: GenericHeaterData
      VB:
      - id: Global.GenericHeaterData
        name: GenericHeaterData
        nameWithType: GenericHeaterData
        qualifiedName: GenericHeaterData
    isDefinition: true
    commentId: T:Global.GenericHeaterData
  Global.GenericHeatExchangeData:
    name:
      CSharp:
      - id: Global.GenericHeatExchangeData
        name: GenericHeatExchangeData
        nameWithType: GenericHeatExchangeData
        qualifiedName: GenericHeatExchangeData
      VB:
      - id: Global.GenericHeatExchangeData
        name: GenericHeatExchangeData
        nameWithType: GenericHeatExchangeData
        qualifiedName: GenericHeatExchangeData
    isDefinition: true
    commentId: T:Global.GenericHeatExchangeData
  Global.GenericLoadData.Load*:
    name:
      CSharp:
      - id: Global.GenericLoadData.Load*
        name: Load
        nameWithType: GenericLoadData.Load
        qualifiedName: GenericLoadData.Load
      VB:
      - id: Global.GenericLoadData.Load*
        name: Load
        nameWithType: GenericLoadData.Load
        qualifiedName: GenericLoadData.Load
    isDefinition: true
    commentId: Overload:Global.GenericLoadData.Load
  Global.GenericLoadData:
    name:
      CSharp:
      - id: Global.GenericLoadData
        name: GenericLoadData
        nameWithType: GenericLoadData
        qualifiedName: GenericLoadData
      VB:
      - id: Global.GenericLoadData
        name: GenericLoadData
        nameWithType: GenericLoadData
        qualifiedName: GenericLoadData
    isDefinition: true
    commentId: T:Global.GenericLoadData
  Global.GenericPipeTData:
    name:
      CSharp:
      - id: Global.GenericPipeTData
        name: GenericPipeTData
        nameWithType: GenericPipeTData
        qualifiedName: GenericPipeTData
      VB:
      - id: Global.GenericPipeTData
        name: GenericPipeTData
        nameWithType: GenericPipeTData
        qualifiedName: GenericPipeTData
    isDefinition: true
    commentId: T:Global.GenericPipeTData
  Global.GenericPumpData.Curve*:
    name:
      CSharp:
      - id: Global.GenericPumpData.Curve*
        name: Curve
        nameWithType: GenericPumpData.Curve
        qualifiedName: GenericPumpData.Curve
      VB:
      - id: Global.GenericPumpData.Curve*
        name: Curve
        nameWithType: GenericPumpData.Curve
        qualifiedName: GenericPumpData.Curve
    isDefinition: true
    commentId: Overload:Global.GenericPumpData.Curve
  Global.GenericPumpData:
    name:
      CSharp:
      - id: Global.GenericPumpData
        name: GenericPumpData
        nameWithType: GenericPumpData
        qualifiedName: GenericPumpData
      VB:
      - id: Global.GenericPumpData
        name: GenericPumpData
        nameWithType: GenericPumpData
        qualifiedName: GenericPumpData
    isDefinition: true
    commentId: T:Global.GenericPumpData
  Global.GenericWaterPipeData:
    name:
      CSharp:
      - id: Global.GenericWaterPipeData
        name: GenericWaterPipeData
        nameWithType: GenericWaterPipeData
        qualifiedName: GenericWaterPipeData
      VB:
      - id: Global.GenericWaterPipeData
        name: GenericWaterPipeData
        nameWithType: GenericWaterPipeData
        qualifiedName: GenericWaterPipeData
    isDefinition: true
    commentId: T:Global.GenericWaterPipeData
  Global.GenericWaterPipeData.Diameter:
    name:
      CSharp:
      - id: Global.GenericWaterPipeData.Diameter
        name: Diameter
        nameWithType: GenericWaterPipeData.Diameter
        qualifiedName: GenericWaterPipeData.Diameter
      VB:
      - id: Global.GenericWaterPipeData.Diameter
        name: Diameter
        nameWithType: GenericWaterPipeData.Diameter
        qualifiedName: GenericWaterPipeData.Diameter
    isDefinition: true
    parent: Global.GenericWaterPipeData
    commentId: P:Global.GenericWaterPipeData.Diameter
  Global.GenericWaterPipeData.lenght:
    name:
      CSharp:
      - id: Global.GenericWaterPipeData.lenght
        name: lenght
        nameWithType: GenericWaterPipeData.lenght
        qualifiedName: GenericWaterPipeData.lenght
      VB:
      - id: Global.GenericWaterPipeData.lenght
        name: lenght
        nameWithType: GenericWaterPipeData.lenght
        qualifiedName: GenericWaterPipeData.lenght
    isDefinition: true
    parent: Global.GenericWaterPipeData
    commentId: F:Global.GenericWaterPipeData.lenght
  Global.GenericWaterPipeData.Lenght:
    name:
      CSharp:
      - id: Global.GenericWaterPipeData.Lenght
        name: Lenght
        nameWithType: GenericWaterPipeData.Lenght
        qualifiedName: GenericWaterPipeData.Lenght
      VB:
      - id: Global.GenericWaterPipeData.Lenght
        name: Lenght
        nameWithType: GenericWaterPipeData.Lenght
        qualifiedName: GenericWaterPipeData.Lenght
    isDefinition: true
    parent: Global.GenericWaterPipeData
    commentId: P:Global.GenericWaterPipeData.Lenght
  Global.GenericWaterPipeData.ComputeVolume:
    name:
      CSharp:
      - id: Global.GenericWaterPipeData.ComputeVolume
        name: ComputeVolume
        nameWithType: GenericWaterPipeData.ComputeVolume
        qualifiedName: GenericWaterPipeData.ComputeVolume
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Global.GenericWaterPipeData.ComputeVolume
        name: ComputeVolume
        nameWithType: GenericWaterPipeData.ComputeVolume
        qualifiedName: GenericWaterPipeData.ComputeVolume
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Global.GenericWaterPipeData
    commentId: M:Global.GenericWaterPipeData.ComputeVolume
  Global.GenericValveData.Curve*:
    name:
      CSharp:
      - id: Global.GenericValveData.Curve*
        name: Curve
        nameWithType: GenericValveData.Curve
        qualifiedName: GenericValveData.Curve
      VB:
      - id: Global.GenericValveData.Curve*
        name: Curve
        nameWithType: GenericValveData.Curve
        qualifiedName: GenericValveData.Curve
    isDefinition: true
    commentId: Overload:Global.GenericValveData.Curve
  Global.GenericValveData.MinValvePosition*:
    name:
      CSharp:
      - id: Global.GenericValveData.MinValvePosition*
        name: MinValvePosition
        nameWithType: GenericValveData.MinValvePosition
        qualifiedName: GenericValveData.MinValvePosition
      VB:
      - id: Global.GenericValveData.MinValvePosition*
        name: MinValvePosition
        nameWithType: GenericValveData.MinValvePosition
        qualifiedName: GenericValveData.MinValvePosition
    isDefinition: true
    commentId: Overload:Global.GenericValveData.MinValvePosition
  Global.GenericValveData.MaxValvePosition*:
    name:
      CSharp:
      - id: Global.GenericValveData.MaxValvePosition*
        name: MaxValvePosition
        nameWithType: GenericValveData.MaxValvePosition
        qualifiedName: GenericValveData.MaxValvePosition
      VB:
      - id: Global.GenericValveData.MaxValvePosition*
        name: MaxValvePosition
        nameWithType: GenericValveData.MaxValvePosition
        qualifiedName: GenericValveData.MaxValvePosition
    isDefinition: true
    commentId: Overload:Global.GenericValveData.MaxValvePosition
  Global.GenericValveData.ValvePosition*:
    name:
      CSharp:
      - id: Global.GenericValveData.ValvePosition*
        name: ValvePosition
        nameWithType: GenericValveData.ValvePosition
        qualifiedName: GenericValveData.ValvePosition
      VB:
      - id: Global.GenericValveData.ValvePosition*
        name: ValvePosition
        nameWithType: GenericValveData.ValvePosition
        qualifiedName: GenericValveData.ValvePosition
    isDefinition: true
    commentId: Overload:Global.GenericValveData.ValvePosition
  Global.GenericValveData:
    name:
      CSharp:
      - id: Global.GenericValveData
        name: GenericValveData
        nameWithType: GenericValveData
        qualifiedName: GenericValveData
      VB:
      - id: Global.GenericValveData
        name: GenericValveData
        nameWithType: GenericValveData
        qualifiedName: GenericValveData
    isDefinition: true
    commentId: T:Global.GenericValveData
  Global.GenericWaterPipeData.Diameter*:
    name:
      CSharp:
      - id: Global.GenericWaterPipeData.Diameter*
        name: Diameter
        nameWithType: GenericWaterPipeData.Diameter
        qualifiedName: GenericWaterPipeData.Diameter
      VB:
      - id: Global.GenericWaterPipeData.Diameter*
        name: Diameter
        nameWithType: GenericWaterPipeData.Diameter
        qualifiedName: GenericWaterPipeData.Diameter
    isDefinition: true
    commentId: Overload:Global.GenericWaterPipeData.Diameter
  Global.GenericWaterPipeData.Lenght*:
    name:
      CSharp:
      - id: Global.GenericWaterPipeData.Lenght*
        name: Lenght
        nameWithType: GenericWaterPipeData.Lenght
        qualifiedName: GenericWaterPipeData.Lenght
      VB:
      - id: Global.GenericWaterPipeData.Lenght*
        name: Lenght
        nameWithType: GenericWaterPipeData.Lenght
        qualifiedName: GenericWaterPipeData.Lenght
    isDefinition: true
    commentId: Overload:Global.GenericWaterPipeData.Lenght
  Global.GenericWaterPipeData.ComputeVolume*:
    name:
      CSharp:
      - id: Global.GenericWaterPipeData.ComputeVolume*
        name: ComputeVolume
        nameWithType: GenericWaterPipeData.ComputeVolume
        qualifiedName: GenericWaterPipeData.ComputeVolume
      VB:
      - id: Global.GenericWaterPipeData.ComputeVolume*
        name: ComputeVolume
        nameWithType: GenericWaterPipeData.ComputeVolume
        qualifiedName: GenericWaterPipeData.ComputeVolume
    isDefinition: true
    commentId: Overload:Global.GenericWaterPipeData.ComputeVolume
  Global:
    name:
      CSharp:
      - name: Global
        nameWithType: Global
        qualifiedName: Global
      VB:
      - name: ''
        nameWithType: ''
        qualifiedName: ''
    isDefinition: true
